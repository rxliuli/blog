<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>rxliuli blog</title>
  
  
  <link href="https://blog.rxliuli.com/atom.xml" rel="self"/>
  
  <link href="https://blog.rxliuli.com/"/>
  <updated>2022-12-25T06:19:59.898Z</updated>
  <id>https://blog.rxliuli.com/</id>
  
  <author>
    <name>rxliuli</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>重新发布 fs-extra 用以正确支持 esm/cjs 使用</title>
    <link href="https://blog.rxliuli.com/p/0e1fad3617514ced89c07959c8d8f52b/"/>
    <id>https://blog.rxliuli.com/p/0e1fad3617514ced89c07959c8d8f52b/</id>
    <published>2022-12-25T05:40:07.414Z</published>
    <updated>2022-12-25T06:19:59.898Z</updated>
    
    <content type="html"><![CDATA[<h2 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h2><p>自从更新 nodejs@18 并切换到 esm only 以来，许多库都已经被替换成支持 esm 导入，但其中 <a href="https://www.npmjs.com/package/fs-extra">fs-extra</a> 却一直没有正确的支持 esm 使用，也没有找到合适的替代品。在吾辈之前提出的 <a href="https://github.com/jprichardson/node-fs-extra/pull/986">一个 PR</a> 被否定之后，决定重新发布一个正确支持 esm 使用的 <a href="https://www.npmjs.com/package/fs-extra-unified">fs-extra-unified</a> 模块。</p><p>如果你还不知道 fs-extra 是什么，这里可以简单介绍一下：它是一个 nodejs 文件操作相关的工具库，用以完全替代 fs 模块，在 fs/promises 存在之前，它就已经将所有 fs 中的异步 callback 函数转换为了 Promise。同时提供了另外一些非常有用的工具函数以供使用，例如 <code>pathExists</code>、<code>remove</code>、<code>mkdirp</code>、<code>copy</code>。</p><p>例如删除一个临时目录之后然后重建它</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> { remove, mkdirp } <span class="hljs-keyword">from</span> <span class="hljs-string">'fs-extra'</span><br><span class="hljs-keyword">import</span> path <span class="hljs-keyword">from</span> <span class="hljs-string">'node:path'</span><br><span class="hljs-keyword">import</span> { fileURLToPath } <span class="hljs-keyword">from</span> <span class="hljs-string">'node:url'</span><br><br><span class="hljs-keyword">const</span> __filename = <span class="hljs-title function_">fileURLToPath</span>(<span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">url</span>)<br><span class="hljs-keyword">const</span> __dirname = path.<span class="hljs-title function_">dirname</span>(__filename)<br><span class="hljs-keyword">const</span> tempPath = path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">'.temp'</span>)<br><span class="hljs-keyword">await</span> <span class="hljs-title function_">remove</span>(tempPath)<br><span class="hljs-keyword">await</span> <span class="hljs-title function_">mkdirp</span>(tempPath)<br></code></pre></td></tr></tbody></table></figure><p>但在 esm 模块中，它目前并不能正确支持 ts 使用，例如上面那段代码只能在 cjs 模块中可以正常使用。在 esm 模块中，必须使用以下导入</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> fsExtra <span class="hljs-keyword">from</span> <span class="hljs-string">'fs-extra'</span><br><span class="hljs-keyword">const</span> { remove, mkdirp } = fsExtra<br></code></pre></td></tr></tbody></table></figure><p>即便 fs-extra@11 宣称已经支持 esm 了，但却是以另一个 entry <code>fs-extra/esm</code> 支持的，而且 ts 类型定义还尚未更新导致 ts 中实际上无法使用。例如上面的导入可以转换为以下导入</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> { remove, mkdirp } <span class="hljs-keyword">from</span> <span class="hljs-string">'fs-extra/esm'</span><br></code></pre></td></tr></tbody></table></figure><p>另外它还有另一个麻烦的问题，即不支持 fs 导出的函数，例如以下代码会报错</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> { readFile } <span class="hljs-keyword">from</span> <span class="hljs-string">'fs-extra/esm'</span><br><span class="hljs-keyword">import</span> { fileURLToPath } <span class="hljs-keyword">from</span> <span class="hljs-string">'node:url'</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">await</span> <span class="hljs-title function_">readFile</span>(<span class="hljs-title function_">fileURLToPath</span>(<span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">url</span>), <span class="hljs-string">'utf-8'</span>))<br></code></pre></td></tr></tbody></table></figure><p>官方声称只会 <code>fs-extra/esm</code> 只会导出独有的一些函数，fs 原本导出的函数需要使用 <code>fs/promises</code> 模块，需要修改为以下导入</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> { readFile } <span class="hljs-keyword">from</span> <span class="hljs-string">'fs/promises'</span><br><span class="hljs-keyword">import</span> { fileURLToPath } <span class="hljs-keyword">from</span> <span class="hljs-string">'node:url'</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">await</span> <span class="hljs-title function_">readFile</span>(<span class="hljs-title function_">fileURLToPath</span>(<span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">url</span>), <span class="hljs-string">'utf-8'</span>))<br></code></pre></td></tr></tbody></table></figure><p>好的，看起来 esm/ts 支持就是二等公民，让吾辈总结一下已知的问题</p><ol><li>默认的 <code>fs-extra</code> entry 不支持 esm 命名导入</li><li><code>fs-extra/esm</code> 不支持 fs 的原有函数</li><li><code>fs-extra/esm</code> 没有正确声明 ts 类型定义</li><li>cjs/esm 使用的行为不同</li></ol><p>正是因为它是常用的工具库，所以吾辈才重新发布它。</p><h2 id="重新发布"><a href="#重新发布" class="headerlink" title="重新发布"></a>重新发布</h2><p>基本思路很简单，通过脚本扫描 <code>fs-extra</code> 导出的模块，然后生成一个 esm 的 entry，最终在 package.json 的 <code>exports</code> 中正确声明，这样 esm/cjs 便在使用层面不再有差异。</p><h3 id="期望的结果"><a href="#期望的结果" class="headerlink" title="期望的结果"></a>期望的结果</h3><ol><li><p>esm 支持命名导入和默认导入</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> { readdir } <span class="hljs-keyword">from</span> <span class="hljs-string">'fs-extra'</span><br><span class="hljs-keyword">import</span> fsExtra <span class="hljs-keyword">from</span> <span class="hljs-string">'fs-extra'</span><br><span class="hljs-keyword">import</span> { fileURLToPath } <span class="hljs-keyword">from</span> <span class="hljs-string">'url'</span><br><span class="hljs-keyword">import</span> path <span class="hljs-keyword">from</span> <span class="hljs-string">'path'</span><br><br><span class="hljs-keyword">const</span> __filename = <span class="hljs-title function_">fileURLToPath</span>(<span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">url</span>)<br><span class="hljs-keyword">const</span> __dirname = path.<span class="hljs-title function_">dirname</span>(__filename)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">await</span> <span class="hljs-title function_">readdir</span>(__dirname))<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">await</span> fsExtra.<span class="hljs-title function_">readdir</span>(__dirname))<br></code></pre></td></tr></tbody></table></figure></li><li><p>cjs 支持命名导入和默认导入</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> { readdir } <span class="hljs-keyword">from</span> <span class="hljs-string">'fs-extra'</span><br><span class="hljs-keyword">import</span> fsExtra <span class="hljs-keyword">from</span> <span class="hljs-string">'fs-extra'</span><br><span class="hljs-keyword">const</span> { <span class="hljs-attr">readdir</span>: readdirCjs } = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs-extra'</span>)<br><span class="hljs-keyword">const</span> fsExtraCjs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs-extra'</span>)<br>;(<span class="hljs-keyword">async</span> () =&gt; {<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">await</span> <span class="hljs-title function_">readdir</span>(__dirname))<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">await</span> <span class="hljs-title function_">readdirCjs</span>(__dirname))<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">await</span> fsExtra.<span class="hljs-title function_">readdir</span>(__dirname))<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">await</span> fsExtraCjs.<span class="hljs-title function_">readdir</span>(__dirname))<br>})()<br></code></pre></td></tr></tbody></table></figure></li><li><p>正确支持 ts 使用，esm 不再使用单独的 entry</p></li></ol><h3 id="最终的实现方法"><a href="#最终的实现方法" class="headerlink" title="最终的实现方法"></a>最终的实现方法</h3><ol><li><p>使用生成脚本生成 esm entry</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> fsExtra = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./lib/index'</span>)<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>)<br><span class="hljs-keyword">const</span> { difference } = <span class="hljs-built_in">require</span>(<span class="hljs-string">'lodash'</span>)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">scan</span>(<span class="hljs-params"></span>) {<br>  <span class="hljs-keyword">const</span> excludes = [<br>    <span class="hljs-string">'FileReadStream'</span>,<br>    <span class="hljs-string">'FileWriteStream'</span>,<br>    <span class="hljs-string">'_toUnixTimestamp'</span>,<br>    <span class="hljs-string">'F_OK'</span>,<br>    <span class="hljs-string">'R_OK'</span>,<br>    <span class="hljs-string">'W_OK'</span>,<br>    <span class="hljs-string">'X_OK'</span>,<br>    <span class="hljs-string">'gracefulify'</span>,<br>  ]<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">difference</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(fsExtra), excludes)<br>}<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">generate</span>(<span class="hljs-params">list</span>) {<br>  <span class="hljs-keyword">return</span> (<br>    <span class="hljs-string">"import fsExtra from './index'\n"</span> +<br>    list.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> <span class="hljs-string">`export const <span class="hljs-subst">${item}</span> = fsExtra.<span class="hljs-subst">${item}</span>\n`</span>).<span class="hljs-title function_">join</span>(<span class="hljs-string">''</span>) +<br>    <span class="hljs-string">`export default {<span class="hljs-subst">${list</span></span><br><span class="hljs-subst"><span class="hljs-string">      .map((item) =&gt; <span class="hljs-string">`<span class="hljs-subst">${item}</span>: fsExtra.<span class="hljs-subst">${item}</span>,`</span>)</span></span><br><span class="hljs-subst"><span class="hljs-string">      .join(<span class="hljs-string">''</span>)}</span>}`</span><br>  )<br>}<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">build</span>(<span class="hljs-params"></span>) {<br>  <span class="hljs-keyword">const</span> list = <span class="hljs-title function_">scan</span>()<br>  <span class="hljs-keyword">const</span> code = <span class="hljs-title function_">generate</span>(list)<br>  <span class="hljs-keyword">await</span> fsExtra.<span class="hljs-title function_">writeFile</span>(path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">'lib/esm.mjs'</span>), code)<br>}<br><br><span class="hljs-title function_">build</span>()<br></code></pre></td></tr></tbody></table></figure></li><li><p>然后添加 <code>@types/fs-extra</code> 的依赖，在 <code>index.d.ts</code> 中重新导出</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> * <span class="hljs-keyword">from</span> <span class="hljs-string">'fs-extra'</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>在 package.json 中声明正确的 <code>exports/types</code> 字段</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">{</span><br>  <span class="hljs-attr">"exports"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span><br>    <span class="hljs-attr">"."</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span><br>      <span class="hljs-attr">"import"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"./lib/esm.mjs"</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"require"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"./lib/index.js"</span><br>    <span class="hljs-punctuation">}</span><br>  <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">"types"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"./index.d.ts"</span><br><span class="hljs-punctuation">}</span><br></code></pre></td></tr></tbody></table></figure></li></ol><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>如果 fs-extra 最终正确支持 esm/ts 使用，吾辈也将会删除这个模块，避免造成麻烦，不过在此之前，吾辈还是只能先使用这个模块。</p><blockquote><p>GitHub: <a href="https://github.com/rxliuli/node-fs-extra">https://github.com/rxliuli/node-fs-extra</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    <category term="前端" scheme="https://blog.rxliuli.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="工具库" scheme="https://blog.rxliuli.com/categories/%E5%89%8D%E7%AB%AF/%E5%B7%A5%E5%85%B7%E5%BA%93/"/>
    
    
    <category term="开源" scheme="https://blog.rxliuli.com/tags/%E5%BC%80%E6%BA%90/"/>
    
    <category term="javascript" scheme="https://blog.rxliuli.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>出一些用不到的东西</title>
    <link href="https://blog.rxliuli.com/p/0f2182e4368c4195be5f7699fa62e026/"/>
    <id>https://blog.rxliuli.com/p/0f2182e4368c4195be5f7699fa62e026/</id>
    <published>2022-12-17T05:27:21.925Z</published>
    <updated>2022-12-19T11:42:46.257Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一些用不到的东西想出掉，所以在这里发一下。</p><ul><li>走闲鱼，有意向请使用 mail/telegram 联系，吾辈会上咸鱼挂上去发链接</li><li>不讲价，浪费的时间可能很容易超过物品的价值</li><li>不包邮，所以如果是书的话最好不要只买一本</li></ul><h2 id="电子垃圾"><a href="#电子垃圾" class="headerlink" title="电子垃圾"></a>电子垃圾</h2><h3 id="Wacom-数位板-CTL672"><a href="#Wacom-数位板-CTL672" class="headerlink" title="[ ] Wacom 数位板 CTL672"></a>[ ] Wacom 数位板 CTL672</h3><p>好吧，之前想替代纸笔处理流程图之类的事情，后来证明是吾辈想多了。300 出</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEW9cXgVF4kWEt0XjOVK4zRrrTlYR_2H2vYgmqNfWoM1z6ruZkpH9vzkmIYvswSHLZMnA8GB56id_NyhFqFNNqL6PVGBNEpAG5GV9LURjmkFLiBjai1JGbg6lJDuvGNVvyuGNGLPc0AZG_zovV8L3X8L=w1783-h1337-no?authuser=0" alt="1"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEUul85wYGXijKWa340sER-n3MjfGBGMKqscvTMxms96bgYpZY9B6LDB0x31wY2DCSuCT--QalGC8N3-2rRwApSoCqojAG6mGJ48H5hEAVuacTnU5TKOWLiXqa8bRWJY017NWjnfFFH6MgAO4x2FfT8x=w1783-h1337-no?authuser=0" alt="2"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEX5zJsnjLpuIIze6e4eZm74Ni_NQ_xPXBGNZXK-aiu5ji3BlSq6L6golzWnxA0Fj2g8w_6a7kOnymz6xjVicGbU_19vyhS5d0b2eT5IjRI1h4ycynAm0jLjE7e6YBd5Nu1Mpe4gei2NiwzjF3bSayRk=w1783-h1337-no?authuser=0" alt="3"></p><blockquote><p>淘宝链接: <a href="https://detail.tmall.com/item.htm?id=558799421450">https://detail.tmall.com/item.htm?id=558799421450</a></p></blockquote><h3 id="东方叠纸周边"><a href="#东方叠纸周边" class="headerlink" title="[ ] 东方叠纸周边"></a>[ ] 东方叠纸周边</h3><p>好吧，在一次东方漫展中买的，通电之后还算不错。30 出。</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEWnh7yqh5EbNnN3RO8MK5M5mxIdmMNhsZQnhguNA9onYRFkJx4a1dXcJAh0JRTuDX5pcZTxDAEn-hV4jlxp2hBKmBVbJbLQ9NmNxDV8x6sj2qlBKvJGtCav5z2TttWd_dfPTfMYaReAfxJnzqLz_znt=w1003-h1337-no?authuser=0" alt="1"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEVGp5qWQnY2aY6A7kXr8ugv5cHNPvO6VXkDfbC_dsQkmgLE_QGs_g0v5A8PAoOvzm296L44hmqan47ekjgg7wsxSBSsqO88vXfOBjA36NMDfZADRSg5jtJ2WVyfN4St_TGXSpwdyujJyRMLbZBk1iXL=w1003-h1337-no?authuser=0" alt="2"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEVdYYH_iwcUOuv2-EwnSW6teaJN-MYBwhnnqxmMAl4mHkxJPfIbAd1oUvt19rEigT6f5ZqOIOuS4I8iKwW7ayKssrV5nrkhqW9aqNIcORIZ66XC0W7RmSP3HwBbl5Ek9sDOxNW22RKuT3kl1hrf9VCW=w540-h720-no?authuser=0" alt="3"></p><h3 id="Kindle-Paperwhite4"><a href="#Kindle-Paperwhite4" class="headerlink" title="[ ] Kindle Paperwhite4"></a>[ ] Kindle Paperwhite4</h3><p>之前买的 kindle 想尝试电子书，后面换屏幕更大的 boox 了，吾辈没有太多便携的需求。755 出</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEUU8dgt_glJOU_hXn1afCq2DgBFWMZBEYqSNxcpN1pUWYvvqggcbklcV-FkBZiFDtjRmZp24O14FlXT_TERiqv87IfY3H1JCetV6Zan2yeHbkvj76LNar8KWCd4V2dd1urVWRhTrqeMYfiTwVwQiHVy=w1003-h1337-no?authuser=0" alt="1"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEWoUAUNQNTDAYYZChNN2Zqc4NzWm1DpdN_1PBG6w_tujfkuPSHcI8loLPSfohioVb2huH7yycvT2r_fUkxqSMYOdHpP6SH-4d8YTytyDij3Un99tTJEVG91ab5iAPDTTE0eVIfIcn78WYKMzwv1UIF5=w1003-h1337-no?authuser=0" alt="2"></p><h3 id="GPD-Pocket2-代"><a href="#GPD-Pocket2-代" class="headerlink" title="[ ] GPD Pocket2 代"></a>[ ] GPD Pocket2 代</h3><p>早前买的想着出去玩时或许可以使用，结果一年到头也没出去玩几次。2160 出</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEWW6-dQ9bAIgKEHViqRXR2oXzM1c7xldGL1-IEnd3tI2PFJ2nVTdimz_D5zt68S8Y56g9F-6gpbyWE_syTKb-Tce-pMm20xwY99YdD-LHyiNMv-gS3JyFodn7BTsQcZ78ZbpXt78AfZL_KZheSeWjhR=w1003-h1337-no?authuser=0" alt="1"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEXrqbnSDSfqiNmtybKX4g16DG3r8prMSwCuvx8MnvWM0o8P-BQz6MJ2-miXIujwwainJARY2ZSEJYDcmaIEx2fBGPONYX3sm2E-DdJ91Q2Ok_1isxeg4MCGmpjEK61dG1hYJIzb-uX4ET1TwGJn2X4y=w1003-h1337-no?authuser=0" alt="2"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEUke9qjChU2HVUjZjhJS0lxMewYNFWI0dSN2GeyGU8bH-QhLORMw_w8YVLAPU3fn0jmuwxtBbKDGUaEuPhA2uj4o22XjSn1jT8MGp8y0cxfOAag4n_6o8b2QusTZn4L4u6u2sTZCCCxkDSlxxpVPO9y=w1003-h1337-no?authuser=0" alt="3"></p><blockquote><p>淘宝链接: <a href="https://detail.tmall.com/item.htm?id=592357039823">https://detail.tmall.com/item.htm?id=592357039823</a></p></blockquote><h3 id="英菲克-H1-硬盘盒子"><a href="#英菲克-H1-硬盘盒子" class="headerlink" title="[ ] 英菲克 H1 硬盘盒子"></a>[ ] 英菲克 H1 硬盘盒子</h3><p>之前买的硬盘盒，不过后来组台式机就空出来一个。65 出</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEXbugIVWTIPKy1LF_9P_Cn0uPt4hHGzNCEinmocyQSlgYf6ydWssw4yTckNLp7p-CuRjQKSCFaMtVr5svD-ckuyuBNfiNbkpaGPGcc13wS06CdPoJJUm2Z8wG1DWtQCIhgbdeCJq8PG4gIgSZb3BNny=w1003-h1337-no?authuser=0" alt="1"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEVbKMwOsmiWWy6NllDGIeK2PTaWjOsbbRAgQZlxxtbpYp5nV1-GJ9SsWKXAEIK84pH0TGJWifLWof8Klv3HOFcwyoJzLSsh4dx06qRTH4KnkO-ZpWSTsO_cpkrUrkj-afLmfpf6q01OOLB6dqJplJdH=w1783-h1337-no?authuser=0" alt="2"></p><blockquote><p>淘宝链接: <a href="https://detail.tmall.com/item.htm?id=580593221126">https://detail.tmall.com/item.htm?id=580593221126</a></p></blockquote><h2 id="实体书"><a href="#实体书" class="headerlink" title="实体书"></a>实体书</h2><blockquote><p>由于转向电子书，所以之前的实体书大多都要出掉。</p></blockquote><h3 id="x-出租女友-1-7"><a href="#x-出租女友-1-7" class="headerlink" title="[x] 出租女友 1-7"></a>[x] 出租女友 1-7</h3><p>之前在漫展上买的，56 出</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEWajPcucpZX5XWvHq_RsYrBON952MQZo_Zh72BWsM32N73GjlvtCsq-esdya3lviqHV8APqYO5VAaEzHlGK1FpsCmFBOMZ07IsBrsE1GoKTY0ythGEIodccKtMXWi23fkETA1yq0-v_bQEF3gwOIPXh=w1783-h1337-no?authuser=0" alt="1"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEVqmykVlvnOGKYxqhmuIPrguYEJhymItHsSsctUv5wC2YpK6aX9JxPF21FmNQQT5MvEEygpXEga977UsPU9acO6uipOqP_45oDx2RrB_vFfQfoU3gkJfYFq_g0TCRv6yXdMijYNbABNCRF8DDTI9wXV=w1783-h1337-no?authuser=0" alt="2"></p><h3 id="神雕侠侣"><a href="#神雕侠侣" class="headerlink" title="[ ] 神雕侠侣"></a>[ ] 神雕侠侣</h3><p>39 出。</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEVrwOMyHAb4l5pJh3-v_Iy08MZCPUEErBrRYsJQ5lp8OhMXqew10pOLh0MBP5m8BOp9YRqLM1Gz9sdGamyg4aVLJfbkjVu2ihGEljF3yFSaN4rdaKr0kPZljUXr_NTVJVnSa9JX43DkTLz9wr72ZZtw=w1783-h1337-no?authuser=0" alt="1"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEWk6KbrlUmoINsU5EDvXp98IAszMx581ZC9xklYKsts68xth9kyGIHRygnSnZrmmKT1YMGfXM9d7ucLrrH4CGHzKGbICgX1UAH0oUxbnEH5zO2saanzpyO9HqBCnU4TD7g5U6aAthnOchGK6-iyvlxG=w1783-h1337-no?authuser=0" alt="2"></p><h3 id="来自新世界"><a href="#来自新世界" class="headerlink" title="[ ] 来自新世界"></a>[ ] 来自新世界</h3><p>42 出</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEXW12m8aCJ_lQmC2vM2-sCzFEIzBKU8u1MYUVycSL51fDg4M68g6ws8IpgxklWJd0V6ktos3JNXaajzIo0YWWIdUyCnt_aTgRHsyHsPYV3Y0v0kjHTNPMB_ZfbBpK_LOIbWMig6qjlkqEgdRRevuRGZ=w1003-h1337-no?authuser=0" alt="1"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEVKmbarEpe2y3VJIB6JWxElwuZ_P4H_myOZ7Aj2GspthJ0yGUx7X1pmLd0uHhqEzRmXv-1lZdeIoB_4tVpswN7JkWGWy81OaCq9ZErc6dZ-RxbKw4wQwzSOWC2CwEi_qCS6WgzeFYRYBE0XThPhzBax=w1783-h1337-no?authuser=0" alt="2"></p><h3 id="规模-原则-爆裂"><a href="#规模-原则-爆裂" class="headerlink" title="[ ] 规模 + 原则 + 爆裂"></a>[ ] 规模 + 原则 + 爆裂</h3><p>103 出</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEVFPJ2Ci9zcUYS2s85p8vWOwIAqQWz2oZaCsXDehTKrJuCexhyowmaY-MyjgEKf7aY2QRWTEpzZ4LNCQQNLzu0HQXOw2TKaZT096H2XKMljbsi6gVYzoenVg_JrDCNCDqyQCl37Duel0yELJzb0xo0I=w1003-h1337-no?authuser=0" alt="1"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEXb_r1kwP_ZI1h2w3ZxhMsctqBqNUy9upW5AoZOZO_3_yCe0roxFE9YR1VxHabfaZQlyAhgC3qRdAcshKCn1JRJOjXB-um_6ejUN_gp9zNeWz_lXYB6y914LbAWuJJIZ7EysGg7Jy0jXgpWP8awr_W-=w1003-h1337-no?authuser=0" alt="2"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEWz_GqPKsNcNx-5Qxzhfp3k884FTgbcOrOHEwQTma-zo3csnrt_iRSMoDw08aMNxNHBt27CXJHI_wH25GKZscXC4FjXCqp8QxRj8cHy8QXeNPVVTMlfNhy-2f9Rhj6VoK7VcqF3M4Jpxpw_ukBi12g4=w1003-h1337-no?authuser=0" alt="3"></p><h3 id="拉普拉斯的魔女"><a href="#拉普拉斯的魔女" class="headerlink" title="[ ] 拉普拉斯的魔女"></a>[ ] 拉普拉斯的魔女</h3><p>12 出</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEWaeQjKyEdtMfkrCjNgFgIuF4Dltaamfsuszz6pcoRyEgAUH0qR2c2t7edp_qAe1kkRywBOfTWuOiq7kbANgWzoY8lPW-eUjS-43eWc4H3-BZSzTX1wPoAWAMRZhpZ7UeTdhwD4P-6d699cBdbExjdz=w1003-h1337-no?authuser=0" alt="1"></p><h3 id="朝花夕拾"><a href="#朝花夕拾" class="headerlink" title="[ ] 朝花夕拾"></a>[ ] 朝花夕拾</h3><p>11 出</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEXAkToTAP9ag-4cho_psP3GF8vrmg_7n4Eck_CcMZ696PzmIUyD4xDYwSDU3hYyvjjlIxKGXzFRItDwH9fHW9bpLIhnFRzSVlZUNXj1K9AvDCMekB5EK0YfzdATGj5W9xaQjZFWJ5touPZzW_O4eKB_=w1003-h1337-no?authuser=0" alt="1"></p><h3 id="人以什么理由来记忆"><a href="#人以什么理由来记忆" class="headerlink" title="[ ] 人以什么理由来记忆"></a>[ ] 人以什么理由来记忆</h3><p>42 出</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEVYX8HBpa1qlxar6MP6ApBj9GhIp4_fZHjNUFLtUEaVOGi1Fi8AZV2ncmxmcJUqglXEPS38OBlY00AHQO1gscb6Fgglvv8pNGjOWsGA8ZRZZt8TmP7QvxfbjOQ7wtFvIF8C744IG7HIddrA-x5CEhfP=w1003-h1337-no?authuser=0" alt="1"></p><h3 id="美丽新世界"><a href="#美丽新世界" class="headerlink" title="[ ] 美丽新世界"></a>[ ] 美丽新世界</h3><p>29 出</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEWHdP85uGGqvbQp5TLA5HO7M6Baqaji4WklbaxyRu3JrWxOWju1O2Lwpc1FQ4pLb5x6Hja5r9e5RI-huY3udnMn0GFx8pmdQy_wSjd11br9kNd3WzKRh8eXNi6UBkcJG7xohvn-bYm-QZHolG4Q74h5=w1003-h1337-no?authuser=0" alt="1"></p><h3 id="阿尼玛"><a href="#阿尼玛" class="headerlink" title="[ ] 阿尼玛"></a>[ ] 阿尼玛</h3><p>9 出</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEUsGluA7u4mA9OykS_yDKDlESB6GiHYyaKV97wSERNB7v2VqIK0nf06v-LBgkfUA5Yyv7G45RbTCWR-dVMNDDhMAkjfDPQ49lWGylXwLvO-UtSRqTGsARgjWkNIE0ZyzsOb_oUQAG_ECCJDZKJm3NMd=w1003-h1337-no?authuser=0" alt="1"></p><h3 id="给心理治疗师的礼物"><a href="#给心理治疗师的礼物" class="headerlink" title="[ ] 给心理治疗师的礼物"></a>[ ] 给心理治疗师的礼物</h3><p>23 出</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEXexPSI1ZyncH27jm5a1ypELpbfu9w3ODJkJ28RKQZav0eREmRZbuA3XYdVqGoxY-qrrjxAd0LwaxVrJUWLSdYGjWC0rnNpfXwdthEKLf2W88qQpGbGxSjpy1JGRYEz9boPQT9j0f_t2JXOHlKfIXjD=w1003-h1337-no?authuser=0" alt="1"></p><h3 id="金字塔原理"><a href="#金字塔原理" class="headerlink" title="[ ] 金字塔原理"></a>[ ] 金字塔原理</h3><p>53 出</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEXu-JaETRgd3TFtOPqV4lMS06DKGAHyI6XqlUzV9qzQvVno4V3izD2y4unTXYCVv5Wbro1Py0ZFZh-6KSrrSHadEKCHWC80Zxf_wEkK5A01Fyd_cpx2pGubcqCzKyom3DioGPN4nFw-WXEED2l6D6RD=w1003-h1337-no?authuser=0" alt="1"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEVQaUo7_KlCNuqvRQDtjdF_7vD8DsgXQbRwnLV9jy2hWC3xyKjljDgGzWOYF1rg2XADJVLbaNo3iJ9r4hSLAL8Cj4L2SMJJUwikee-CZuz8TzsTX42qO8x-4u60-1pw6ckjmui74OfIeNZfNCXpgP4B=w1783-h1337-no?authuser=0" alt="2"></p><h3 id="你不知道的自己"><a href="#你不知道的自己" class="headerlink" title="[ ] 你不知道的自己"></a>[ ] 你不知道的自己</h3><p>34 出</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEUtx4cXxTvf-gZbl7RFg0zZMaFyu2CyUr1XayGUUJDLdkA6eWIuViZMjvSSV3CY5fF8QbwU5CKzSwiiCj-LOkPUAoUsiFjJDOnbVIosQwrkPIEIV9aXkbJcpI7m8oN5Frys0I9d7qBa4jHMBfwcu06m=w1003-h1337-no?authuser=0" alt="1"></p><h3 id="论人类不平等的起源"><a href="#论人类不平等的起源" class="headerlink" title="[ ] 论人类不平等的起源"></a>[ ] 论人类不平等的起源</h3><p>14 出</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEWWhsi1fRpszGZ5-oeP2XyKWWdjS7QE2U7GcebmRkDvE7VeqwIhDGPHl2kEhOMy-Lt-jeGIZKHQfnKqRg-SrwO-mw3IHTdGjDs87IFtD5UG9IsyqZctbm6sLz9FC33XSfhRXqabJ_vk16kpIEuK8Uq3=w1003-h1337-no?authuser=0" alt="1"></p><h3 id="网络是怎样连接的-程序是怎样跑起来的-计算机是怎么跑起来的"><a href="#网络是怎样连接的-程序是怎样跑起来的-计算机是怎么跑起来的" class="headerlink" title="[ ] 网络是怎样连接的 + 程序是怎样跑起来的 + 计算机是怎么跑起来的"></a>[ ] 网络是怎样连接的 + 程序是怎样跑起来的 + 计算机是怎么跑起来的</h3><p>54 出</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEVL430Tkj85rgaCM9M2jSz5_KOtVUNb6jIC9p4KczVhBG5gr0MbrvgG7a13pFx52Gek-tqDdi-6CgZW93DIZ9IEHkCVSKF3qwjoDqhRet0JFY_7lbMEFOledbZ4so_l7whSotInvh9i6KtrPuxi9GXg=w1003-h1337-no?authuser=0" alt="1"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEXVp72-KO76r24MAv3NcYEBHyVMDgJPUf_iJmGVbN4Yz-8qIKlaZKRAjyacy-iXh_AmOCHTjyqNzI_4WBzSOi7vS3Sx4dQnKjulmzLlVFoB99J9n3-8M5x_VjmJMQs3cB9M693vxc9zXxmPNydl7vQF=w1003-h1337-no?authuser=0" alt="2"></p><h3 id="这就是软件工程师-这就是投资人-这就是保险代理人"><a href="#这就是软件工程师-这就是投资人-这就是保险代理人" class="headerlink" title="[ ] 这就是软件工程师 + 这就是投资人 + 这就是保险代理人"></a>[ ] 这就是软件工程师 + 这就是投资人 + 这就是保险代理人</h3><p>85 出</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEUeqdZTP-ppizLOEyK2bBNT8lQI58fZxLjTqjlEq2XB8Lg8i6Iz60uqyQ6VSWRM8gMZWomgQ3RA9uO2R3kL-DZlRV4LGaxks-43DYe2JkjD8oYvIHLCzn2plOB0j9etxtSuyPJfogCGx2D1zzz02UeZ=w1003-h1337-no?authuser=0" alt="1"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEWT2_uRXr0oMrsjWXKCWIjL2JpM0ZDt43acIqbmarr3Hqa28CNCADWslhUPllApN00AAACxetzsohWgZzPdUBMarfnbGrT-o3O-YxA3mjVGv6x7jWOxlwvZWRv6uPaKJGuAkjec8ZPjgIJpLR3kKG89=w1783-h1337-no?authuser=0" alt="2"></p><h3 id="你不了解的真相"><a href="#你不了解的真相" class="headerlink" title="[ ] 你不了解的真相"></a>[ ] 你不了解的真相</h3><p>18 出</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEWRAf7kNk5DBkAlBLSivsudYnRMYeE7h3veoDZHyX6kGwrP41gQYX-0mVyGvkaQwxaI6T6FBAT6UVtMhiFYKFTsOZzT_xS79UzQ-MzTNGmxd6iIFv3mPr6hRzREZyjAlZLbrZnEn6Pb1B4WpvprRRnS=w1003-h1337-no?authuser=0" alt="1"></p><h3 id="富兰克林自传"><a href="#富兰克林自传" class="headerlink" title="[ ] 富兰克林自传"></a>[ ] 富兰克林自传</h3><p>29 出</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEUqcCxH_wuzzofzUQbaVZ-j4TEUlRJZS5s_IJNBvLF_ZW3Jkb2fxgyQ4jZvN5qKP8jCQQDicTVdkYE08PdJEYWg1S_gpO2YYoIaoVMvkJXxuhMYmloOmKSkpSJ3nKJZzVJNJn6COANLOQweHIXHm-C0=w1003-h1337-no?authuser=0" alt="1"></p><h3 id="颓废与沉默-透视犬儒文化"><a href="#颓废与沉默-透视犬儒文化" class="headerlink" title="[ ] 颓废与沉默 透视犬儒文化"></a>[ ] 颓废与沉默 透视犬儒文化</h3><p>15 出</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEVPqNVaykiHzISeyz9_6Bwz1rZbecMx50qGiPKTxg0XzJeEBbB5DLETXsDXAfJc4Q-WFrKdCGPf3vBOV5AxNMQ4J1aBp3g0ohxqbwIObu10SyPbftcgK2mSeWLcEGDBfZV5xwBT-drkJz0wrizZ5mHE=w1003-h1337-no?authuser=0" alt="1"></p><h3 id="通往尊严的公共生活-4"><a href="#通往尊严的公共生活-4" class="headerlink" title="[ ] 通往尊严的公共生活 * 4"></a>[ ] 通往尊严的公共生活 * 4</h3><p>16 出</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEXZ87dOGHlyFKyrz3_o4PZ2UCrIznKLnnJcBg8NxbFFNvJOe4oGTSpnL35zC8O4sKl-FK-1lQsyWH-Y0mcEciut44DukzSJEtwQjoYOstM_FNF9XAYuTNZFbSv6Yn6NOI_NvdWWBPVWJjdhoQ36uO4l=w1003-h1337-no?authuser=0" alt="1"></p><h3 id="美国众神"><a href="#美国众神" class="headerlink" title="[ ] 美国众神"></a>[ ] 美国众神</h3><p>25 出</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEUyDfmFs6BhCgcwrkrd-nS643imfLOnV1uA4TgGVGra7NSElBBVR5_q9vnwFOoLxeKEk_roPS3cTyNcP5npZoG6zz2NX3SNlDnDCVwWEq7GZeJHNaZk7a45l-x8iud1th9IinwuISN4W09RXgwiLQ7d=w1003-h1337-no?authuser=0" alt="1"></p><h3 id="培根随笔集"><a href="#培根随笔集" class="headerlink" title="[ ] 培根随笔集"></a>[ ] 培根随笔集</h3><p>14 出</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEXoMmnqh4tb1yDOyyHNin_yt7u9mPsf-53gJ5DYbEOMcK_4CX_eh0fpv1Za0wxZMxABhuhCw-b2Vq-UknA_Sht1TuJIKE3FY2RF4yf5Y_cgPtTJ4V2Eey_KHbVexg06BZK6EhLQU_Bnns4XbXZiKAVA=w1003-h1337-no?authuser=0" alt="1"></p><h3 id="上帝造人有多难"><a href="#上帝造人有多难" class="headerlink" title="[ ] 上帝造人有多难"></a>[ ] 上帝造人有多难</h3><p>12 出</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEV_Mptp8gqi3uzKR98FkY3g-Rh29aTlrwsQZUFhp4qhWr5udb9DZ_I1sSENwtPlOuE9yW4NbwgqiqG40mmyFRW3pxXQceTg1xbqwREczSjJQuYsk-IeogitQft3IZ2CdGfqaqP3gAmDYLKMoaDUBZve=w1003-h1337-no?authuser=0" alt="1"></p><h3 id="致命的自负"><a href="#致命的自负" class="headerlink" title="[ ] 致命的自负"></a>[ ] 致命的自负</h3><p>24 出</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEXtk1_aKf_c54C5fNVqoxy_MY6l5JbgzM9P7ZrraCx0Jdp-nMoXuedbrDozdsNIvBA1Xk6nurqYf-BUNjv32F9pzxHKS4XfJxp32EKzFi-VPTpgt_BWB-FX0sMtd87r6FQNtrjkMp3l93wMw97FIk8J=w1003-h1337-no?authuser=0" alt="1"></p><h3 id="x-柑橘味香气-4"><a href="#x-柑橘味香气-4" class="headerlink" title="[x] 柑橘味香气 4"></a>[x] 柑橘味香气 4</h3><p>10 出</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEX74kPDuQ8dSltEFoJNBXMY9c1_UWErqyH4F94ZAQE-jWM6fC4veLRJSQ_nVxbpUU7HQ1xTUItYQsjvOYhkZhx9fTWl5bpa6bXe_TSbtCnKoNhZsnOGbk3D2OS5dGy18zVmvKYXUBNrUbPxkByNG_ho=w1003-h1337-no?authuser=0" alt="1"></p><h3 id="解忧杂货铺"><a href="#解忧杂货铺" class="headerlink" title="[ ] 解忧杂货铺"></a>[ ] 解忧杂货铺</h3><p>18 出</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEW_cU1ORDL2WuIbc68J8iJjaXQvbFN0-ktueBPKwm8LvbC1Ee-oOIMkQyS6ajApvxlavC_0LQFmvPukQtbxC6UMwLh48jkpRvVOX9a91dav0DfquNq95YR-c9Cqxtpq16yq9n5GGbY03alZv6s3BSLf=w1003-h1337-no?authuser=0" alt="1"></p><h3 id="大学之路"><a href="#大学之路" class="headerlink" title="[ ] 大学之路"></a>[ ] 大学之路</h3><p>35 出</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEX6i0GsPZdedC4tmpwPC_MnZcXAyJbJZKyX0kYe9Hf-aW-9OrHWjHk739aMgGGB8Y_28C4eIM1i6RpS0MgRMTlHULn8aX6BQYKhyPpWYeYCiiemuJOzpc3Z4PMBmQsVO82jhWG0wliDskgGfmRQUhpk=w1003-h1337-no?authuser=0" alt="1"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEU7C9pT99BlZM636gXx-8tqebPQq2WqwJ8qH2ujWLmu5ShQU_tLnyCRmXUgya-_HYFOLMjmSQD0qrdpoczDElRRwNA2cO0Q1u_MHt8z0aXYdFuXlPrs-vhdAsjR3B034Dt0HJeZWMYnYwR03XkccKWw=w1783-h1337-no?authuser=0" alt="2"></p><h3 id="格局-见识"><a href="#格局-见识" class="headerlink" title="[ ] 格局 + 见识"></a>[ ] 格局 + 见识</h3><p>31 出</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEW1KlDCp-ErhWNhEedmEX89ifijKedIpgDdovCMWTXiTnK_bx0LjiSX2kcTBkUO_EP7YNEP1UUMiERu_qr4q6Pd_gWzqlQ1gs6Z2-4xxkTqGs0a15g3jRLjeVtYklvyzmlP7zLX-67iN473Lj4txQW0=w1003-h1337-no?authuser=0" alt="1"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEXS1Y3XcaaeO3Q9T8lo2BIvxcIYBiFW07wRp6jFd4h9NO7QWM6vJQqMidmc0J4CJVPKaBybyfEliO78w4Q78ZEWyrAdnFwAI87gPU8ZZMt5Q2gyHJ7KOdOhtv1-XrcJMkJ7R9xxIxpjkhLQaJ_q5twc=w1003-h1337-no?authuser=0" alt="2"></p><h3 id="我们"><a href="#我们" class="headerlink" title="[ ] 我们"></a>[ ] 我们</h3><p>10 出</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEWJJkoF36hBu37iJ5_AVV0hq8ZQSQg-LdcWyO4v7k27sBH8MTNurCfaNymGhRkTne1ThbhQbA5TbvduzPSDhJI97JLDQHaIaETSAElprczbAF-NxKrG2vrKm44YWDEPo2bZ3h2Uua2LmEWyo4TuJGab=w1003-h1337-no?authuser=0" alt="1"></p><h3 id="野草"><a href="#野草" class="headerlink" title="[ ] 野草"></a>[ ] 野草</h3><p>10 出</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEV3TvOnebbvO-w-Dt8kwHoveb-MfNYxzzwTbzvT_BxMq88CEU2YJl6l1UE-X7QtVfUd6xN9KstijKgea5PrNwxgRlaLTyL3nqMINQyiBC26dKf5QJlo_zP8_ICPY4g5A1MwOEs8u2t6DzTjHe3R7tJu=w1003-h1337-no?authuser=0" alt="1"></p><h3 id="增长的极限"><a href="#增长的极限" class="headerlink" title="[ ] 增长的极限"></a>[ ] 增长的极限</h3><p>18 出</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEX4zCe9DDUbE4emCDhTe9qjrI7nm2G4JESa6EdxME94aq0aekjY-nc-BUFrcmln_Pbp3NOtuB1WBNvWG0u4fRaW-jcIShk2NxzI2I2KjKzxWfuyOUGrdulSck_8BmHnjDH8CRD1OvVIDyyArwNIoOjc=w1003-h1337-no?authuser=0" alt="1"></p><h3 id="今日简史-人类简史-未来简史"><a href="#今日简史-人类简史-未来简史" class="headerlink" title="[ ] 今日简史 + 人类简史 + 未来简史"></a>[ ] 今日简史 + 人类简史 + 未来简史</h3><p>55 出</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEV-FamNg7vMK8Z-3GeUytPVH_tTPZSDOdXOLb0UzTA0d3iEZSHIa8uNr_oKIEC4Ygdg0V6NzTPJr1R-wfnP2rHlslnmwE0IRfI9TDVkMaKvsoGzm2UyYnTHgNeaT_zUsVwQwwWwQFjLWWTi1-HA3UmR=w1003-h1337-no?authuser=0" alt="1"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEWCBKhN7-DtCMmlsrsN_mpQg5F8omGhOuJ8jtU3praWoT6L3fyBMKEWcgOQG4KDZPxi7xnGYjsxXkJR8QBDelE47OHoGWZQQuIKfWLFyNIh57BmJgQPifdcJVolXsNFek3hRwtetKuEm5euwG3vZE78=w1003-h1337-no?authuser=0" alt="2"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEVkIiNApci4onatxnPYG3ejyVPPfzNIHp3lnT-NraNT6-W2tEY6ePgj8QkNUmayTlnScG_ySKUrmNbPiaJnptJrlGnt7IyL8e_um3kmQqDolEfDUgd5G4HO3WFPx57tkqnYd89Doyqm1Svjt0ACzFFd=w1003-h1337-no?authuser=0" alt="3"></p><h3 id="集异璧之大成"><a href="#集异璧之大成" class="headerlink" title="[ ] 集异璧之大成"></a>[ ] 集异璧之大成</h3><p>42 出</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEVj9Yi7oFx9F8U6TiTD25JsalUnKXFKJicrQMS309i_Fn2EsxlwzXYKkrz_Vj-ZtoR1dTBP2tWRy36uI5ve8qZbetyJDGX3IB19_85CIk1SG09Ffd4C58y7CIHHHq_66Y4jkg_4IvfOVqPVFddEuNGR=w1003-h1337-no?authuser=0" alt="1"></p><h3 id="被讨厌的勇气"><a href="#被讨厌的勇气" class="headerlink" title="[ ] 被讨厌的勇气"></a>[ ] 被讨厌的勇气</h3><p>20 出</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEVM4fzPBJwqEN4KV8kYaxJJAN-PHweLIN6Xr5zhwWDvs0QogYy059WpHmJ6DfvjTLEAkVCFwT-el5g20byvy2eeFRR3BDFJniOOr_bh4K9EEemJIe47WWXBQ-5EMrqsubobXgmSD6_OeN1zWU2yMTXv=w1003-h1337-no?authuser=0" alt="1"></p><h3 id="异类"><a href="#异类" class="headerlink" title="[ ] 异类"></a>[ ] 异类</h3><p>30 出</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEWiFFBaIXppXCQicjxYLpvHfEJBAHsZvvOjp41Ty5y-Tynsssszs5D4sdP0YPnII-d0NAOO4Y85AYpRoC-_d_kHfshz6rCvNXi-2g1YEQgD4GWzKtbZAw20OD7ZaWKKiXsRQ9_7sXNTxXWdHDuS_cbQ=w1003-h1337-no?authuser=0" alt="1"></p><h3 id="社会契约论"><a href="#社会契约论" class="headerlink" title="[ ] 社会契约论"></a>[ ] 社会契约论</h3><p>12 出</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEXYETHPN-Z7wGY_nMFgXPsPWImWajgI4TqnlrjAlimmsYow3Uhz_cbEDJK7x0cpWXrQLaAlZ1wHJiUIEHt48H7KGrZL33NHa-Rk62h70Wbalw71X9fDX5dc4utNkSVhkKeahr2ikliEHg21GubsPI87=w1003-h1337-no?authuser=0" alt="1"></p><h3 id="浪潮之巅-4"><a href="#浪潮之巅-4" class="headerlink" title="[ ] 浪潮之巅 4"></a>[ ] 浪潮之巅 4</h3><p>38 出</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEUHE2-3yF_YBHyCHPvbyQ5DuTR2SEvXxIYDao6Q2-6OJ41BmeSDWchjzMLPmTXMM-vcBmpI36bESwVcyalil4UPffKjpTsOzyGkjteSHB_V-lFSB5sW5GiGD63vwHNRyBd60zqoTkti_P6uyaf9iKsL=w1003-h1337-no?authuser=0" alt="1"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEXQwYECOs1OYQlVRhDb4i0h0mfCr5IeEAf-mSohQO7qjxn1ECTBgggmq_ORUwBruE-N3Vseynnsrp3oYFXvkoOGYJwD2oYDAfiXlxNVxan3pUzVSjmVWl2f9Kwv0RKL5jRUU3LZKvquEZITIliNkU32=w1783-h1337-no?authuser=0" alt="2"></p><h3 id="纸张创意"><a href="#纸张创意" class="headerlink" title="[ ] 纸张创意"></a>[ ] 纸张创意</h3><p>30 出</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEWimfKnMZmd47igFZLkZVi5Dh7AW7OhQDg3qfN1f4yoEOTxe5T6ojUGmOJBCS9VAcxMVDxkXKf-I5TWS8bnl3LjHztHPKM_jalbcFlqDVoV9pvOA4VO1jvYkzDnsmhWZ7IqKAYAHJGWWMWOYsi6e4Vb=w1003-h1337-no?authuser=0" alt="1"></p><h3 id="css-揭秘"><a href="#css-揭秘" class="headerlink" title="[ ] css 揭秘"></a>[ ] css 揭秘</h3><p>39 出</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEXj43IjpSJMQU_Kkb1xPMY2RbGQnmEdSNklXaX5nqlt0ssa_tIxZyqAfcKpgLS2PNo2kEtEP-jmItwYgIxwCPRVHVbuFqB1Wy0o7Kx8Sg3SunFZBpxZNqnFLS2T30iJDKq8WghhfLtMJzo2znhBg4pr=w1003-h1337-no?authuser=0" alt="1"></p><h3 id="head-first-html-x2F-css"><a href="#head-first-html-x2F-css" class="headerlink" title="[ ] head first html/css"></a>[ ] head first html/css</h3><p>30 出</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEWAcov-GyaudQZQCBELyIb40Ka0ShpJoTgZS7opP06d-A9kTVMEGX1Mrlx8K24bSXhs9rZl6MVkD4_UiWJlJivbwFW3_KSraqoBeqMNU3n_G6psSYPMLewvw4IEsuCScCA4eisdmCpO_zXxyPeaJO3r=w1003-h1337-no?authuser=0" alt="1"></p><h3 id="黑客与画家"><a href="#黑客与画家" class="headerlink" title="[ ] 黑客与画家"></a>[ ] 黑客与画家</h3><p>20 出</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEWIPAPzIlaGJx4vq2VZtQc8u4humwPKJWwKqFwn2-FFTvd9aRaLGKfEmMKQGE3LZ8WIrANwCe3camJ2cCcaO5Nijj8KNzjouCf7kqebxfOxekbE7ppNot6cYTXSbwlDQpqq7mqqIhzUxrfv99_OjKl_=w1003-h1337-no?authuser=0" alt="1"></p><h3 id="浪潮之巅-3"><a href="#浪潮之巅-3" class="headerlink" title="[ ] 浪潮之巅 3"></a>[ ] 浪潮之巅 3</h3><p>25 出</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEWR0TiIsej6a8XDWPqDXP_w1gaJAqjTU-gNDaOl_uvaxeN8S8ZE4t1fWbemcVWlVL74WGtaGIbQnAnAhS-I58L9-Cm2zkyHc93HWUpA7eLjsY2S4Z6aHvjthjOBUU_MyXGoMuITAnn9RL6uvYbv57XQ=w1003-h1337-no?authuser=0" alt="1"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEWmpOr6lP4CTfLPPZmLFAnhSpoIpb5IBBwxJSqCo1UJwv4wcuufc1sLdE6gqM-KR7IhYfRCnLpxp-ONCGBv24sdzgpByCWQcnf7epufSYHeFCpkR4WlcH0CnxZxMVwpnsShZN-pDNi-ZxTiJk3jbwvi=w1783-h1337-no?authuser=0" alt="2"></p><h3 id="女士品茶"><a href="#女士品茶" class="headerlink" title="[ ] 女士品茶"></a>[ ] 女士品茶</h3><p>22 出</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEVdjivJdxoNEdPC-fhaMeQnnzV-JHfUVHTNc7hWL4zm5to8XDe4cW0jnz72vN5axFDDQUidF6_r1y1lWoCRAo8x6haA_gah1rCzKx5L0rQ3_xt5mX3157ISuSDUWpU7vPt3vZXLKQAWgL9ADlmjSK1n=w1003-h1337-no?authuser=0" alt="1"></p><h3 id="宇宙-从起源到未来"><a href="#宇宙-从起源到未来" class="headerlink" title="[ ] 宇宙 从起源到未来"></a>[ ] 宇宙 从起源到未来</h3><p>33 出</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEXYTjN0vLGBQaPBoULJmTfHtQBo1eX82l8-NtRGXJJiL5bUWF8EdSH3sPWIL983S6qZDffrs2afe6zgDrtf9LCmpVSLuBPC0wYG3xUIRiA1jyS8y-3rh2OpY0IQzVjRwfFOq3XCLXS4q8zItR5xZCet=w1003-h1337-no?authuser=0" alt="1"></p><h3 id="交互设计"><a href="#交互设计" class="headerlink" title="[ ] 交互设计"></a>[ ] 交互设计</h3><p>43 出</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEViADICx3hRo1HXSv-PgnM_H6EPkUl9o0oDkYm3zQlQOuelTgF6KAFXlnuBlkAe6--PwRJ78UdPscUG-air99ndMmxSmX7Y2t6jIiZDz_Ys6tijYCyY_qAQ2TdrSFVHoVFsnj_8yGhfoyPg50gjV_xQ=w1003-h1337-no?authuser=0" alt="1"></p><h3 id="人月神话"><a href="#人月神话" class="headerlink" title="[ ] 人月神话"></a>[ ] 人月神话</h3><p>37 出</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEU9yBvoFz-ixzDIsWiQeeP48z4Pda85TNm_3gaudJ_4IOd6yx7NuNdNfpTfzi7CIb7z0xYhyUmqldxu--eQXyeikA6qvFQi1nxmiQz3IpFSERcbYsrrRVtCcpQQEyGV9_zCxrP8rKZRpHiC3Ktod7Xt=w1003-h1337-no?authuser=0" alt="1"></p><h3 id="JavaScript-设计模式"><a href="#JavaScript-设计模式" class="headerlink" title="[ ] JavaScript 设计模式"></a>[ ] JavaScript 设计模式</h3><p>27 出</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEViYS2uZUyAHszGSjz4xzLXKvH102RFWlvQfJKkpTSD4Zk3w0YDg0YDLdLODqiSX4YPCF-8rA8T_iOabegCsnFfFpl5PxsQrRSOatHlEJAc1tSmtOcQRLIyNbvUHBOVgYhIglh17IcbcUftuwuynLmY=w1003-h1337-no?authuser=0" alt="1"></p><h3 id="天才在左-疯子在右"><a href="#天才在左-疯子在右" class="headerlink" title="[ ] 天才在左 疯子在右"></a>[ ] 天才在左 疯子在右</h3><p>21 出</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEVI2my44vGE3IqZEZnrmmAlk0J8Gjia1omySB6ZH13oN1EfastUx7BBa0z-QTHZ0XTcFj6p4wtXBylyQqV5mn8N48ut6WK3yCTV0QTP12tLxYPNT_H6NktqionspqfNlkSPhk6ei-E6jZaouHfbNIqS=w1003-h1337-no?authuser=0" alt="1"></p><h3 id="地铁"><a href="#地铁" class="headerlink" title="[ ] 地铁"></a>[ ] 地铁</h3><p>22 出</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEULXeMLS1HZ2iOxxe0v_KUv5qIGTTQt8mNBv8dTKMr4MHWAa18DFz2Rkf1gd1xgC0DEw3N-9-XnHbvpm3ZThjc41i_KG-S78GqTdvxatL5IMLT7WKAGaA9_arM7iRn3UVWhQH4b-iIje_y60Bhz2MFm=w1003-h1337-no?authuser=0" alt="1"></p>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    <category term="其他" scheme="https://blog.rxliuli.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    <category term="生活" scheme="https://blog.rxliuli.com/categories/%E5%85%B6%E4%BB%96/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="个人" scheme="https://blog.rxliuli.com/tags/%E4%B8%AA%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>月报 2022-11</title>
    <link href="https://blog.rxliuli.com/p/450bf8bbe0d447e599c0bb96d2a2b439/"/>
    <id>https://blog.rxliuli.com/p/450bf8bbe0d447e599c0bb96d2a2b439/</id>
    <published>2022-12-01T12:28:32.448Z</published>
    <updated>2022-12-02T05:13:26.671Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>嗯，周报很久很久没写了，所以写个月报，虽然也没有太多有趣的事情发生就是了。</p></blockquote><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p>这个月有点懈怠，连续两个周末都在看同人小说，主要是突然对反应类型的小说感兴趣了：即作品中的人物观看或了解作品本身的反应。不过这个在最后再说，还是先说一下在技术相关的事情。</p><p>joplin-vscode-plugin 发布 1.1.0，支持了在指定笔记目录中搜索的菜单项。idea 参考: <a href="https://discourse.joplinapp.org/t/12854">https://discourse.joplinapp.org/t/12854</a></p><p><img src="/resources/5c75dbca68964c418b1871ec6846446a.gif" alt="632c45944e90a2d37a00211f0da7b86091a51459.gif"></p><p>另外，这个月插件安装数量破 10k 了，真是值得庆祝，也是吾辈被安装最多的 vscode 扩展。</p><p><img src="/resources/d87e29b824244374a56ed85a113040a7.png" alt="1669957684996.png"></p><p>mami 主要是添加 joplin&lt;=&gt;obsidian 相互转换的支持，也增加了对 docsify 的支持 <a href="https://www.npmjs.com/package/@mami/plugin-docsify">@mami/plugin-docsify</a>，现在可以将 joplin/obsidian 的笔记输出为 wiki 了。</p><p><img src="/resources/e24f12ebdd9648678f739dacb5774bdf.png" alt="1669956740972.png"></p><p>尝试了 file system api 与 pwa，并创建了一个 demo <a href="https://image-viewer.rxliuli.com/">image-viewer</a></p><p><img src="https://github.com/rxliuli/image-viewer/raw/master/docs/demo.gif" alt="最终效果"></p><p>尝试自行制作了 ts playground，老实说支持类型提示很麻烦，因为必须将所有类型定义的代码添加到 monaco-editor 中。</p><p><img src="/resources/9d65c31166db43d5a7faba19a753a880.png" alt="1669956914407.png"></p><h2 id="同人小说"><a href="#同人小说" class="headerlink" title="同人小说"></a>同人小说</h2><p>好吧，最近看的数量之多足以单开一节了。很神奇的，突然就开始看了，而且没停下来，只能说和国内的网文一样非常消耗时间。话虽如此，同人小说确实很好看，因为它描绘了不同的假设下原作中的人物会如何行动的事情，通常这也用来弥补一些原作的遗憾。<br>典型的就是：《魔法少女小圆》中小焰很喜欢小圆，这似乎超越了友情，以至于在《叛乱》中因此将圆神拉下了天堂，那么，为什么之前没有采取更激烈的方式保护小圆呢？比如把她绑架到见泷原之外的其他城市。好吧，于是就有同人小说做出了这个假设，并描绘了新的故事。好吧，如果你愿意，可以自己去看，吾辈才不会在这里剧透！</p><ul><li>魔法少女小圆<ul><li><a href="https://archiveofourown.org/works/31263467/">Knowledge is Power</a>: 另一个魔法少女小圆与死神交叉同人小说的反应小说</li><li><a href="https://www.fanfiction.net/s/13942972/">FavMagia: A New Hope</a>: 一位小圆/魔法记录的粉丝突然在魔法少女的世界中醒来，成为一个配角。特色阿什利泰勒。注意：如果不是很明显，你应该预料到特许经营中几乎所有内容都会在这里出现大量剧透。</li><li><a href="https://archiveofourown.org/works/577310/">Persephone’s Waltz</a>: 她救小圆失败的次数越多，小焰就越绝望……直到绑架她并将她锁在地下室，直到 Walpurgisnacht 结束，这听起来不像是一个疯狂的想法。</li><li><a href="https://www.fanfiction.net/s/11339239/">Perfect Crime</a>: 为了保护小圆不死，小焰绑架并监禁了小圆</li><li><a href="https://www.fanfiction.net/s/13409084/">FavDiversis Mundi Magia Actum</a>: 一个人变成女孩并且来到了魔法少女小圆的世界</li><li><a href="https://www.fanfiction.net/s/11551156/">FavA Wish Within Darkness</a>: 小圆许下了让她们拥有更好的未来的愿望，这足以扭曲现有的规则。</li><li><a href="https://archiveofourown.org/works/32241079/">Heartstrings</a>: 小圆从记事起就能看到琴弦，它们一直都在那里，她的父母只是认为她的想象力很丰富，但她始终知道不止于此。在她的灵魂深处。</li></ul></li><li>刀剑神域<ul><li><a href="https://www.fanfiction.net/s/13114758/">FavSword Art Online: Invitation to the show</a>: 桐人和朋友们正打算去看神崎艾尔莎的演唱会，直到一个神秘的蒙面人出现在屏幕上，带来了惊天动地的通告。同一天，凯伦和她的朋友们正在现场观看艾莎的演唱会。他的宣布将动摇 SAO 世界的基础。“欢迎大家的到来！”</li><li><a href="https://archiveofourown.org/works/4097260/">Discovering Aincraid</a>: 桐人和其他角色被神秘的“朋友”拉入了黑暗的深渊。他们必须一起观看他在刀剑神域中的旅程。不幸的是，他们必须和当初困住他们的男人一起观看。</li><li><a href="https://archiveofourown.org/works/22026883/">Orange</a>: 在死亡游戏的第一天，情况有所不同。在茅场宣布之前，桐人已经 PK 了另外一个玩家。将他的光标永久更改为橙色的动作。现在他是个罪犯。其他玩家会为此追捕他。NPC 将拒绝为他服务。他将无法再与任何人交易。他现在完全是一个人了。</li></ul></li><li>暗杀教室<ul><li><a href="https://archiveofourown.org/works/24225712/">School watches Assassination Classroom</a>: Ritsu 穿越到过去 20 年试图消除天启，但由于不可预见的错误，Kunugigaoka 初中三年级的整个三年级都被带走了，现在被困在时间泡泡中三年天… 事情不是一个好的开始。</li></ul></li><li>火影忍者<ul><li><a href="https://www.fanfiction.net/s/10474631/">FavThe Girl Who Spun Through Time</a>: 日向雏田穿越时空的故事</li></ul></li><li>魔法禁书目录<ul><li><a href="https://www.fanfiction.net/s/13538042/">Misfortune No One Sees, Until Now</a>: 你们所有人都以某种方式与那个男孩有联系，所以我提供了一个机会。我会向你们展示他的记忆，以及潜伏在其中的绝望和艰辛。所以，如果你认为你能处理那个微笑背后的黑暗 —— 那么无论如何，我欢迎你……！为了无人能及的不幸…… 直到现在……！” - 舞台已经搭好了。让地狱开始……</li><li><a href="https://www.fanfiction.net/s/13776469/">FavLibrary of Consumed gods</a>: 茵蒂克丝一直是一个单纯的女孩，一个生活中不需要太多东西的女孩。与当麻和奥帝努斯一起在宿舍里过着平凡的生活，她已经很满足了。所以当神话妖精降临，悲剧发生时，她不知道自己愿意为保护它付出多大的努力。</li><li><a href="https://www.fanfiction.net/s/8918264/">A Certain Unknown Level 0</a>: 一方通行和超电磁炮。两个受到同样传闻的 5 级：他们被一个 0 级打败了。但是这个神秘的能力者是谁？这是魔禁宇宙中的人物对这个 Level 0 所做的无数调查，不了解他的人会知道真相，了解他的人会瞥见他的生活。会有行动。</li><li><a href="https://www.fanfiction.net/s/12696204/">FavA Certain Strange Addition</a>: 如果当麻在引力子爆炸事件中的行为被美琴的其他朋友发现会怎样。倒霉的上条在本质上被拖入风纪委员的情况下，还能卷入多少不幸和疯狂？</li><li><a href="https://archiveofourown.org/works/25020067/">Sometimes Even Touma Can’t Save The Smiles…</a>: 当白井黑子濒临死亡当麻放弃世界时会发生什么？</li></ul></li><li>我的青春恋爱物语<ul><li><a href="https://www.fanfiction.net/s/13897216/">FavWatching My Youth Romantic Comedy Is Terrible, As Expected</a>: 八幡在他的房间里发现了一盒 DVD，还有一些说明。但他拒绝跟随他们！无聊的上帝决定必须观看 DVD，无论如何！几天后，所有人都被拖进了一个剧场。屏幕上播放着一档节目，名字叫…… 我的青春爱情喜剧，果然如我所料，搞错了？这到底是什么？</li></ul></li><li>从零开始的异世界生活<ul><li><a href="https://archiveofourown.org/works/27548665/">Re:Zero Watching Him Die Again and Again</a>: 角色将在其中观看斯巴鲁在他们的世界中的冒险</li><li><a href="https://archiveofourown.org/works/35089096/">The Otherworldly Sage</a>: 在击败斯洛特的任务中被所有三名候选人拒绝后，斯巴鲁偷走了一条地龙并逃跑，放弃了。然而，当他到达 Flugel’s Tree 时，他遇到了一个盒子，里面有一根手杖、旅行衣服、五件力量神器，以及一封来自一个早已被遗忘的时代的五个神秘朋友写给他的信。他能拯救所有人吗？</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    <category term="个人" scheme="https://blog.rxliuli.com/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    <category term="周报" scheme="https://blog.rxliuli.com/categories/%E4%B8%AA%E4%BA%BA/%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="个人" scheme="https://blog.rxliuli.com/tags/%E4%B8%AA%E4%BA%BA/"/>
    
    <category term="读书" scheme="https://blog.rxliuli.com/tags/%E8%AF%BB%E4%B9%A6/"/>
    
    <category term="周报" scheme="https://blog.rxliuli.com/tags/%E5%91%A8%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>读书清单</title>
    <link href="https://blog.rxliuli.com/p/bfdfebadf5fe473bb59be6665f98603b/"/>
    <id>https://blog.rxliuli.com/p/bfdfebadf5fe473bb59be6665f98603b/</id>
    <published>2022-12-01T12:06:26.747Z</published>
    <updated>2022-12-02T05:14:36.544Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正作"><a href="#正作" class="headerlink" title="正作"></a>正作</h2><table><thead><tr><th>已读</th><th>名字</th></tr></thead><tbody><tr><td>x</td><td>程序员修炼之道</td></tr><tr><td>x</td><td>码农翻身：用故事给技术加点料</td></tr><tr><td>x</td><td>失乐园</td></tr><tr><td></td><td>圣经</td></tr><tr><td></td><td>一千零一夜</td></tr><tr><td>x</td><td>北欧神话</td></tr><tr><td></td><td>被嫌弃的松子的一生</td></tr><tr><td>x</td><td>穿越平行宇宙</td></tr><tr><td></td><td>纯粹理性批判-康德</td></tr><tr><td>x</td><td>单身社会</td></tr><tr><td>x</td><td>低智商社会-如何从智商衰退中跳脱出来</td></tr><tr><td>x</td><td>动物庄园</td></tr><tr><td></td><td>二十年目睹之怪现状</td></tr><tr><td>x</td><td>福泽谕吉劝学</td></tr><tr><td>未看完</td><td>格林童话全集</td></tr><tr><td></td><td>古今数学思想</td></tr><tr><td></td><td>谎言帝国-中国鸡年纪行</td></tr><tr><td>x</td><td>寂静的春天</td></tr><tr><td>x</td><td>寂静之城</td></tr><tr><td>x</td><td>橘子少女</td></tr><tr><td></td><td>绝对笑喷之弃业医生日志</td></tr><tr><td>x</td><td>了不起的盖茨比</td></tr><tr><td></td><td>利维坦-论国家</td></tr><tr><td></td><td>亮剑</td></tr><tr><td>未看完</td><td>刘慈欣作品集</td></tr><tr><td>x</td><td>罗密欧与朱丽叶</td></tr><tr><td>x</td><td>玛雅</td></tr><tr><td></td><td>美国反对美国</td></tr><tr><td></td><td>魔鬼物理学</td></tr><tr><td>x</td><td>贫穷的本质-我们为什么摆脱不了贫穷</td></tr><tr><td></td><td>人工智能</td></tr><tr><td>x</td><td>人间失格</td></tr><tr><td></td><td>三国演义</td></tr><tr><td>x</td><td>苏菲的世界</td></tr><tr><td></td><td>天地翻覆-中国文化大革命史</td></tr><tr><td>x</td><td>童年的消逝</td></tr><tr><td>x</td><td>万物发明指南</td></tr><tr><td></td><td>银河铁道之夜</td></tr><tr><td>x</td><td>银河系漫游指南</td></tr><tr><td></td><td>月亮与六便士</td></tr><tr><td>未看完</td><td>知行合一王阳明</td></tr><tr><td>x</td><td>纸牌的秘密</td></tr><tr><td></td><td>追忆似水年华</td></tr><tr><td></td><td>资本论</td></tr><tr><td></td><td>自然生活的数学原理</td></tr><tr><td>x</td><td>自私的基因</td></tr><tr><td></td><td>我们从未现代过-对称性人类学论</td></tr><tr><td></td><td>刀锋</td></tr><tr><td></td><td>这就是投资人</td></tr><tr><td></td><td>这就是保险代理人</td></tr><tr><td></td><td>数学女孩</td></tr><tr><td>x</td><td>网络是怎么连接的</td></tr><tr><td>x</td><td>论人类不平等的起源</td></tr><tr><td></td><td>TCP 详解（1）</td></tr><tr><td></td><td>TCP 详解（2）</td></tr><tr><td></td><td>TCP 详解（3）</td></tr><tr><td>x</td><td>规模</td></tr><tr><td></td><td>爆裂</td></tr><tr><td></td><td>原则</td></tr><tr><td></td><td>金字塔原理</td></tr><tr><td></td><td>上帝造人有多难</td></tr><tr><td>x</td><td>大学之路</td></tr><tr><td></td><td>女士品茶</td></tr><tr><td></td><td>增长的极限</td></tr><tr><td>x</td><td>被讨厌的勇气</td></tr><tr><td>x</td><td>来自新世界</td></tr><tr><td></td><td>异类</td></tr><tr><td>x</td><td>宇宙-从起源到未来</td></tr><tr><td></td><td>修改代码的艺术</td></tr><tr><td>x</td><td>解忧杂货铺</td></tr><tr><td>x</td><td>朝花夕拾</td></tr><tr><td></td><td>地铁</td></tr><tr><td>x</td><td>神雕侠侣</td></tr><tr><td>x</td><td>家有女友</td></tr><tr><td>x</td><td>SICP 计算机程序的构造和解释</td></tr><tr><td>x</td><td>颓废与沉默-透视犬儒文化</td></tr><tr><td>x</td><td>人以什么理由来记忆</td></tr><tr><td>x</td><td>富兰克林自传</td></tr><tr><td>x</td><td>野草</td></tr><tr><td></td><td>数学之美</td></tr><tr><td>x</td><td>格局</td></tr><tr><td>x</td><td>见识</td></tr><tr><td>x</td><td>态度</td></tr><tr><td>x</td><td>浪潮之巅</td></tr><tr><td>x</td><td>美国众神</td></tr><tr><td>x</td><td>你不了解的真相</td></tr><tr><td>x</td><td>这就是软件工程师</td></tr><tr><td></td><td>信息论</td></tr><tr><td></td><td>集异壁之大成</td></tr><tr><td>x</td><td>JavaScript 设计模式</td></tr><tr><td>x</td><td>人月神话</td></tr><tr><td></td><td>算法导论</td></tr><tr><td>x</td><td>人类简史</td></tr><tr><td></td><td>什么是数学</td></tr><tr><td>x</td><td>拉普拉斯妖的魔女</td></tr><tr><td>x</td><td>黑客与画家</td></tr></tbody></table><h2 id="轻小说"><a href="#轻小说" class="headerlink" title="轻小说"></a>轻小说</h2><table><thead><tr><th>已读</th><th>名字</th></tr></thead><tbody><tr><td>x</td><td>关于我转生后成为史莱姆的那件事</td></tr><tr><td></td><td>回复术士的重启人生</td></tr><tr><td></td><td>魔法禁书目录</td></tr><tr><td>x</td><td>魔法少女小圆 飞向星空</td></tr><tr><td></td><td>魔女之旅</td></tr><tr><td>x</td><td>魔王勇者</td></tr><tr><td>x</td><td>女高中生小春在异世界成为娼妓</td></tr><tr><td>x</td><td>骑士与魔法</td></tr><tr><td></td><td>文学少女</td></tr><tr><td>x</td><td>问题儿童都来自异世界</td></tr><tr><td>x</td><td>我不是说了能力要平均值么</td></tr><tr><td>x</td><td>无职转生</td></tr><tr><td></td><td>仰望半月的夜空</td></tr><tr><td></td><td>要听爸爸的话</td></tr><tr><td>x</td><td>游戏人生</td></tr><tr><td>x</td><td>转生成蜘蛛又怎样</td></tr><tr><td>x</td><td>OVERLORD 不死者之王</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    <category term="其他" scheme="https://blog.rxliuli.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    <category term="读书" scheme="https://blog.rxliuli.com/categories/%E5%85%B6%E4%BB%96/%E8%AF%BB%E4%B9%A6/"/>
    
    
    <category term="读书" scheme="https://blog.rxliuli.com/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>2022 年终总结及 2023 的计划</title>
    <link href="https://blog.rxliuli.com/p/48334b653bc9470aae86d06519a907ec/"/>
    <id>https://blog.rxliuli.com/p/48334b653bc9470aae86d06519a907ec/</id>
    <published>2022-11-29T03:20:50.820Z</published>
    <updated>2022-12-17T17:33:14.134Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="/p/971404f2f72c429083a614f8ee522237">2021 年终总结及 2022 的计划</a></p></blockquote><h2 id="年终总结"><a href="#年终总结" class="headerlink" title="年终总结"></a>年终总结</h2><p>具体来讲</p><ul><li>补足和实践理论层面的知识 – 看完了 sicp 课程</li><li>继续维护和改进 liuli-tools/liuli-utils – 继续维护中</li><li>继续维护 joplin-utils 系列的笔记相关工具 – joplin-vscode-plugin 发布 1.0，从 joplin-blog 衍生出 mami</li><li>提高发布博客的质量，而不是简单的笔记映射 – 目前仍然从笔记映射，这是正确的方法。</li><li>参与一些知名的开源项目并提 PR，而非仅仅做自己的东西 – 今年提了 15 个 pr，合并了 14 个</li></ul><p>生活上希望更加自律和保持精神，希望下面几件事情都有一些进展</p><ul><li>保持作息规律，日常水果和牛奶补充营养 – 日常水果和牛奶已经完全做到了，作息规律仍然时好时坏</li><li>开始一些简单的锻炼，例如跑步 – 由节奏光剑 vr 替代</li><li>尝试更多工作之外基于现实的社交活动 – 无</li><li>kigurumi 出一些室外日常照片 – 无</li></ul><p>开的一些新坑</p><ul><li><a href="https://mami.rxliuli.com/">mami</a>: 基于 markdown 的跨工具转换器，支持 joplin/obsidian/hexo/hugo/docsify</li><li><a href="https://marketplace.visualstudio.com/items?itemName=rxliuli.tsx">tsx-vscode</a>: 在 vscode 中集成 tsx 运行任意 ts/js 文件，用于替代付费的 quokka</li><li><a href="https://marketplace.visualstudio.com/items?itemName=rxliuli.new-project">new-project</a>: 创建项目的可视化引导面板，复刻 jetbrains ide 的相同功能</li><li><a href="https://github.com/rxliuli/mdbook">mdbook</a>: 从 markdown 生成 epub 的工具，主要处理中文 markdown 的一些问题</li><li><a href="https://tts.liuli.moe/">to-the-stars</a>: 魔法少女小圆 飞向星空同人小说维护，负责生成 epub 和在线网站</li><li><a href="https://magia.rxliuli.com/">magia</a>: 一个可爱的关于魔法少女网站的重写，主要尝试了 css 动画</li><li><a href="https://rxliuli.github.io/hanoi/">hanoi</a>: 汉诺塔游戏，在学习 sicp 时创建的</li><li><a href="https://github.com/rxliuli/saki">saki</a>: 尝试实用 golang 重写 cli 以提高性能的实验</li><li><a href="http://rxliuli.com/">rxliuli</a>: 个人主页，重写了 v2 版本</li></ul><p>技术方面踩的新坑有</p><ul><li>mdast: 大量使用的 markdown 解析器，灵活且强大</li><li>esm only: 好吧，一开始吾辈对它并不满意，但自 nodejs 16 以来已然大势所趋了</li><li>tsup: 使用它替代了 liuli-cli，它是开箱即用的 lib 构建工具</li><li>changeset: monorepo npm 发布工具，与 pnpm 结合使用体验不错</li><li>recast: ast 操作工具，用于代码生成或批量代码重构</li><li>preact: 实用 preact，目前几乎总是推荐使用它而非 react，尤其是在不需要 react ui 库的情况下</li><li>nx.js: monorepo 工具，尝试并决定放弃，使用起来过于复杂，无法开箱即用</li><li>turbo: monorepo 工具，正在尝试，在许多情况下看起来也不一定需要</li></ul><p>blog 方面一共发布了 35 篇，其中也包括了一些非技术性的内容。</p><p>github 贡献图，好吧好吧，今年确实少了很多，奇怪的倦怠期？<br><img src="/resources/f93da9fc420942c3b092b65ae6579752.png" alt="1669860164904.png"></p><p>另外值得一提是维护了《魔法少女小圆 飞向星空》同人小说中文翻译开源项目，吾辈真的很喜欢这部小说，是吾辈看到的第三部以科幻的方法写动画同人小说，任何喜欢《魔法少女小圆》的人都可以看看，吾辈愿意称之为最好的《魔法少女小圆》同人小说，在线地址：<a href="https://tts.liuli.moe/">https://tts.liuli.moe/</a><br><img src="https://github.com/liuli-moe/to-the-stars/raw/master/books/01/assets/cover.png" alt="cover"></p><h2 id="工作方面"><a href="#工作方面" class="headerlink" title="工作方面"></a>工作方面</h2><p>年初的计划完成情况</p><ul><li>希望明年遇到更有趣的人，做一些更有趣的事 – 前者我认为有一个，后者参考通用部分</li><li>希望明年整个公司技术团队的效率变高，而非现在如此<strong>低效</strong>，尤其是跨团队合作 – 老实说没有本质变化，只是更熟悉 som 相关的接口而已。前后端对接自动化方面还是尚需解决</li><li>做的事情在实际场景中使用，而不仅仅是<strong>玩具</strong> – 在 3 个场景交付，但 uv 仅有 200+ 而已</li><li>希望明年能够依赖于文档或 FAQ 解决问题，而非依赖于人力 – 文档确实增加了许多，api 聚合和 demo/playground 可能会有一些帮助</li><li>更好在团队中推广技术 – 仅分享了一些 blog 上的内容</li><li>让技术探索走在更远的地方 – 参考通用部分</li><li>尝试系统化，而不仅仅是依赖于经验 – 学习了 sicp，实现过 <code>stream</code>/<code>lisp parser/evaler</code></li></ul><h2 id="来年的计划"><a href="#来年的计划" class="headerlink" title="来年的计划"></a>来年的计划</h2><ul><li>日语学习，这是从今年北京疫情之后下半年开始的一个想法，它的中长期优先级是最高的 – 指明年上半年</li><li>解决前后端接口通信与协作的问题，这是一个常见但仍未解决的问题，包括 grpc/graphql/fass 的接口，提供 online/vscode plugin/codegen</li><li>尝试在应用层面使用 ai 相关的技术 – 不过这个吾辈还不确定，似乎 GPT-3 之类的高级 AI 必须要大型计算中心才能训练，个人似乎无法折腾 ai 了？或者可以使用 api 之类的直接开发业务层应用，不过尚未确定范围</li><li><code>@mami/*</code> 系列支持更多框架和类型，实现 gui 客户端支持普通用户使用</li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>从 2018 年开始，已经工作了快 5 年了，虽然经历过几份工作，在业余时间也多有折腾，但技能层次上还是没有得到质的提升。上次遇到瓶颈的时候吾辈从后端转向了前端，但这次卡住又当如何呢？</p>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    <category term="个人" scheme="https://blog.rxliuli.com/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    <category term="年终总结" scheme="https://blog.rxliuli.com/categories/%E4%B8%AA%E4%BA%BA/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="个人" scheme="https://blog.rxliuli.com/tags/%E4%B8%AA%E4%BA%BA/"/>
    
    <category term="开源" scheme="https://blog.rxliuli.com/tags/%E5%BC%80%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>windows 10 -- 广告系统</title>
    <link href="https://blog.rxliuli.com/p/b7bf3d9e766e4829b32d915008e736c7/"/>
    <id>https://blog.rxliuli.com/p/b7bf3d9e766e4829b32d915008e736c7/</id>
    <published>2022-11-25T13:36:23.048Z</published>
    <updated>2022-11-25T13:57:04.268Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>正版受害者 +1，卖 2k+ 软妹币的生产系统居然到处都是广告，而且还很难关闭，和国内的这些恶心软件公司学坏了。</p></blockquote><p>好吧，刚刚在使用 Windows 搜索某个应用时出现了广告，之前可能还没留意，但这次看到真的瞬间爆炸，浓浓的国产狗皮膏药式的广告，没什么用还占了好大一片地方，微软这是直接在操作系统级别打广告了。</p><p><img src="/resources/aaefd6438fcd48d68f62fc2478f1f857.png" alt="1669384280333.png"></p><p>在尝试在系统设置中寻找未果后，使用 Google 搜索了一下，在这篇 <a href="https://www.baiyunxitong.com/bangzhu/7714.html">Win10 搜索框中热门搜索怎么关闭</a> 网页中找到了答案，发现居然要使用注册表才能关闭这个广告。好家伙，真的好家伙，这已经完全可以称得上是居心不良了！下一个 miui 就是你么？</p><p>直接使用以下命令修改注册表然后重启即可</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">reg add HKCU\Software\Policies\Microsoft\Windows\explorer /v DisableSearchBoxSuggestions /t reg_dword /d 1 /f<br></code></pre></td></tr></tbody></table></figure><p>去除广告后的效果，但这也只是一个点，之前的点击通知栏会出现奇怪的资讯信息也是，也不过是 Windows 继续变烂的一部分就是了。</p><p><img src="/resources/1666773381144003aaddb19f2529e67b.png" alt="1669383400633.png"></p><p>结语</p><p>Windows 整天不干别的折腾这种歪门邪道起来了，也不看看隔壁 m1 有多香，太烦人了，或许什么时候换个 m2？</p>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    <category term="其他" scheme="https://blog.rxliuli.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    <category term="Windows" scheme="https://blog.rxliuli.com/categories/%E5%85%B6%E4%BB%96/Windows/"/>
    
    
    <category term="windows" scheme="https://blog.rxliuli.com/tags/windows/"/>
    
    <category term="杂谈" scheme="https://blog.rxliuli.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>web 文件系统探索</title>
    <link href="https://blog.rxliuli.com/p/b0cb4560702945069f8c885bc5244ef8/"/>
    <id>https://blog.rxliuli.com/p/b0cb4560702945069f8c885bc5244ef8/</id>
    <published>2022-11-25T13:11:15.276Z</published>
    <updated>2022-11-25T15:13:34.833Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>浏览器到了今天已经非常强大了，足以称之为操作系统。很多人（包括吾辈）可能对网页的印象仍然停留在网站，一些非富交互式的的应用，只是用来展示和操作后端数据，但复杂程度不高。而在最近，吾辈发现了 <a href="https://web.dev/file-system-access/">file system access api</a>，它是 chrome 推出的一组可以操作本地文件的 api，这也是第一次可以直接将文件写入到本地而不需要使用 indexeddb 之类的模拟的方法。虽然尚不完善，但已经足以让 sqlite 这种项目开始考虑支持在 web 上基于文件系统实现支持了，参考：<a href="https://sqlite.org/wasm/doc/ckout/index.md">https://sqlite.org/wasm/doc/ckout/index.md</a>。</p><p>那么，就算有了文件系统，我们能做什么呢？</p><ul><li>首先，我们有可能不再需要 nodejs，尽管 nodejs 提供了各式各样的 api，但最常用的也只有 fs/fetch 罢了，浏览器的原生支持意味着只需要这两个 api 的应用不需要使用 nodejs 了</li><li>其次，我们之前提到的一些应用不再需要使用 electron 打包，例如图片编辑器、drawio 之类的，都不再需要 electron 客户端了</li><li>最后，某些依赖于文件系统的 lib 可以在 web 上复用，例如上面提到的 sqlite 数据库</li></ul><p>下面将使用文件系统 api 尝试写一个基本的图片查看器，它将做到以下几件事以尽可能贴近原生应用的行为</p><ol><li>安装之后可以离线访问</li><li>支持从资源管理器打开图片</li><li>支持拖拽图片</li><li>窗口尺寸记忆支持</li></ol><p><img src="https://github.com/rxliuli/image-viewer/raw/master/docs/demo.gif" alt="最终效果"></p><p>以下会涉及到各种常见 web 开发中不那么常见的东西，仅做提及不做深入，相关资料建议参考 <a href="https://web.dev/">https://web.dev/</a></p><ul><li>service worker: web 离线支持</li><li>manifest.json: web 应用元数据</li><li>file system access api: 文件系统</li><li>preact: react 的一个更小的实现</li></ul><h2 id="拖拽图片显示"><a href="#拖拽图片显示" class="headerlink" title="拖拽图片显示"></a>拖拽图片显示</h2><p>首先，我们实现一个可以拖拽图片到网页并显示的 web 应用，好吧，这实际上没什么难的。这里的关键是通过 event 获取到 File 对象，然后就可以创建 blob url 渲染图片了。</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> css <span class="hljs-keyword">from</span> <span class="hljs-string">'./App.module.css'</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">'file-system-access'</span><br><span class="hljs-keyword">import</span> { useEffect, useState } <span class="hljs-keyword">from</span> <span class="hljs-string">'preact/hooks'</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) {<br>  <span class="hljs-keyword">const</span> [url, setUrl] = useState&lt;<span class="hljs-built_in">string</span>&gt;()<br><br>  <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">onDrop</span>(<span class="hljs-params">ev: DragEvent</span>) {<br>    ev.<span class="hljs-title function_">preventDefault</span>()<br>    <span class="hljs-keyword">const</span> items = [...(ev.<span class="hljs-property">dataTransfer</span>?.<span class="hljs-property">items</span> ?? [])].<span class="hljs-title function_">filter</span>(<br>      <span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item.<span class="hljs-property">kind</span> === <span class="hljs-string">'file'</span> &amp;&amp; item.<span class="hljs-property">type</span>.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">'image/'</span>),<br>    )<br>    <span class="hljs-keyword">if</span> (items.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) {<br>      <span class="hljs-title function_">alert</span>(<span class="hljs-string">'找不到图片文件'</span>)<br>      <span class="hljs-keyword">return</span><br>    }<br>    <span class="hljs-keyword">const</span> file = items[<span class="hljs-number">0</span>].<span class="hljs-title function_">getAsFile</span>()<br>    <span class="hljs-keyword">if</span> (!file) {<br>      <span class="hljs-title function_">alert</span>(<span class="hljs-string">'无法读取文件'</span>)<br>      <span class="hljs-keyword">return</span><br>    }<br>    <span class="hljs-title function_">setUrl</span>(<span class="hljs-variable constant_">URL</span>.<span class="hljs-title function_">createObjectURL</span>(file))<br>  }<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">onDragOver</span>(<span class="hljs-params">ev: DragEvent</span>) {<br>    ev.<span class="hljs-title function_">preventDefault</span>()<br>  }<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">'drop'</span>, onDrop)<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">'dragover'</span>, onDragOver)<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> {<br>      <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">'drop'</span>, onDrop)<br>      <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">'dragover'</span>, onDragOver)<br>    }<br>  }, [])<br>  <span class="hljs-keyword">return</span> url ? (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">{css.img}</span> <span class="hljs-attr">src</span>=<span class="hljs-string">{url}</span> /&gt;</span></span><br>  ) : (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">{css.content}</span>&gt;</span>拖拽图片到这儿<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>}<br></code></pre></td></tr></tbody></table></figure><p>当然，这里需要需要导入 file-system-access 模块，因为这个 api 是 chrome 系独有，firefox/safari 不支持，需要使用 polyfill 添加正确的类型定义。</p><p><img src="/resources/41b8430a157c45c5a82f19f06c05065a.png" alt="1669386555147.png"></p><h2 id="pwa-实现"><a href="#pwa-实现" class="headerlink" title="pwa 实现"></a>pwa 实现</h2><p>虽然我们实现了一个简单的 web 网站，但它并不能安装到系统，这里我们需要让它变成 pwa 应用。我不准备解释它是什么，因为吾辈也没怎么太多了解，具体可以参考：<a href="https://web.dev/learn/pwa/">https://web.dev/learn/pwa/</a>，这是一个很长的列表。<br>幸运的是，吾辈使用的 vite 有一个插件可以开箱即用的做到这一点，它是 <a href="https://vite-pwa-org.netlify.app/">vite-plugin-pwa</a><br>吾辈安装它之后仍然需要配置，因为吾辈想要</p><ul><li>自定义应用的显示名，使用 <code>name/short_name</code></li><li>自定义应用 icon，使用 <code>icons</code></li></ul><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> { defineConfig } <span class="hljs-keyword">from</span> <span class="hljs-string">'vite'</span><br><span class="hljs-keyword">import</span> preact <span class="hljs-keyword">from</span> <span class="hljs-string">'@preact/preset-vite'</span><br><span class="hljs-keyword">import</span> { cssdts } <span class="hljs-keyword">from</span> <span class="hljs-string">'@liuli-util/vite-plugin-css-dts'</span><br><span class="hljs-keyword">import</span> { <span class="hljs-title class_">VitePWA</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'vite-plugin-pwa'</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>({<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-title function_">preact</span>(),<br>    <span class="hljs-title function_">cssdts</span>(),<br>    <span class="hljs-title class_">VitePWA</span>({<br>      <span class="hljs-attr">registerType</span>: <span class="hljs-string">'autoUpdate'</span>,<br>      <span class="hljs-attr">devOptions</span>: {<br>        <span class="hljs-attr">enabled</span>: <span class="hljs-literal">true</span>,<br>      },<br>      <span class="hljs-attr">manifest</span>: {<br>        <span class="hljs-attr">id</span>: <span class="hljs-string">'rxliuli.image-viewer'</span>,<br>        <span class="hljs-attr">short_name</span>: <span class="hljs-string">'图片查看器'</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">'图片查看器'</span>,<br>        <span class="hljs-attr">icons</span>: [<br>          {<br>            <span class="hljs-attr">src</span>: <span class="hljs-string">'/icons/logo512x512.png'</span>,<br>            <span class="hljs-attr">sizes</span>: <span class="hljs-string">'512x512'</span>,<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">'image/png'</span>,<br>          },<br>          {<br>            <span class="hljs-attr">src</span>: <span class="hljs-string">'/icons/logo.svg'</span>,<br>            <span class="hljs-attr">sizes</span>: <span class="hljs-string">'any'</span>,<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">'image/svg'</span>,<br>          },<br>        ],<br>      },<br>    }),<br>  ],<br>})<br></code></pre></td></tr></tbody></table></figure><p>现在，它应该可以被安装并作为独立窗口打开了，并且能在的应用程序列表中看到</p><p><img src="/resources/9bf1c2d16d8c4b1aa1d46219a9beb675.png" alt="1669386797740.png"><br><img src="/resources/cc3114f170ac4be89e1ab96113afea02.png" alt="1669386739999.png"><br><img src="/resources/9449067cd9e9496cb9bbf166c9c13ba7.png" alt="1669386864465.png"></p><h2 id="与文件系统集成"><a href="#与文件系统集成" class="headerlink" title="与文件系统集成"></a>与文件系统集成</h2><p>虽然安装到系统中，但它现在仍然没有集成到系统的文件管理器中 – 许多原生应用程序都允许从文件管理器中打开特定类型的文件。想要做到做到这一点，需要做两件事情</p><ol><li>在 manifest 中声明 <code>file_handlers</code></li><li>访问 <code>window.launchQueue</code> 获取打开的文件</li></ol><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>({<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-comment">// 其他配置...</span><br>    <span class="hljs-title class_">VitePWA</span>({<br>      <span class="hljs-comment">// 其他配置...</span><br>      <span class="hljs-attr">manifest</span>: {<br>        <span class="hljs-comment">// 其他配置...</span><br>        <span class="hljs-attr">file_handlers</span>: [<br>          {<br>            <span class="hljs-attr">action</span>: <span class="hljs-string">'./'</span>,<br>            <span class="hljs-attr">accept</span>: {<br>              <span class="hljs-comment">// ref: https://developer.mozilla.org/zh-CN/docs/Web/Media/Formats/Image_types</span><br>              <span class="hljs-string">'image/*'</span>: [<br>                <span class="hljs-string">'.apng'</span>,<br>                <span class="hljs-string">'.avif'</span>,<br>                <span class="hljs-string">'.bmp'</span>,<br>                <span class="hljs-string">'.gif'</span>,<br>                <span class="hljs-string">'.ico'</span>,<br>                <span class="hljs-string">'.cur'</span>,<br>                <span class="hljs-string">'.jpg'</span>,<br>                <span class="hljs-string">'.jpeg'</span>,<br>                <span class="hljs-string">'.jfif'</span>,<br>                <span class="hljs-string">'.pjpeg'</span>,<br>                <span class="hljs-string">'.pjp'</span>,<br>                <span class="hljs-string">'.png'</span>,<br>                <span class="hljs-string">'.svg'</span>,<br>                <span class="hljs-string">'.tif'</span>,<br>                <span class="hljs-string">'.tiff'</span>,<br>                <span class="hljs-string">'.webp'</span>,<br>              ],<br>            },<br>          },<br>        ],<br>      },<br>    }),<br>  ],<br>})<br></code></pre></td></tr></tbody></table></figure><p>好吧，可能是这个 api 太新（chrome 102 添加），导致现在仍然没有类型定义，不过这不复杂，所以自己定义一下</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">declare</span> <span class="hljs-variable language_">global</span> {<br>  <span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-attr">launchQueue</span>: <span class="hljs-title class_">LaunchQueue</span><br><br>  <span class="hljs-keyword">interface</span> <span class="hljs-title class_">LaunchQueue</span> {<br>    <span class="hljs-title function_">setConsumer</span>(<span class="hljs-attr">consumer</span>: <span class="hljs-title class_">LaunchConsumer</span>): <span class="hljs-built_in">void</span><br>  }<br><br>  <span class="hljs-keyword">interface</span> <span class="hljs-title class_">LaunchConsumer</span> {<br>    (<span class="hljs-attr">launchParams</span>: <span class="hljs-title class_">LaunchParams</span>): <span class="hljs-built_in">void</span><br>  }<br><br>  <span class="hljs-keyword">class</span> <span class="hljs-title class_">LaunchParams</span> {<br>    <span class="hljs-keyword">readonly</span> <span class="hljs-attr">files</span>: <span class="hljs-keyword">readonly</span> <span class="hljs-title class_">FileSystemFileHandle</span>[]<br>  }<br>}<br></code></pre></td></tr></tbody></table></figure><p>然后就可以访问它了</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) {<br>  <span class="hljs-comment">// 其他代码...</span><br>  <span class="hljs-keyword">const</span> [mounted, setMounted] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>)<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {<br>    <span class="hljs-keyword">if</span> (<span class="hljs-string">'launchQueue'</span> <span class="hljs-keyword">in</span> <span class="hljs-variable language_">window</span> &amp;&amp; <span class="hljs-string">'files'</span> <span class="hljs-keyword">in</span> <span class="hljs-title class_">LaunchParams</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>) {<br>      launchQueue.<span class="hljs-title function_">setConsumer</span>(<span class="hljs-keyword">async</span> (launchParams) =&gt; {<br>        <span class="hljs-keyword">if</span> (!launchParams.<span class="hljs-property">files</span>.<span class="hljs-property">length</span>) {<br>          <span class="hljs-keyword">return</span><br>        }<br>        <span class="hljs-title function_">setUrl</span>(<span class="hljs-variable constant_">URL</span>.<span class="hljs-title function_">createObjectURL</span>(<span class="hljs-keyword">await</span> launchParams.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>].<span class="hljs-title function_">getFile</span>()))<br>      })<br>    }<br>    <span class="hljs-title function_">setMounted</span>(<span class="hljs-literal">true</span>)<br>  }, [])<br>  <span class="hljs-keyword">return</span> (<br>    mounted &amp;&amp;<br>    (url ? (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">{css.img}</span> <span class="hljs-attr">src</span>=<span class="hljs-string">{url}</span> /&gt;</span></span><br>    ) : (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">{css.content}</span>&gt;</span>拖拽图片到这儿<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    ))<br>  )<br>}<br></code></pre></td></tr></tbody></table></figure><p>现在，我们可以从系统文件管理器中打开它了</p><p><img src="/resources/6e028b5f898d4ac097769594dcf4a2e8.png" alt="1669387508422.png"></p><p>如果你想尝试它，可以访问 <a href="https://image-viewer.rxliuli.com/">https://image-viewer.rxliuli.com/</a> 安装尝试</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>有趣的是，chrome 仍然在不断添加各种各样的 api 到 web 上，以尽可能缩小与原生应用的功能差异。在 <a href="https://developer.chrome.com/docs/web-platform/">chrome 开发者文档中</a> 可以看到各种各样奇怪的 api，某些看起来与传统意义上的 web 网站大相径庭，甚至有人吐槽说：“applet: 不行，web api: 行”。话虽如此，兜兜转转，发展的螺旋式又转回了这一边。</p><blockquote><p>完整项目见：<a href="https://github.com/rxliuli/image-viewer">https://github.com/rxliuli/image-viewer</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    <category term="前端" scheme="https://blog.rxliuli.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Web API" scheme="https://blog.rxliuli.com/categories/%E5%89%8D%E7%AB%AF/Web-API/"/>
    
    
    <category term="javascript" scheme="https://blog.rxliuli.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>实用 vue3 script setup</title>
    <link href="https://blog.rxliuli.com/p/452a85351b7f4a31b56cf25eb9d3ba50/"/>
    <id>https://blog.rxliuli.com/p/452a85351b7f4a31b56cf25eb9d3ba50/</id>
    <published>2022-11-10T11:16:46.652Z</published>
    <updated>2022-11-18T15:11:07.966Z</updated>
    
    <content type="html"><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><blockquote><p><a href="https://cn.vuejs.org/api/sfc-script-setup.html">官方文档</a></p></blockquote><p>在两年前，vue3 发布之后不久创建了一个 <a href="https://github.com/vuejs/rfcs/blob/master/active-rfcs/0040-script-setup.md">sfc 提案</a>，它允许所有 script 中顶级变量默认绑定到模板，以消除和 react 的开发者体验的差距之一。</p><p>大概长这样</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>// imported components are also directly usable in template<br>import Foo from './Foo.vue'<br>import { ref } from 'vue'<br><br>// write Composition API code just like in a normal setup()<br>// but no need to manually return everything<br>const count = ref(0)<br>const inc = () =&gt; {<br>  count.value++<br>}<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;Foo :count="count" @click="inc" /&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></tbody></table></figure><p>第一感觉：现在真就 vue script 了<br>实际使用：真香</p><p>它确实解决了一些固有的问题</p><ul><li>template 无法访问 js 值域</li><li><code>defineProps/defineEmits</code> 无法复用类型定义</li></ul><p>经过两年之后，它确实能够在生产中使用了，即便可能仍然不算完美，下面将描述它主要解决的两个问题以及与其他方法的差异</p><h2 id="template-访问-js-值域"><a href="#template-访问-js-值域" class="headerlink" title="template 访问 js 值域"></a>template 访问 js 值域</h2><p>在 react 中，我们可以直接在 jsx 中访问任意 js 值域。例如 import 一个变量，并在 jsx 中使用。</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> { <span class="hljs-title class_">List</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'antd'</span><br><span class="hljs-keyword">import</span> { uniq } <span class="hljs-keyword">from</span> <span class="hljs-string">'lodash-es'</span><br><span class="hljs-keyword">import</span> { useState } <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) {<br>  <span class="hljs-keyword">const</span> [list] = <span class="hljs-title function_">useState</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>])<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">List</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">dataSource</span>=<span class="hljs-string">{uniq(list)}</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">renderItem</span>=<span class="hljs-string">{(item)</span> =&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">List.Item.Meta</span> <span class="hljs-attr">key</span>=<span class="hljs-string">{item}</span> <span class="hljs-attr">title</span>=<span class="hljs-string">{item}</span> /&gt;</span>}</span><br><span class="language-xml">    /&gt;</span><br>  )<br>}<br></code></pre></td></tr></tbody></table></figure><p>在 vue2 中，template 能访问的值必须注册到 vue 中，不管是 <code>data/methods/components</code></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script lang="ts"&gt;<br>import { defineComponent } from 'vue'<br>import { List, ListItemMeta } from 'ant-design-vue'<br>import { uniq } from 'lodash-es'<br><br>export default defineComponent({<br>  components: { List, ListItemMeta },<br>  data: () =&gt; ({<br>    list: [1, 2, 1],<br>  }),<br>  methods: {<br>    uniq,<br>  },<br>})<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;List :data-source="uniq(list)"&gt;<br>    &lt;template #renderItem="{ item }"&gt;<br>      &lt;ListItemMeta :title="item" /&gt;<br>    &lt;/template&gt;<br>  &lt;/List&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></tbody></table></figure><p>在 vue3 中，虽然有了 hooks，但仍然未解决 js 值域的问题，只是可以通过 setup 统一暴露给 template</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script lang="ts"&gt;<br>import { defineComponent, ref } from 'vue'<br>import { List, ListItemMeta } from 'ant-design-vue'<br>import { uniq } from 'lodash-es'<br><br>export default defineComponent({<br>  components: { List, ListItemMeta },<br>  setup() {<br>    const list = ref([1, 2, 1])<br>    return { list, uniq }<br>  },<br>})<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;List :data-source="uniq(list)"&gt;<br>    &lt;template #renderItem="{ item }"&gt;<br>      &lt;ListItemMeta :title="item" /&gt;<br>    &lt;/template&gt;<br>  &lt;/List&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></tbody></table></figure><p>但 vue3 setup script 中，则部分解决了这个问题，所有在 script 中的值均可以在 template 中访问</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script lang="ts" setup&gt;<br>import { ref } from 'vue'<br>import { List, ListItemMeta } from 'ant-design-vue'<br>import { uniq } from 'lodash-es'<br>const list = ref([1, 2, 1])<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;List :data-source="uniq(list)"&gt;<br>    &lt;template #renderItem="{ item }"&gt;<br>      &lt;ListItemMeta :title="item" /&gt;<br>    &lt;/template&gt;<br>  &lt;/List&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></tbody></table></figure><p>可以看到，setup script 已经接近 react jsx 的使用体验了</p><p>当然，你可以在 <a href="https://sfc.vuejs.org/">https://sfc.vuejs.org/</a> 中查看 setup script 的实际编译结果，例如上面的代码会被编译为</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/* Analyzed bindings: {</span><br><span class="hljs-comment">  "ref": "setup-const",</span><br><span class="hljs-comment">  "List": "setup-maybe-ref",</span><br><span class="hljs-comment">  "ListItemMeta": "setup-maybe-ref",</span><br><span class="hljs-comment">  "uniq": "setup-maybe-ref",</span><br><span class="hljs-comment">  "list": "setup-ref"</span><br><span class="hljs-comment">} */</span><br><span class="hljs-keyword">import</span> { defineComponent <span class="hljs-keyword">as</span> _defineComponent } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span><br><span class="hljs-keyword">import</span> {<br>  unref <span class="hljs-keyword">as</span> _unref,<br>  createVNode <span class="hljs-keyword">as</span> _createVNode,<br>  withCtx <span class="hljs-keyword">as</span> _withCtx,<br>  openBlock <span class="hljs-keyword">as</span> _openBlock,<br>  createBlock <span class="hljs-keyword">as</span> _createBlock,<br>} <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span><br><br><span class="hljs-keyword">import</span> { ref } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span><br><span class="hljs-keyword">import</span> { <span class="hljs-title class_">List</span>, <span class="hljs-title class_">ListItemMeta</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'ant-design-vue'</span><br><span class="hljs-keyword">import</span> { uniq } <span class="hljs-keyword">from</span> <span class="hljs-string">'lodash-es'</span><br><br><span class="hljs-keyword">const</span> __sfc__ = <span class="hljs-comment">/*#__PURE__*/</span> <span class="hljs-title function_">_defineComponent</span>({<br>  <span class="hljs-attr">__name</span>: <span class="hljs-string">'App'</span>,<br>  <span class="hljs-title function_">setup</span>(<span class="hljs-params">__props</span>) {<br>    <span class="hljs-keyword">const</span> list = <span class="hljs-title function_">ref</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>])<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">_ctx, _cache</span>) =&gt;</span> {<br>      <span class="hljs-keyword">return</span> (<br>        <span class="hljs-title function_">_openBlock</span>(),<br>        <span class="hljs-title function_">_createBlock</span>(<br>          <span class="hljs-title function_">_unref</span>(<span class="hljs-title class_">List</span>),<br>          {<br>            <span class="hljs-string">'data-source'</span>: <span class="hljs-title function_">_unref</span>(uniq)(list.<span class="hljs-property">value</span>),<br>          },<br>          {<br>            <span class="hljs-attr">renderItem</span>: <span class="hljs-title function_">_withCtx</span>(<span class="hljs-function">(<span class="hljs-params">{ item }</span>) =&gt;</span> [<br>              <span class="hljs-title function_">_createVNode</span>(<br>                <span class="hljs-title function_">_unref</span>(<span class="hljs-title class_">ListItemMeta</span>),<br>                { <span class="hljs-attr">title</span>: item },<br>                <span class="hljs-literal">null</span>,<br>                <span class="hljs-number">8</span> <span class="hljs-comment">/* PROPS */</span>,<br>                [<span class="hljs-string">'title'</span>],<br>              ),<br>            ]),<br>            <span class="hljs-attr">_</span>: <span class="hljs-number">1</span> <span class="hljs-comment">/* STABLE */</span>,<br>          },<br>          <span class="hljs-number">8</span> <span class="hljs-comment">/* PROPS */</span>,<br>          [<span class="hljs-string">'data-source'</span>],<br>        )<br>      )<br>    }<br>  },<br>})<br>__sfc__.<span class="hljs-property">__file</span> = <span class="hljs-string">'App.vue'</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> __sfc__<br></code></pre></td></tr></tbody></table></figure><p>局限性</p><p>尽管有些改进，但它也确实引发了一些问题</p><ul><li>无法在 setup 中使用 export，因为所有代码都会被编译到 setup 函数中</li></ul><h2 id="defineProps-复用类型定义"><a href="#defineProps-复用类型定义" class="headerlink" title="defineProps 复用类型定义"></a>defineProps 复用类型定义</h2><p>在 tsx 中，另一个很有用的功能是可以直接复用 ts 类型定义，而不需要定义单独的 PropType。实际上，在 react 早期，它也包含内置的 PropType 支持，但最终它们采用了 ts 的类型定义，而 vue 则一直保留了下来，并不得不忍受 ts 类型与 props 类型无法共享的问题，即便它们都在 ts 中。</p><p>例如在 tsx 中我们会这样编写类型</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">WindowMeta</span> {<br>  <span class="hljs-attr">id</span>: <span class="hljs-built_in">string</span><br>  <span class="hljs-attr">title</span>: <span class="hljs-built_in">string</span><br>  <span class="hljs-attr">url</span>: <span class="hljs-built_in">string</span><br>}<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Window</span>(<span class="hljs-params">props: { meta: WindowMeta }</span>) {<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span>{JSON.stringify(props.meta, null, 2)}<span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span></span><br>}<br></code></pre></td></tr></tbody></table></figure><p>在 vue3 没有 defineProps 之前</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script lang="ts"&gt;<br>import { defineComponent, PropType } from 'vue'<br><br>interface WindowMeta {<br>  id: string<br>  title: string<br>  url: string<br>}<br><br>export default defineComponent({<br>  props: {<br>    meta: {<br>      type: Object as PropType&lt;WindowMeta&gt;,<br>      required: true,<br>    },<br>  },<br>})<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;pre&gt;{{ JSON.stringify($props.meta, null, 2) }}&lt;/pre&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></tbody></table></figure><p>使用 defineProps 之后</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script lang="ts" setup&gt;<br>interface WindowMeta {<br>  id: string<br>  title: string<br>  url: string<br>}<br><br>defineProps&lt;{<br>  meta: WindowMeta<br>}&gt;()<br>&lt;/script&gt;<br></code></pre></td></tr></tbody></table></figure><p>可以看到，可以直接复用 ts 类型了，不再需要单独定义 vue PropType。你可能发现 defineProps 没有被导入，是的，它们实际上是宏，实际上它们在编译后就不存在了，甚至不会被编译为 vue PropType。下面是编译结果</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">/* Analyzed bindings: {</span><br><span class="hljs-comment">  "meta": "props"</span><br><span class="hljs-comment">} */</span><br><span class="hljs-keyword">import</span> { defineComponent <span class="hljs-keyword">as</span> _defineComponent } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span><br><br><span class="hljs-keyword">const</span> __sfc__ = <span class="hljs-comment">/*#__PURE__*/</span> <span class="hljs-title function_">_defineComponent</span>({<br>  <span class="hljs-attr">__name</span>: <span class="hljs-string">'App'</span>,<br>  <span class="hljs-attr">props</span>: {<br>    <span class="hljs-attr">meta</span>: <span class="hljs-literal">null</span>,<br>  },<br>  <span class="hljs-title function_">setup</span>(<span class="hljs-params">__props</span>) {<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> {}<br>  },<br>})<br>__sfc__.<span class="hljs-property">__file</span> = <span class="hljs-string">'App.vue'</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> __sfc__<br></code></pre></td></tr></tbody></table></figure><p>局限性</p><p>虽然看起来不错，但它确实有局限性，例如</p><ul><li><code>defineProps/defineEmits</code> 无法引用外部类型，需要使用额外的插件 <a href="https://github.com/wheatjs/vite-plugin-vue-type-imports">vite-plugin-vue-type-imports</a></li></ul><h2 id="defineEmit-使用类型"><a href="#defineEmit-使用类型" class="headerlink" title="defineEmit 使用类型"></a>defineEmit 使用类型</h2><p>在 react 中不存在 emits/attrs/slots，它们都被整合到 props 中（这是一个非常优雅而强大的设计）。在 vue3 中，emits 可以定义类型，但在 defineEmits 之前，仍然要通过定义值来推导类型。</p><p>例如</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">WindowMeta</span> {<br>  <span class="hljs-attr">id</span>: <span class="hljs-built_in">string</span><br>  <span class="hljs-attr">title</span>: <span class="hljs-built_in">string</span><br>  <span class="hljs-attr">url</span>: <span class="hljs-built_in">string</span><br>}<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params">props: { onClick(item: WindowMeta): <span class="hljs-built_in">void</span> }</span>) {}<br></code></pre></td></tr></tbody></table></figure><p>在 vue3 之前一般要这样写，定义对象并由 vue 根据值推断类型</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script lang="ts"&gt;<br>import { defineComponent } from 'vue'<br><br>interface WindowMeta {<br>  id: string<br>  title: string<br>  url: string<br>}<br><br>export default defineComponent({<br>  // 注意，此处是一个 js 对象<br>  emits: {<br>    onClick(item: WindowMeta): void {},<br>  },<br>})<br>&lt;/script&gt;<br></code></pre></td></tr></tbody></table></figure><p>在使用 setup script 后，可以使用 ts 类型</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script lang="ts" setup&gt;<br>interface WindowMeta {<br>  id: string<br>  title: string<br>  url: string<br>}<br><br>defineEmits&lt;{<br>  // 这里则是一个类型<br>  (type: 'onClick', item: WindowMeta): void<br>}&gt;()<br>&lt;/script&gt;<br></code></pre></td></tr></tbody></table></figure><p>当然，它会在编译时全部删除掉，仅用于开发时的代码提示和校验</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/* Analyzed bindings: {} */</span><br><span class="hljs-keyword">import</span> { defineComponent <span class="hljs-keyword">as</span> _defineComponent } <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span><br><br><span class="hljs-keyword">const</span> __sfc__ = <span class="hljs-comment">/*#__PURE__*/</span> <span class="hljs-title function_">_defineComponent</span>({<br>  <span class="hljs-attr">__name</span>: <span class="hljs-string">'App'</span>,<br>  <span class="hljs-attr">emits</span>: [<span class="hljs-string">'onClick'</span>],<br>  <span class="hljs-title function_">setup</span>(<span class="hljs-params">__props</span>) {<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> {}<br>  },<br>})<br>__sfc__.<span class="hljs-property">__file</span> = <span class="hljs-string">'App.vue'</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> __sfc__<br></code></pre></td></tr></tbody></table></figure><p>也可以使用使用一些工具类型编写更符合直觉的接口</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script lang="ts" setup&gt;<br>import { UnionToIntersection } from 'utility-types'<br><br>type ShortEmits&lt;T&gt; = UnionToIntersection&lt;<br>  {<br>    [P in keyof T]: T[P] extends (...args: any[]) =&gt; any<br>      ? (type: P, ...args: Parameters&lt;T[P]&gt;) =&gt; ReturnType&lt;T[P]&gt;<br>      : never<br>  }[keyof T]<br>&gt;<br><br>interface WindowMeta {<br>  id: string<br>  title: string<br>  url: string<br>}<br><br>defineEmits&lt;<br>  ShortEmits&lt;{<br>    onClick(item: WindowMeta): void<br>  }&gt;<br>&gt;()<br>&lt;/script&gt;<br></code></pre></td></tr></tbody></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>它确实解决了一些开发上糟糕的体验，但也引发了一些问题</p><ul><li>必须使用 @vue/compiler-dom 才能处理 vue script 的代码，因为 setup script 意味着它不再是真正的 ts 代码了</li><li>某些更激进的社区方案添加了各种各样的自定义宏，参考 <a href="https://github.com/sxzz/unplugin-vue-macros">unplugin-vue-macros</a></li></ul>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    <category term="前端" scheme="https://blog.rxliuli.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://blog.rxliuli.com/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="typescript" scheme="https://blog.rxliuli.com/tags/typescript/"/>
    
    <category term="vue" scheme="https://blog.rxliuli.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>使用 cloudflare workers 代理访问 google photos</title>
    <link href="https://blog.rxliuli.com/p/c826295333d241969663ac463ad63642/"/>
    <id>https://blog.rxliuli.com/p/c826295333d241969663ac463ad63642/</id>
    <published>2022-11-06T09:20:16.041Z</published>
    <updated>2022-11-06T14:58:10.790Z</updated>
    
    <content type="html"><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>吾辈使用 Google Photos 作为个人相册，但它的外链却无法在 blog 中使用，而且也无法在国内直接访问，这其实有点麻烦。在此之前，吾辈通过 <a href="https://blog.csdn.net/kaimo313/article/details/119649989">使用外链图片的时候报 403 怎么处理？</a> 了解到 <a href="https://images.weserv.nl/">https://images.weserv.nl</a> 服务，它可以通过 cloudflare cdn 代理访问原本无法直接访问的图片。使用上也很简单，只要在 <a href="https://images.weserv.nl/?url=">https://images.weserv.nl?url=</a> 加上原本图片的路径即可。<br>但在今天偶然一次打开 blog 的时候发现，通过 weserv 外链的图片加载很慢，数量比较多时甚至需要几分钟才能全部加载完成，这是不能忍受的。</p><p><img src="/resources/347adbd7a2f44629abb6d1258f75ac49.png" alt="1667745493673.png"></p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><blockquote><p>cloudflare workers 的免费层每天最多允许 10w 次请求，对于吾辈这种流量很小的网站完全可以接受。</p></blockquote><p>于是，吾辈想到了利用 <a href="https://workers.cloudflare.com/">cloudflare workers</a> 代理的方法，它的基本思路与 weserv 类似，但不再使用它的服务，而是直接使用 cloudflare 代理。lambda 函数实现很简单，就是透传 url 参数罢了。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {<br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-params">request</span>) {<br>    <span class="hljs-keyword">const</span> url = <span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(request.<span class="hljs-property">url</span>)<br>    <span class="hljs-keyword">const</span> r = url.<span class="hljs-property">searchParams</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">'url'</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'r'</span>, r)<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">fetch</span>(r)<br>  },<br>}<br></code></pre></td></tr></tbody></table></figure><p>部署上去之后，再配置一下自定义路由。于是，吾辈便有了一个基本的图片访问代理 <a href="https://image-proxy.rxliuli.com/">https://image-proxy.rxliuli.com</a>。可以检查另一篇 <a href="/p/7a436b6754e4484db517fc002532d94d">终之空通关感想</a>，它已经在使用这个代理服务了。</p><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><p>使用之后，图片加载速度变得看起来还不错。</p><p><img src="/resources/ac26ab6a729f4cd3b4ea5c2bc9eee18a.png" alt="1667745662310.png"></p><p>直接使用 curl 访问单张图片它们看起来差距没那么大，但在浏览器中同时加载多张图片的体验却截然不同。下面是使用 curl 的对比</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ time curl https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEUmvKBtRxGeG-J-0oVDVmdZccu0E0_HiDHaMPlvWBLp1v2wjaA152s9FxkIRFZROAChN-tYgimcK-ZYBFD_KGya40RzSKfDTVJqvoXjg5CsBmAaJPurSPdDmaDm6Bcunj4IxL_YPBnwtH0h7XdwaUxN=w1600-h1200-no<br><br>real    0m1.951s<br>user    0m0.000s<br>sys     0m0.000s<br><br>$ time curl https://images.weserv.nl/?url=https://lh3.googleusercontent.com/pw/AL9nZEUmvKBtRxGeG-J-0oVDVmdZccu0E0_HiDHaMPlvWBLp1v2wjaA152s9FxkIRFZROAChN-tYgimcK-ZYBFD_KGya40RzSKfDTVJqvoXjg5CsBmAaJPurSPdDmaDm6Bcunj4IxL_YPBnwtH0h7XdwaUxN=w1600-h1200-no<br><br>real    0m4.584s<br>user    0m0.000s<br>sys     0m0.000s<br></code></pre></td></tr></tbody></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>公共的服务看起来不错，weserv 甚至将性能作为第一点声明，但免费的东西使用的太多了性能可能就会变差，毕竟资源总是有限的呢。</p><p><img src="/resources/4bc71ba715f048b5b5d7beb7bb93cd56.png" alt="1667746013873.png"></p>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    <category term="前端" scheme="https://blog.rxliuli.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="有趣的知识" scheme="https://blog.rxliuli.com/categories/%E5%89%8D%E7%AB%AF/%E6%9C%89%E8%B6%A3%E7%9A%84%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="工具" scheme="https://blog.rxliuli.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>2022 年里做前端是怎样一种体验</title>
    <link href="https://blog.rxliuli.com/p/ef26175b98af43ccaf918296a739ded5/"/>
    <id>https://blog.rxliuli.com/p/ef26175b98af43ccaf918296a739ded5/</id>
    <published>2022-11-06T08:23:18.431Z</published>
    <updated>2022-11-28T16:09:33.887Z</updated>
    
    <content type="html"><![CDATA[<p>今天在社区聊天群友说起 react 状态管理器时突然想起来了一篇旧文 <a href="/p/333051b25bd047e8864d161a9a6982de">2016 年里做前端是怎样一种体验</a>，所以又模仿它跟着最近的新的技术写了一点。</p><p>问：最近我开始了一个新的 web 项目，不过老实说我已经好久没碰过这方面的代码了，之前只写过 vue2。听说前端的技术栈已经发生了极大的变革，不知道你现在是不是仍然处于最前沿的开发者阵列？<br>答: 是的，自从 hooks 出来之后，web 框架又发生了很多的变化。并且我刚从 Next.js Conf 2022 回来，因此我觉得我还是了解目前 Web 前端领域最新的面貌的。<br>问：不错不错，我的需求其实也不复杂，就是从后端提供的 REST 风格的 EndPoint 来获取用户活动数据并且将其展示在前端界面上。并且需要以列表形式展示，同时，列表要支持筛选排序等操作，对了，还要保证前端数据和服务端保持一致，以及能够做基本的编辑。其实就是简单的后台增删改查，按照我现在的理解，我打算用 vue2+axios 来抓取与操作数据，你觉得咋样？<br>答：不不不，现在估计已经没多少人使用 vue2 了吧。你可以试试 react，毕竟这是 2022 年了啊。<br>问：额，好吧，那 react 和 vue2 有什么区别啊？<br>答：react 是倾向函数式、不可变的框架，社区丰富，实践很多，而且 hooks 改变了一切。<br>问：不错不错，那我是不是就可以用 react+axios 来展示数据了呢？<br>答：额，你的应用需要处理任何的状态变更吗？<br>问：应该需要，有什么推荐么？我之前用过 vuex，听说 react 社区的是 redux？<br>答：都 2022 了，redux 早就过时了。试试新的基于 hooks 的状态管理器吧<br>问：举点例子？<br>答：分布式的用 jotai，集中的用 zustand，中后台无脑用 valtio，基本上 daishi kato 把你所有的需求都包了<br>问：好吧，我知道现在状态管理器很多了，听起来我应该用 valtio<br>答：是的，其实还有几十个我没说出来呢<br>问：那我是不是就可以用 webpack 创建一个项目开发了<br>答：额，现在 webpack 也过时了<br>问：过时了，那我要用什么？gulp？<br>答：webpack 太慢了，现在你应该用 vite、turbopack 之类的更快的构建工具<br>问：它们都是什么？<br>答：vite 是一个跨框架的打包工具，它基于 rollup+esbuild，比 webpack 快得多。turbopack 则是 webpack 作者基于 swc 重写的构建工具，比 vite 快 10 倍（就是还没能生产可用 #小声<br>问：你是不是专门一字排开名词来了？rollup 我了解，esbuild/swc 是什么？<br>答：esbuild/swc 是基于 native 编程语言写的编译器，它们分别使用 golang/rust 编写，比 babel 快 10~100 倍？<br>问：我之前用过 babel，插件很多，上一次你似乎推荐给我的就是这个？<br>答：时代在变化嘛～，就像 css 现在都已经过时了<br>问：嗯？css 过时了，那我怎么写样式？<br>答：试试 style-component？或者 tailwind？<br>问：我听说过 sass/less，但不知道这些是什么<br>答：style-component 是在 js 里写 css，它不需要单独的 css 文件，而且可以作为 js 值更容易复用。tailwind 则可以让你完全不写，只写 class 就好了，例如 w-9 h-9<br>问：听起来像是 style 内联样式？它们不是不推荐了么？<br>答：tailwind 不一样，你可以试试看<br>问：好吧，我只想写点简单的样式而已，不会太复杂<br>答：那好吧，你可以直接用 css-module 比较简单<br>问：我不想再纠结于这些名词了，再强调一遍，我只是想做个后台增删改查罢了。<br>答：那你可能根本不需要框架</p><blockquote><p>PS1：redux 之前的流行似乎是因为 react 社区当时 FP 魔怔了<br>PS2：即便写 react 也有人并不喜欢 style-component/tailwind</p></blockquote>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    <category term="前端" scheme="https://blog.rxliuli.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="有趣的知识" scheme="https://blog.rxliuli.com/categories/%E5%89%8D%E7%AB%AF/%E6%9C%89%E8%B6%A3%E7%9A%84%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="杂谈" scheme="https://blog.rxliuli.com/tags/%E6%9D%82%E8%B0%88/"/>
    
    <category term="react" scheme="https://blog.rxliuli.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>markdown 自动化</title>
    <link href="https://blog.rxliuli.com/p/3b9aa0ac801f4ec0a2494782459c0203/"/>
    <id>https://blog.rxliuli.com/p/3b9aa0ac801f4ec0a2494782459c0203/</id>
    <published>2022-10-28T02:54:44.110Z</published>
    <updated>2022-11-28T14:34:19.993Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>作为一个开发者，吾辈在工作之后开始使用了 markdown 作为一切文档的基本格式。由此衍生出来了一些处理 markdown 的需要，特别是在笔记工具使用了基于 markdown 的 joplin 之后，这种需求确切的开始存在了。</p><p>下面列出一些常见的需求</p><ul><li>在 vscode 中访问和编辑笔记</li><li>从笔记中导出 blog 需要的文件</li><li>从 markdown 生成 epub 文件和网站</li><li>从 markdown 生成 pdf 文件以便分享</li><li>更多。。。</li></ul><h2 id="工具库"><a href="#工具库" class="headerlink" title="工具库"></a>工具库</h2><p>markdown 相关的工具库有很多，举几个知名的</p><ul><li>markdown-it: 很早的一个 markdown 实现，包括 vscode 在内的许多工具都使用它</li><li>marked: 一个更古老的工具，npm 下载量更多，但我没有找到知名的用例</li><li>remark: 一个离散的 markdown 工具，几乎所有功能都交由插件系统实现，非常灵活，被 mdx 等知名工具使用</li><li>mdast: 更底层的 markdown ast 抽象，提供了各种各样的工具包，是 remark 的底层依赖</li></ul><p>虽然有这么多的工具，但最终吾辈选择了 mdast，原因是多方面的</p><ul><li>支持仅修改 markdown 而不将之转换为 html，其他工具一般只能将自定义操作作为插件嵌入到渲染流程中，而不能单独获取和处理 ast，它是吾辈已知唯一能这样做的库</li><li>mdast 提供 markdown 的 ast 抽象，并且对开发者暴露，也能与其他工具很好的结合，例如 astexplorer 支持查看基于 mdast 抽象的 markdown 语法树</li><li>mdast/remark 同源，但 mdast 层级更低也更快，没有准确的测量但实际用例中快了 5 倍</li></ul><p>所以最终选择了 mdast，即便它也有一些缺点，但仍然瑕不掩瑜</p><ul><li>mdast 非常离散化，所需的功能基本都在社区插件包中维护，这意味着要依赖非常多的模块 – 通过自行维护 <a href="https://www.npmjs.com/package/@liuli-util/markdown-util">@liuli-util/markdown-util</a> 解决</li><li>mdast 是 esm only 的，这个社区也开始放弃 cjs 了 – 吾辈也开始这样做了，虽然许多模块仍然支持 cjs，但新的模块已经默认 esm only 了</li></ul><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>一个最简单的使用示例是将 markdown 转换为 html</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> { toHtml } <span class="hljs-keyword">from</span> <span class="hljs-string">'hast-util-to-html'</span><br><span class="hljs-keyword">import</span> { fromMarkdown } <span class="hljs-keyword">from</span> <span class="hljs-string">'mdast-util-from-markdown'</span><br><span class="hljs-keyword">import</span> { gfmFromMarkdown } <span class="hljs-keyword">from</span> <span class="hljs-string">'mdast-util-gfm'</span><br><span class="hljs-keyword">import</span> { toHast } <span class="hljs-keyword">from</span> <span class="hljs-string">'mdast-util-to-hast'</span><br><span class="hljs-keyword">import</span> { gfm } <span class="hljs-keyword">from</span> <span class="hljs-string">'micromark-extension-gfm'</span><br><br><span class="hljs-keyword">const</span> s = <span class="hljs-string">'## Hello **World**!'</span><br><span class="hljs-keyword">const</span> root = <span class="hljs-title function_">fromMarkdown</span>(s, {<br>  <span class="hljs-attr">extensions</span>: [<span class="hljs-title function_">gfm</span>()],<br>  <span class="hljs-attr">mdastExtensions</span>: [<span class="hljs-title function_">gfmFromMarkdown</span>()],<br>})<br><span class="hljs-keyword">const</span> r = <span class="hljs-title function_">toHtml</span>(<span class="hljs-title function_">toHast</span>(root)!)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(r) <span class="hljs-comment">// &lt;h2&gt;Hello &lt;strong&gt;World&lt;/strong&gt;!&lt;/h2&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>可以看到，比想象中要麻烦一些，必须使用各种插件和工具，只是这个简单的工作我们需要使用 5 个模块，但在下面吾辈会证明这是值得的，也是可以解决的。</p><p>这里我们可以先简单封装一下，三个最基本的函数</p><ul><li><code>fromMarkdown</code>: 从 markdown 文本得到 ast</li><li><code>toMarkdown</code>: 从 ast 转换为 markdown 文本</li><li><code>toHTML</code>: 从 ast 转换为 html 文本</li></ul><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> {<br>  fromMarkdown <span class="hljs-keyword">as</span> fm,<br>  <span class="hljs-title class_">Options</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">FmOptions</span>,<br>} <span class="hljs-keyword">from</span> <span class="hljs-string">'mdast-util-from-markdown'</span><br><span class="hljs-keyword">import</span> { <span class="hljs-title class_">Options</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">TmOptions</span>, toMarkdown <span class="hljs-keyword">as</span> tm } <span class="hljs-keyword">from</span> <span class="hljs-string">'mdast-util-to-markdown'</span><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> { <span class="hljs-title class_">Content</span>, <span class="hljs-title class_">Root</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'mdast'</span><br><span class="hljs-keyword">import</span> {<br>  frontmatterFromMarkdown,<br>  frontmatterToMarkdown,<br>} <span class="hljs-keyword">from</span> <span class="hljs-string">'mdast-util-frontmatter'</span><br><span class="hljs-keyword">import</span> { frontmatter } <span class="hljs-keyword">from</span> <span class="hljs-string">'micromark-extension-frontmatter'</span><br><span class="hljs-keyword">import</span> { gfm } <span class="hljs-keyword">from</span> <span class="hljs-string">'micromark-extension-gfm'</span><br><span class="hljs-keyword">import</span> { gfmFromMarkdown, gfmToMarkdown } <span class="hljs-keyword">from</span> <span class="hljs-string">'mdast-util-gfm'</span><br><span class="hljs-keyword">import</span> { toHast } <span class="hljs-keyword">from</span> <span class="hljs-string">'mdast-util-to-hast'</span><br><span class="hljs-keyword">import</span> { toHtml <span class="hljs-keyword">as</span> hastToHtml } <span class="hljs-keyword">from</span> <span class="hljs-string">'hast-util-to-html'</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 解析 markdown 文本为 ast</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> <span class="hljs-variable">content</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fromMarkdown</span>(<span class="hljs-params">content: <span class="hljs-built_in">string</span>, options?: FmOptions</span>): <span class="hljs-title class_">Root</span> {<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">fm</span>(content, {<br>    ...options,<br>    <span class="hljs-attr">extensions</span>: [<span class="hljs-title function_">frontmatter</span>([<span class="hljs-string">'yaml'</span>]), <span class="hljs-title function_">gfm</span>()].<span class="hljs-title function_">concat</span>(<br>      options?.<span class="hljs-property">extensions</span> ?? [],<br>    ),<br>    <span class="hljs-attr">mdastExtensions</span>: [<br>      <span class="hljs-title function_">frontmatterFromMarkdown</span>([<span class="hljs-string">'yaml'</span>]),<br>      <span class="hljs-title function_">gfmFromMarkdown</span>(),<br>    ].<span class="hljs-title function_">concat</span>(options?.<span class="hljs-property">mdastExtensions</span> ?? []),<br>  })<br>}<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将 markdown ast 转换为文本</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> <span class="hljs-variable">ast</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">toMarkdown</span>(<span class="hljs-params">ast: Content | Root, options?: TmOptions</span>): <span class="hljs-built_in">string</span> {<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">tm</span>(ast, {<br>    ...options,<br>    <span class="hljs-attr">extensions</span>: [<span class="hljs-title function_">frontmatterToMarkdown</span>([<span class="hljs-string">'yaml'</span>]), <span class="hljs-title function_">gfmToMarkdown</span>()].<span class="hljs-title function_">concat</span>(<br>      options?.<span class="hljs-property">extensions</span> ?? [],<br>    ),<br>  })<br>}<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将一段 markdown ast 序列化为 html</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> <span class="hljs-variable">node</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">toHtml</span>(<span class="hljs-params">node: Root</span>): <span class="hljs-built_in">string</span> {<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">hastToHtml</span>(<span class="hljs-title function_">toHast</span>(node)!)<br>}<br></code></pre></td></tr></tbody></table></figure><p>为了方便，我们默认引入了 gfm/yaml 这两个插件。下面的示例代码将直接使用这三个函数，现在重新完成之前转换 markdown 为 html 的需求</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> s = <span class="hljs-string">'## Hello **World**!'</span><br><span class="hljs-keyword">const</span> r = <span class="hljs-title function_">toHtml</span>(<span class="hljs-title function_">fromMarkdown</span>(s))<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(r) <span class="hljs-comment">// &lt;h2&gt;Hello &lt;strong&gt;World&lt;/strong&gt;!&lt;/h2&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>可以看到，现在使用变得简单一些了。</p><h3 id="markdown-ast"><a href="#markdown-ast" class="headerlink" title="markdown ast"></a>markdown ast</h3><p>然后，就是 ast 部分，mdast 抽象了 markdown 的语法树，可以在 <a href="https://astexplorer.net/">astexplorer</a> 中检查一段 markdown 的语法树。</p><p><img src="/resources/f099deeb591d43ef9a00f3b3138bd696.png" alt="1669637555985.png"></p><p>实际上，它就是一个嵌套的 json 对象。当得到 ast 之后，就可以对他进行操作，例如，最简单的遍历</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> { <span class="hljs-title class_">Node</span>, visit } <span class="hljs-keyword">from</span> <span class="hljs-string">'unist-util-visit'</span><br><span class="hljs-keyword">import</span> { fromMarkdown } <span class="hljs-keyword">from</span> <span class="hljs-string">'../parse'</span><br><br><span class="hljs-keyword">const</span> s = <span class="hljs-string">'## Hello **World**!'</span><br><span class="hljs-keyword">const</span> root = <span class="hljs-title function_">fromMarkdown</span>(s)<br><span class="hljs-title function_">visit</span>(root, <span class="hljs-function">(<span class="hljs-params">node: Node</span>) =&gt;</span> {<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(node.<span class="hljs-property">type</span>)<br>})<br></code></pre></td></tr></tbody></table></figure><p>或者对它做一些修改，例如将粗体的替换为普通文本</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> { <span class="hljs-title class_">Node</span>, <span class="hljs-title class_">Parent</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'unist'</span><br><span class="hljs-keyword">import</span> { <span class="hljs-title class_">Strong</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'mdast'</span><br><span class="hljs-keyword">import</span> { visit } <span class="hljs-keyword">from</span> <span class="hljs-string">'unist-util-visit'</span><br><span class="hljs-keyword">import</span> { fromMarkdown, toMarkdown } <span class="hljs-keyword">from</span> <span class="hljs-string">'../parse'</span><br><br><span class="hljs-keyword">const</span> s = <span class="hljs-string">'## Hello **World**!'</span><br><span class="hljs-keyword">const</span> root = <span class="hljs-title function_">fromMarkdown</span>(s)<br><span class="hljs-title function_">visit</span>(root, <span class="hljs-function">(<span class="hljs-params">node: Node</span>) =&gt;</span> {<br>  <span class="hljs-keyword">if</span> (<span class="hljs-string">'children'</span> <span class="hljs-keyword">in</span> (node <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span>)) {<br>    <span class="hljs-keyword">const</span> p = node <span class="hljs-keyword">as</span> <span class="hljs-title class_">Parent</span><br>    p.<span class="hljs-property">children</span> = p.<span class="hljs-property">children</span>.<span class="hljs-title function_">flatMap</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span><br>      item.<span class="hljs-property">type</span> === <span class="hljs-string">'strong'</span> ? (item <span class="hljs-keyword">as</span> <span class="hljs-title class_">Strong</span>).<span class="hljs-property">children</span> : [item],<br>    )<br>  }<br>})<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">toMarkdown</span>(root)) <span class="hljs-comment">// ## Hello World!</span><br></code></pre></td></tr></tbody></table></figure><p>嗯，引入了 3 个模块。我们可以更进一步封装一个适用于 mdast 的 <code>flatMap</code></p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 映射一棵 ast 树</span><br><span class="hljs-comment"> * 注：其中会执行真实的修改操作</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> <span class="hljs-variable">tree</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> <span class="hljs-variable">fn</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> flatMap&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Node</span>&gt;(<br>  <span class="hljs-attr">tree</span>: T,<br>  <span class="hljs-attr">fn</span>: <span class="hljs-function">(<span class="hljs-params">node: Node, i: <span class="hljs-built_in">number</span>, parent?: Parent</span>) =&gt;</span> <span class="hljs-title class_">Node</span>[],<br>): T {<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">transform</span>(<span class="hljs-params">node: Node, i: <span class="hljs-built_in">number</span>, parent?: Parent</span>): <span class="hljs-title class_">Node</span>[] {<br>    <span class="hljs-keyword">if</span> (<span class="hljs-string">'children'</span> <span class="hljs-keyword">in</span> node) {<br>      <span class="hljs-keyword">const</span> p = node <span class="hljs-keyword">as</span> <span class="hljs-built_in">unknown</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">Parent</span><br>      p.<span class="hljs-property">children</span> = p.<span class="hljs-property">children</span>.<span class="hljs-title function_">flatMap</span>(<span class="hljs-function">(<span class="hljs-params">item, i</span>) =&gt;</span> <span class="hljs-title function_">transform</span>(item, i, p)) <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span><br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">fn</span>(node, i, parent)<br>  }<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">transform</span>(tree, <span class="hljs-number">0</span>, <span class="hljs-literal">undefined</span>)[<span class="hljs-number">0</span>] <span class="hljs-keyword">as</span> T<br>}<br></code></pre></td></tr></tbody></table></figure><p>使用 <code>flatMap</code> 重新完成它</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> { fromMarkdown, toMarkdown } <span class="hljs-keyword">from</span> <span class="hljs-string">'../parse'</span><br><span class="hljs-keyword">import</span> { flatMap } <span class="hljs-keyword">from</span> <span class="hljs-string">'../utils'</span><br><span class="hljs-keyword">import</span> { <span class="hljs-title class_">Strong</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'mdast'</span><br><br><span class="hljs-keyword">const</span> s = <span class="hljs-string">'## Hello **World**!'</span><br><span class="hljs-keyword">const</span> root = <span class="hljs-title function_">fromMarkdown</span>(s)<br><span class="hljs-title function_">flatMap</span>(root, <span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span><br>  item.<span class="hljs-property">type</span> === <span class="hljs-string">'strong'</span> ? (item <span class="hljs-keyword">as</span> <span class="hljs-title class_">Strong</span>).<span class="hljs-property">children</span> : [item],<br>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">toMarkdown</span>(root)) <span class="hljs-comment">// ## Hello World!</span><br></code></pre></td></tr></tbody></table></figure><p>嗯，只需要一步就完成了。嗯，为了性能吾辈并未将 flatMap 实现为返回一个新的 ast，当然，如果期望如此，无论如何都可以使用 immer 之类的库来实现 immutable。</p><h3 id="转换链接"><a href="#转换链接" class="headerlink" title="转换链接"></a>转换链接</h3><p>好吧，来看一些真实的需求<br>第一个是修改 markdown 中的链接，例如希望将链接中的资源都转换为 cdn 地址，这里使用 google photos 作为示例</p><p>原始 markdown 内容</p><figure class="highlight md"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs md">![<span class="hljs-string">test</span>](<span class="hljs-link">resources/aaefd6438fcd48d68f62fc2478f1f857.png</span>)<br>![<span class="hljs-string">1669384280333.png</span>](<span class="hljs-link">https://lh3.googleusercontent.com/pw/AL9nZEUmvKBtRxGeG-J-0oVDVmdZccu0E0_HiDHaMPlvWBLp1v2wjaA152s9FxkIRFZROAChN-tYgimcK-ZYBFD_KGya40RzSKfDTVJqvoXjg5CsBmAaJPurSPdDmaDm6Bcunj4IxL_YPBnwtH0h7XdwaUxN=w1600-h1200-no</span>)<br></code></pre></td></tr></tbody></table></figure><p>希望转换得到的 markdown 内容，即为 google 图片的地址添加代理服务，避免无法在 blog 显示的错误。同时也不能转换不相关的资源</p><figure class="highlight md"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs md">![<span class="hljs-string">test</span>](<span class="hljs-link">resources/aaefd6438fcd48d68f62fc2478f1f857.png</span>)<br>![<span class="hljs-string">1669384280333.png</span>](<span class="hljs-link">https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEUmvKBtRxGeG-J-0oVDVmdZccu0E0_HiDHaMPlvWBLp1v2wjaA152s9FxkIRFZROAChN-tYgimcK-ZYBFD_KGya40RzSKfDTVJqvoXjg5CsBmAaJPurSPdDmaDm6Bcunj4IxL_YPBnwtH0h7XdwaUxN=w1600-h1200-no</span>)<br></code></pre></td></tr></tbody></table></figure><p>实际上这件事情很简单，我们只需要过滤出来需要的节点并且修改就好了</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> { fromMarkdown, toMarkdown } <span class="hljs-keyword">from</span> <span class="hljs-string">'../parse'</span><br><span class="hljs-keyword">import</span> { <span class="hljs-title class_">Image</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'mdast'</span><br><span class="hljs-keyword">import</span> { selectAll } <span class="hljs-keyword">from</span> <span class="hljs-string">'unist-util-select'</span><br><br><span class="hljs-keyword">const</span> s = <span class="hljs-string">`</span><br><span class="hljs-string">![test](resources/aaefd6438fcd48d68f62fc2478f1f857.png)</span><br><span class="hljs-string">![1669384280333.png](https://lh3.googleusercontent.com/pw/AL9nZEUmvKBtRxGeG-J-0oVDVmdZccu0E0_HiDHaMPlvWBLp1v2wjaA152s9FxkIRFZROAChN-tYgimcK-ZYBFD_KGya40RzSKfDTVJqvoXjg5CsBmAaJPurSPdDmaDm6Bcunj4IxL_YPBnwtH0h7XdwaUxN=w1600-h1200-no)</span><br><span class="hljs-string">`</span>.<span class="hljs-title function_">trim</span>()<br><span class="hljs-keyword">const</span> root = <span class="hljs-title function_">fromMarkdown</span>(s)<br>;(<span class="hljs-title function_">selectAll</span>(<span class="hljs-string">'image'</span>, root) <span class="hljs-keyword">as</span> <span class="hljs-title class_">Image</span>[])<br>  .<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span><br>    item.<span class="hljs-property">url</span>.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">'https://lh3.googleusercontent.com/pw/'</span>),<br>  )<br>  .<span class="hljs-title function_">forEach</span>(<br>    <span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> (item.<span class="hljs-property">url</span> = <span class="hljs-string">`https://image-proxy.rxliuli.com/?url=<span class="hljs-subst">${item.url}</span>`</span>),<br>  )<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">toMarkdown</span>(root))<br></code></pre></td></tr></tbody></table></figure><h3 id="修改元数据"><a href="#修改元数据" class="headerlink" title="修改元数据"></a>修改元数据</h3><p>我们还可以修改 markdown 的元数据，例如我们从 hexo 转换为 hugo 时，会需要转换它们的元数据。</p><p>例如 hexo 的元数据一般格式是</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">layout:</span> <span class="hljs-string">post</span><br><span class="hljs-attr">title:</span> <span class="hljs-number">2</span><span class="hljs-string">.</span> <span class="hljs-string">Importing</span> <span class="hljs-string">and</span> <span class="hljs-string">exporting</span> <span class="hljs-string">notes</span><br><span class="hljs-attr">abbrlink:</span> <span class="hljs-string">2ba8366ac77c4a93b9eb7595d1343eb6</span><br><span class="hljs-attr">tags:</span> []<br><span class="hljs-attr">date:</span> <span class="hljs-number">1667644025956</span><br><span class="hljs-attr">updated:</span> <span class="hljs-number">1667644025956</span><br></code></pre></td></tr></tbody></table></figure><p>而 hugo 的是</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">title:</span> <span class="hljs-number">2</span><span class="hljs-string">.</span> <span class="hljs-string">Importing</span> <span class="hljs-string">and</span> <span class="hljs-string">exporting</span> <span class="hljs-string">notes</span><br><span class="hljs-attr">slug:</span> <span class="hljs-string">2ba8366ac77c4a93b9eb7595d1343eb6</span><br><span class="hljs-attr">tags:</span> []<br><span class="hljs-attr">date:</span> <span class="hljs-number">2022-11-05T10:27:05.956Z</span><br><span class="hljs-attr">lastmod:</span> <span class="hljs-number">2022-11-05T10:27:05.956Z</span><br></code></pre></td></tr></tbody></table></figure><p>无论如何，它们的 markdown 不会完全一样，这时候我们需要做一些简单的转换。</p><p>首先我们还是先封装 getYamlMeta/setYamlMeta 这些工具函数吧</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> { <span class="hljs-title class_">Root</span>, <span class="hljs-variable constant_">YAML</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'mdast'</span><br><span class="hljs-keyword">import</span> { select } <span class="hljs-keyword">from</span> <span class="hljs-string">'unist-util-select'</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> yaml <span class="hljs-keyword">from</span> <span class="hljs-string">'yaml'</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取 markdown 的 yaml 元数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> <span class="hljs-variable">root</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> getYamlMeta&lt;T&gt;(<span class="hljs-attr">root</span>: <span class="hljs-title class_">Root</span>): T {<br>  <span class="hljs-keyword">const</span> r = <span class="hljs-title function_">select</span>(<span class="hljs-string">'yaml'</span>, root)<br>  <span class="hljs-keyword">return</span> yaml.<span class="hljs-title function_">parse</span>(r ? (r <span class="hljs-keyword">as</span> <span class="hljs-variable constant_">YAML</span>).<span class="hljs-property">value</span> : <span class="hljs-string">''</span>)<br>}<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 设置 markdown 的 yaml 元数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> <span class="hljs-variable">root</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">setYamlMeta</span>(<span class="hljs-params">root: Root, meta: <span class="hljs-built_in">any</span></span>) {<br>  <span class="hljs-keyword">const</span> r = <span class="hljs-title function_">select</span>(<span class="hljs-string">'yaml'</span>, root) <span class="hljs-keyword">as</span> <span class="hljs-variable constant_">YAML</span><br>  <span class="hljs-keyword">if</span> (r) {<br>    r.<span class="hljs-property">value</span> = yaml.<span class="hljs-title function_">stringify</span>(meta).<span class="hljs-title function_">trim</span>()<br>  } <span class="hljs-keyword">else</span> {<br>    root.<span class="hljs-property">children</span>.<span class="hljs-title function_">unshift</span>({<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">'yaml'</span>,<br>      <span class="hljs-attr">value</span>: yaml.<span class="hljs-title function_">stringify</span>(meta).<span class="hljs-title function_">trim</span>(),<br>    } <span class="hljs-keyword">as</span> <span class="hljs-variable constant_">YAML</span>)<br>  }<br>}<br></code></pre></td></tr></tbody></table></figure><p>然后就可以简单的修改元数据了</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> { fromMarkdown, toMarkdown } <span class="hljs-keyword">from</span> <span class="hljs-string">'../parse'</span><br><span class="hljs-keyword">import</span> { getYamlMeta, setYamlMeta } <span class="hljs-keyword">from</span> <span class="hljs-string">'../utils'</span><br><br><span class="hljs-keyword">const</span> s = <span class="hljs-string">`</span><br><span class="hljs-string">---</span><br><span class="hljs-string">layout: post</span><br><span class="hljs-string">title: 2. Importing and exporting notes</span><br><span class="hljs-string">abbrlink: 2ba8366ac77c4a93b9eb7595d1343eb6</span><br><span class="hljs-string">tags: []</span><br><span class="hljs-string">date: 1667644025956</span><br><span class="hljs-string">updated: 1667644025956</span><br><span class="hljs-string">---</span><br><span class="hljs-string">`</span>.<span class="hljs-title function_">trim</span>()<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">HexoMeta</span> {<br>  <span class="hljs-attr">layout</span>: <span class="hljs-built_in">string</span><br>  <span class="hljs-attr">title</span>: <span class="hljs-built_in">string</span><br>  <span class="hljs-attr">abbrlink</span>: <span class="hljs-built_in">string</span><br>  <span class="hljs-attr">tags</span>: <span class="hljs-built_in">string</span>[]<br>  <span class="hljs-attr">date</span>: <span class="hljs-built_in">number</span><br>  <span class="hljs-attr">updated</span>: <span class="hljs-built_in">number</span><br>}<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">HugoMeta</span> {<br>  <span class="hljs-attr">title</span>: <span class="hljs-built_in">string</span><br>  <span class="hljs-attr">slug</span>: <span class="hljs-built_in">string</span><br>  <span class="hljs-attr">tags</span>: <span class="hljs-built_in">string</span>[]<br>  <span class="hljs-attr">date</span>: <span class="hljs-built_in">string</span><br>  <span class="hljs-attr">lastmod</span>: <span class="hljs-built_in">string</span><br>}<br><span class="hljs-keyword">const</span> root = <span class="hljs-title function_">fromMarkdown</span>(s)<br><span class="hljs-keyword">const</span> meta = <span class="hljs-title function_">getYamlMeta</span>(root) <span class="hljs-keyword">as</span> <span class="hljs-title class_">HexoMeta</span><br><span class="hljs-title function_">setYamlMeta</span>(root, {<br>  <span class="hljs-attr">title</span>: meta.<span class="hljs-property">title</span>,<br>  <span class="hljs-attr">slug</span>: meta.<span class="hljs-property">abbrlink</span>,<br>  <span class="hljs-attr">tags</span>: meta.<span class="hljs-property">tags</span>,<br>  <span class="hljs-attr">date</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(meta.<span class="hljs-property">date</span>).<span class="hljs-title function_">toISOString</span>(),<br>  <span class="hljs-attr">lastmod</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(meta.<span class="hljs-property">updated</span>).<span class="hljs-title function_">toISOString</span>(),<br>} <span class="hljs-keyword">as</span> <span class="hljs-title class_">HugoMeta</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">toMarkdown</span>(root))<br></code></pre></td></tr></tbody></table></figure><h3 id="清除额外的空格"><a href="#清除额外的空格" class="headerlink" title="清除额外的空格"></a>清除额外的空格</h3><p>可能不太为人所知的是，markdown 对东亚字符的支持一直有问题，一个之前遇到的例子是如果粗体的结尾使用中文符号，则粗体不会生效。</p><p>例如</p><figure class="highlight md"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs md"><span class="hljs-strong">**真没想到我这么快就要死了，**</span>她有些自暴自弃地想着。<br></code></pre></td></tr></tbody></table></figure><p>会被渲染为</p><p>**真没想到我这么快就要死了，**她有些自暴自弃地想着。</p><p>这很奇怪，但确实存在，commonmark 的实现 markdown-it 官方的建议是添加额外的空格，例如修改为</p><figure class="highlight md"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs md"><span class="hljs-strong">**真没想到我这么快就要死了，**</span> 她有些自暴自弃地想着。<br></code></pre></td></tr></tbody></table></figure><p>这样就能正确渲染粗体了</p><p><strong>真没想到我这么快就要死了，</strong> 她有些自暴自弃地想着。</p><p>但这会渲染额外的空格，如果期望最终 html 中不渲染这个额外的空格怎么办？可以使用程序删除掉它。<br>这里有两种方法</p><ol><li>直接修改 markdown ast 清除空格</li><li>转换为 html 语法树之后再修改</li></ol><p>由于这里更关注 markdown，所以会采用第一种方法</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> { <span class="hljs-title class_">Strong</span>, <span class="hljs-title class_">Text</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'mdast'</span><br><span class="hljs-keyword">import</span> { fromMarkdown } <span class="hljs-keyword">from</span> <span class="hljs-string">'../parse'</span><br><span class="hljs-keyword">import</span> { toHtml } <span class="hljs-keyword">from</span> <span class="hljs-string">'../stringify'</span><br><span class="hljs-keyword">import</span> { flatMap } <span class="hljs-keyword">from</span> <span class="hljs-string">'../utils'</span><br><br><span class="hljs-keyword">const</span> s = <span class="hljs-string">`**真没想到我这么快就要死了，** 她有些自暴自弃地想着。`</span><br><span class="hljs-keyword">const</span> root = <span class="hljs-title function_">fromMarkdown</span>(s)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">toHtml</span>(root)) <span class="hljs-comment">// &lt;p&gt;&lt;strong&gt;真没想到我这么快就要死了，&lt;/strong&gt; 她有些自暴自弃地想着。&lt;/p&gt;</span><br><span class="hljs-title function_">flatMap</span>(root, <span class="hljs-function">(<span class="hljs-params">item, i, p</span>) =&gt;</span> {<br>  <span class="hljs-keyword">if</span> (item.<span class="hljs-property">type</span> === <span class="hljs-string">'strong'</span>) {<br>    <span class="hljs-keyword">const</span> v = item <span class="hljs-keyword">as</span> <span class="hljs-title class_">Strong</span><br>    <span class="hljs-keyword">const</span> next = p!.<span class="hljs-property">children</span>[i + <span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">const</span> s = (v.<span class="hljs-property">children</span>[<span class="hljs-number">0</span>] <span class="hljs-keyword">as</span> <span class="hljs-title class_">Text</span>).<span class="hljs-property">value</span><br>    <span class="hljs-keyword">if</span> (s) {<br>      <span class="hljs-keyword">const</span> last = s.<span class="hljs-title function_">slice</span>(s.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>)<br>      <span class="hljs-keyword">if</span> (<br>        next &amp;&amp;<br>        next.<span class="hljs-property">type</span> === <span class="hljs-string">'text'</span> &amp;&amp;<br>        [<span class="hljs-string">'，'</span>, <span class="hljs-string">'。'</span>, <span class="hljs-string">'？'</span>, <span class="hljs-string">'！'</span>, <span class="hljs-string">'〉'</span>].<span class="hljs-title function_">includes</span>(last) &amp;&amp;<br>        next.<span class="hljs-property">value</span>.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">' '</span>)<br>      ) {<br>        next.<span class="hljs-property">value</span> = next.<span class="hljs-property">value</span>.<span class="hljs-title function_">trim</span>()<br>      }<br>    }<br>  }<br>  <span class="hljs-keyword">return</span> [item]<br>})<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">toHtml</span>(root)) <span class="hljs-comment">// &lt;p&gt;&lt;strong&gt;真没想到我这么快就要死了，&lt;/strong&gt;她有些自暴自弃地想着。&lt;/p&gt;</span><br></code></pre></td></tr></tbody></table></figure><h3 id="创建插件"><a href="#创建插件" class="headerlink" title="创建插件"></a>创建插件</h3><p>现在，我们可以来谈一下 mdast 中的插件了，更准确的说是 mdast-util-from-markdown/mdast-util-to-markdown 所支持的插件系统。我们上面写的那些其实都可以封装为插件</p><p>例如最初的转换链接可以封装为插件，可以封装为 MdastExtensions 插件以便在 transforms hooks 中转换 ast</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> { fromMarkdown, toMarkdown } <span class="hljs-keyword">from</span> <span class="hljs-string">'../parse'</span><br><span class="hljs-keyword">import</span> { <span class="hljs-title class_">Image</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'mdast'</span><br><span class="hljs-keyword">import</span> { selectAll } <span class="hljs-keyword">from</span> <span class="hljs-string">'unist-util-select'</span><br><span class="hljs-keyword">import</span> { <span class="hljs-title class_">Extension</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'mdast-util-from-markdown'</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">googleImageProxyFromMarkdown</span>(<span class="hljs-params"></span>): <span class="hljs-title class_">Extension</span> {<br>  <span class="hljs-keyword">return</span> {<br>    <span class="hljs-attr">transforms</span>: [<br>      <span class="hljs-function">(<span class="hljs-params">root</span>) =&gt;</span> {<br>        ;(<span class="hljs-title function_">selectAll</span>(<span class="hljs-string">'image'</span>, root) <span class="hljs-keyword">as</span> <span class="hljs-title class_">Image</span>[])<br>          .<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span><br>            item.<span class="hljs-property">url</span>.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">'https://lh3.googleusercontent.com/pw/'</span>),<br>          )<br>          .<span class="hljs-title function_">forEach</span>(<br>            <span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span><br>              (item.<span class="hljs-property">url</span> = <span class="hljs-string">`https://image-proxy.rxliuli.com/?url=<span class="hljs-subst">${item.url}</span>`</span>),<br>          )<br>      },<br>    ],<br>  }<br>}<br><span class="hljs-keyword">const</span> root = <span class="hljs-title function_">fromMarkdown</span>(s, {<br>  <span class="hljs-attr">mdastExtensions</span>: [<span class="hljs-title function_">googleImageProxyFromMarkdown</span>()],<br>})<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">toMarkdown</span>(root))<br></code></pre></td></tr></tbody></table></figure><p>也可以封装为输出插件，在 handlers hooks 中处理 image 类型的 ast</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> { fromMarkdown, toMarkdown } <span class="hljs-keyword">from</span> <span class="hljs-string">'../parse'</span><br><span class="hljs-keyword">import</span> { <span class="hljs-title class_">Image</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'mdast'</span><br><span class="hljs-keyword">import</span> { <span class="hljs-title class_">Options</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'mdast-util-to-markdown'</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">googleImageProxyToMarkdown</span>(<span class="hljs-params"></span>): <span class="hljs-title class_">Options</span> {<br>  <span class="hljs-keyword">return</span> {<br>    <span class="hljs-attr">handlers</span>: {<br>      <span class="hljs-title function_">image</span>(<span class="hljs-params">node</span>) {<br>        <span class="hljs-keyword">const</span> l = node <span class="hljs-keyword">as</span> <span class="hljs-title class_">Image</span><br>        <span class="hljs-keyword">if</span> (l.<span class="hljs-property">url</span>.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">'https://lh3.googleusercontent.com/pw/'</span>)) {<br>          l.<span class="hljs-property">url</span> = <span class="hljs-string">`https://image-proxy.rxliuli.com/?url=<span class="hljs-subst">${l.url}</span>`</span><br>        }<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">`![<span class="hljs-subst">${l.alt}</span>](<span class="hljs-subst">${l.url}</span>)`</span><br>      },<br>    },<br>  }<br>}<br><span class="hljs-keyword">const</span> root = <span class="hljs-title function_">fromMarkdown</span>(s)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<br>  <span class="hljs-title function_">toMarkdown</span>(root, {<br>    <span class="hljs-attr">extensions</span>: [<span class="hljs-title function_">googleImageProxyToMarkdown</span>()],<br>  }),<br>)<br></code></pre></td></tr></tbody></table></figure><p>就吾辈而言，一般不会将这种操作封装为插件，而是封装为简单的函数，接收一个 ast 并返回一个 ast 的函数，在需要时直接使用即可。除非一些明显适合使用插件的场景，例如要支持新的语法，例如 <code>[[wiki]]</code> 链接之类的，对这个插件感兴趣可以查看 <a href="https://github.com/rxliuli/mami/blob/master/packages/plugin-obsidian/src/utils/wiki.ts">https://github.com/rxliuli/mami/blob/master/packages/plugin-obsidian/src/utils/wiki.ts</a>。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>markdown 是一个有趣的格式，现在几乎所有开发者相关的平台（非国内）都支持它，所以自然而然衍生了很多相关的工具和模块，而基于个人独特的需求则衍生了更多的东西。就吾辈而言，吾辈创建的与 markdown 相关的工具或库包括</p><ul><li><a href="https://marketplace.visualstudio.com/items?itemName=rxliuli.joplin-vscode-plugin">joplin-vscode-plugin</a>: joplin 的 vscode 集成，基于 vscode 提供强大的编辑功能</li><li><a href="https://mami.rxliuli.com/">mami</a>: 跨工具的 note/blog/wiki 转换器，目前支持 joplin/obsidian/hexo/hugo/docsify/local/raw</li><li><a href="https://github.com/rxliuli/mdbook">mdbook</a>: markdown 转换为 epub 的工具，自行实现的主要原因是需要处理中文支持</li><li><a href="https://www.npmjs.com/package/@liuli-util/markdown-util">@liuli-util/markdown-util</a>: 一个 markdown 工具库，将上面那些零散的模块统一导出使用，mami/mdbook 都使用它</li><li><a href="https://www.npmjs.com/package/joplin-blog">joplin-blog</a>: 从 joplin 生成静态网站，支持 hexo/vuepress/docsify/jeykll，已被 mami 替代</li><li><a href="https://github.com/rxliuli/markdown-extension-pack">markdown-extension-pack</a>: 4 年前的一个项目，尝试 pack 了一些常用的 markdown 插件</li></ul>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    <category term="前端" scheme="https://blog.rxliuli.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="框架" scheme="https://blog.rxliuli.com/categories/%E5%89%8D%E7%AB%AF/%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="markdown" scheme="https://blog.rxliuli.com/tags/markdown/"/>
    
    <category term="ast" scheme="https://blog.rxliuli.com/tags/ast/"/>
    
  </entry>
  
  <entry>
    <title>mami 一个跨工具文档转换器</title>
    <link href="https://blog.rxliuli.com/p/a657a02fccca4f788fb864f2ec8ebfa0/"/>
    <id>https://blog.rxliuli.com/p/a657a02fccca4f788fb864f2ec8ebfa0/</id>
    <published>2022-10-11T15:51:55.884Z</published>
    <updated>2022-11-05T04:45:35.936Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近在写的一个工具，用以连接不同的工具，使它们的数据能够相互转换，主要用例是多平台发布和跨应用迁移，例如从 joplin/obsidian 笔记中选择一部分通过 hexo/hugo 渲染为 blog 共享给别人，事实上，现在你看到这个 blog 就是这样生成出来的。</p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>mami 是一个转换工具，可以连接不同的基于 markdown 框架和工具，能将一种工具的数据转换到另一种工具，这对于跨应用迁移以及多平台发布很有帮助，目前已支持 <code>joplin/obsidian/hexo/hugo/raw</code>，计划将支持 <code>docsify/vuepress</code>。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote><p>前置条件</p><ul><li>你需要安装 <a href="https://nodejs.org/en/download/">nodejs 18</a></li></ul></blockquote><h3 id="步骤-1：创建新项目"><a href="#步骤-1：创建新项目" class="headerlink" title="步骤 1：创建新项目"></a>步骤 1：创建新项目</h3><blockquote><p>下面使用 pnpm 作为包管理器，但你可以替换它为 npm</p></blockquote><p>创建新目录并进入</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> mami-starter &amp;&amp; <span class="hljs-built_in">cd</span> mami-starter<br></code></pre></td></tr></tbody></table></figure><p>然后使用喜欢的包管理器初始化</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pnpm init<br></code></pre></td></tr></tbody></table></figure><h3 id="步骤-2：安装-mami"><a href="#步骤-2：安装-mami" class="headerlink" title="步骤 2：安装 mami"></a>步骤 2：安装 mami</h3><p>添加 @mami/cli 和 typescript 作为项目的开发依赖项</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pnpm i -D @mami/cli typescript<br></code></pre></td></tr></tbody></table></figure><p>添加一些脚本到 <code>package.json</code></p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">{</span><br>  ...<br>  <span class="hljs-attr">"scripts"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span><br>    <span class="hljs-attr">"gen"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"mami"</span><br>  <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span><br>  ...<br><span class="hljs-punctuation">}</span><br></code></pre></td></tr></tbody></table></figure><p>创建你的配置文件 <code>mami.config.ts</code></p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> { defineConfig } <span class="hljs-keyword">from</span> <span class="hljs-string">'@mami/cli'</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>({<br>  <span class="hljs-attr">input</span>: [],<br>  <span class="hljs-attr">output</span>: [],<br>})<br></code></pre></td></tr></tbody></table></figure><p>然后运行</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ pnpm run gen<br><br>&gt; joplin2obsidian-demo@1.0.0 gen<br>&gt; mami<br><br>start<br>end<br></code></pre></td></tr></tbody></table></figure><p>嗯，什么也没有发生，因为你没有定义输入或输出插件。继续看下一步。</p><h3 id="步骤-3：安装需要的插件"><a href="#步骤-3：安装需要的插件" class="headerlink" title="步骤 3：安装需要的插件"></a>步骤 3：安装需要的插件</h3><p>安装需要的插件，用来连接需要的工具，这里使用 joplin =&gt; obsidian 来举例</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts">pnpm i -D <span class="hljs-meta">@mami</span>/plugin-joplin <span class="hljs-meta">@mami</span>/plugin-obsidian<br></code></pre></td></tr></tbody></table></figure><p>修改你的配置文件 <code>mami.config.ts</code></p><blockquote><p>这里的 joplin 插件需要的 token 来自 <a href="https://joplinapp.org/clipper/#troubleshooting-the-web-clipper-service">web clipper service</a></p></blockquote><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> { defineConfig } <span class="hljs-keyword">from</span> <span class="hljs-string">'@mami/cli'</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> joplin <span class="hljs-keyword">from</span> <span class="hljs-string">'@mami/plugin-joplin'</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> obsidian <span class="hljs-keyword">from</span> <span class="hljs-string">'@mami/plugin-obsidian'</span><br><span class="hljs-keyword">import</span> path <span class="hljs-keyword">from</span> <span class="hljs-string">'path'</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>({<br>  <span class="hljs-attr">input</span>: [<br>    joplin.<span class="hljs-title function_">input</span>({<br>      <span class="hljs-attr">baseUrl</span>: <span class="hljs-string">'http://127.0.0.1:41184'</span>,<br>      <span class="hljs-attr">token</span>:<br>        <span class="hljs-string">'5bcfa49330788dd68efea27a0a133d2df24df68c3fd78731eaa9914ef34811a34a782233025ed8a651677ec303de6a04e54b57a27d48898ff043fd812d8e0b31'</span>,<br>      <span class="hljs-attr">tag</span>: <span class="hljs-string">''</span>,<br>    }),<br>  ],<br>  <span class="hljs-attr">output</span>: [<br>    obsidian.<span class="hljs-title function_">output</span>({<br>      <span class="hljs-attr">root</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">'dist'</span>),<br>    }),<br>  ],<br>})<br></code></pre></td></tr></tbody></table></figure><h3 id="步骤-4：执行转换"><a href="#步骤-4：执行转换" class="headerlink" title="步骤 4：执行转换"></a>步骤 4：执行转换</h3><p>然后，你可以重新运行以下命令</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pnpm run gen<br></code></pre></td></tr></tbody></table></figure><p>现在，你将能在 dist 中看到转换的 obsidian 文件</p><blockquote><p><a href="https://github.com/rxliuli/mami/tree/master/demos/joplin2obsidian-demo">示例</a></p></blockquote><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><blockquote><p><a href="https://paka.dev/npm/@mami/cli@latest/api">API 文档</a></p></blockquote><p>大致上，插件分为输入和输出插件，输入插件会返回一个 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator">AsyncGenerator</a>，而输出插件则会在钩子函数中消费它。</p><p><img src="/resources/3a914293ca6f46f79d0cac4b57046533.svg" alt="design.drawio.svg"></p><p>中间格式</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">{</span><br>  <span class="hljs-attr">"id"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"0e2510c9272449dbafe3e0f3fba12d74"</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">"title"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"Welcome to Joplin!"</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">"content"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"content body"</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">"createAt"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1666288266591</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">"updateAt"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1666288266591</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">"path"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">"Welcome! (Desktop)"</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">"tags"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">{</span><br>      <span class="hljs-attr">"id"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"04dfa5cf19e4435f9f3f09a73a7edfb2"</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"title"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"blog"</span><br>    <span class="hljs-punctuation">}</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">"resources"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">{</span><br>      <span class="hljs-attr">"id"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"63b83e548b7b4adfae18544b7038b0bc"</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"title"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"AllClients.png"</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"raw"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"&lt;nodejs buffer&gt;"</span><br>    <span class="hljs-punctuation">}</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">}</span><br></code></pre></td></tr></tbody></table></figure><p>编写插件涉及到一些 markdown ast 操作，例如你可能需要转换 markdown 中的链接，建议使用 <a href="https://github.com/syntax-tree/mdast">mdast</a> 来处理。</p><h2 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h2><blockquote><p>如果你不知道 joplin-blog 是什么，那我简要介绍一下：它是一个将 joplin 笔记转换为其他形式的内容的 cli 工具，支持了 hexo、vuepress、docsify、jeykll 这些 blog/wiki 框架。ref: <a href="https://discourse.joplinapp.org/t/joplin-note-sharing-tool/13480">https://discourse.joplinapp.org/t/joplin-note-sharing-tool/13480</a></p></blockquote><p>为什么开始了这次重写？</p><p>主要原因是目前支持了一些框架，但实际上仍然不够，就吾辈而言，目前接触到了 vitepress 文档生成器，吾辈打算用它替代 vuepress，但这需要对 joplin-blog 做一些修改，实际上这并不太方便。之前也有人提到如何更有定制性的生成文件，例如在生成的 markdown 添加额外的 yaml meta 信息（ref: <a href="https://github.com/rxliuli/joplin-utils/issues/55">https://github.com/rxliuli/joplin-utils/issues/55</a>），这实际上在没有扩展点的情况下有点麻烦，那时给出的临时解决方案是以 lib 的形式使用 joplin-blog，并插入自定义的一些逻辑来完成。也有人提到了支持 hugo，但全部在 joplin-blog 中实现是不显示的。</p><p>后来，吾辈意识到支持生成任意框架的文件需要插件系统，进一步而言，吾辈甚至可以将输入源（例如 joplin）也作为插件，就像 pandoc 一样，连接不同的笔记、博客和 wiki 工具。目前做的一个尝试就是 mami，打算通过 markdown 作为中间格式进行转换。<br>目前这个项目才刚刚创建，并且仅支持 joplin 作为输入源、hexo/hugo/obsidian 作为输出源，但吾辈已经在自己的 blog 中使用了，参考：<a href="https://github.com/rxliuli/blog/blob/master/mami.config.ts">https://github.com/rxliuli/blog/blob/master/mami.config.ts</a></p><blockquote><p>PS：mami 这个名字的来源是 Puella Magi Madoka Magica 中的 <a href="https://en.wikipedia.org/wiki/Mami_Tomoe">Mami Tomoe</a>，她的魔法是<strong>缎带</strong>，可以连接各种不同的事物，甚至能组成火枪（笑）。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    <category term="前端" scheme="https://blog.rxliuli.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="框架" scheme="https://blog.rxliuli.com/categories/%E5%89%8D%E7%AB%AF/%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="开源" scheme="https://blog.rxliuli.com/tags/%E5%BC%80%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>vite-不仅仅是一个构建工具</title>
    <link href="https://blog.rxliuli.com/p/0987a1de82694970851755d02920bc6e/"/>
    <id>https://blog.rxliuli.com/p/0987a1de82694970851755d02920bc6e/</id>
    <published>2022-10-09T01:02:30.296Z</published>
    <updated>2022-10-13T04:34:11.390Z</updated>
    
    <content type="html"><![CDATA[<p>自 vite 发布第一个版本（2020-04）以来，已经过去了两年，最近它发布了 3.0，不过没有太多 break change 的变化。或许有人已经在使用它了，但也有许多人看到是 vue 作者创建的工具就绕道走过去，因为 vue 生态里的工具历来是 vue 锁定，无法在其他生态中使用，像是 vuex/pinia 之类的，而 redux/mobx 却可以在 vue 中使用。尽管 vite 1.0 默认仅支持 vue，但在 2.0 中改变了一切，默认不再支持任何框架（好吧，由于 esbuild 的原因，其实是默认支持 react 的），而是通过插件完成对框架的支持。</p><p>目前已默认支持的 ui 框架</p><ul><li>vanilla</li><li>vue</li><li>react</li><li>preact</li><li>lit</li><li>svelte</li></ul><p>一些非官方的支持</p><ul><li>solid.js</li><li>qwik</li></ul><h2 id="依赖于-vite-的有名工具"><a href="#依赖于-vite-的有名工具" class="headerlink" title="依赖于 vite 的有名工具"></a>依赖于 vite 的有名工具</h2><ul><li><a href="https://vitest.dev/">vitest</a>: 一个单元测试工具，它很快，默认支持 esm，兼容 jest api，可以被视为更好的 jest</li><li><a href="https://github.com/vuejs/vitepress">vitepress</a>: 一个非常快的文档生成器，在文档数量非常大的情况下（例如 1k+），与其他工具会有数量级的性能差距</li><li><a href="https://github.com/tauri-apps">tauri</a>: 一个跨端应用开发工具</li><li><a href="https://astro.build/">astro</a>: 基于 vite 的构建工具</li></ul><p>事实上，目前 npm 中统计有 1k+ 的包直接依赖于 vite，参考：<a href="https://www.npmjs.com/package/vite?activeTab=dependents">https://www.npmjs.com/package/vite?activeTab=dependents</a></p><h2 id="vitest"><a href="#vitest" class="headerlink" title="vitest"></a>vitest</h2><p>在默认情况下，它支持以下吾辈关注的功能</p><ul><li>很快</li><li>支持 esm</li><li>支持 ts</li><li>兼容 jest api</li><li>支持 vite 的功能</li><li>支持多框架 react/vue</li></ul><p>目前，吾辈主要维护的几个社区 monorepo 项目都已经迁移到了 esm，测试工具全部由 jest =&gt; vitest，毕竟它真的太好用了。</p><blockquote><p>ref: <a href="https://vitest.dev/">https://vitest.dev/</a></p></blockquote><h2 id="vitepress"><a href="#vitepress" class="headerlink" title="vitepress"></a>vitepress</h2><p>性能</p><table><thead><tr><th>类型</th><th>vitepress</th><th>vuepress</th><th>docusaurus</th></tr></thead><tbody><tr><td>real</td><td>0m9.861s</td><td>0m18.649s</td><td>0m42.794s</td></tr><tr><td>user</td><td>0m0.015s</td><td>0m0.076s</td><td>0m0.077s</td></tr><tr><td>sys</td><td>0m0.151s</td><td>0m0.091s</td><td>0m0.106s</td></tr></tbody></table><p>站点基本信息</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ cloc books/<br>      83 text files.<br>      83 unique files.<br>      15 files ignored.<br><br>github.com/AlDanial/cloc v 1.94  T=0.52 s (158.4 files/s, 112091.4 lines/s)<br>-----------------------------------------------------<br>Language   files      blank      comment         code<br>-----------------------------------------------------<br>Markdown      83      29090            0        29645<br>-----------------------------------------------------<br>SUM:          83      29090            0        29645<br>-----------------------------------------------------<br></code></pre></td></tr></tbody></table></figure><p>字数</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ find books/ -name <span class="hljs-string">'*.md'</span> | xargs <span class="hljs-built_in">wc</span> -m | <span class="hljs-built_in">tail</span> -l<br>5071073 total<br></code></pre></td></tr></tbody></table></figure><p>在文档数量上升之后，vitepress 和其他生成器之间似乎有数量级的性能差异。在下面这个例子中，1000 个 md 文档的构建时间大约是 20 倍的差异</p><p>ref: <a href="https://github.com/vuepress/vuepress-next/issues/994">https://github.com/vuepress/vuepress-next/issues/994</a></p><p>在更大型的文档项目上实际测试</p><table><thead><tr><th>框架</th><th>时间</th></tr></thead><tbody><tr><td>vitepress</td><td>1m56.019s</td></tr><tr><td>vuepress</td><td>14m18.764s</td></tr><tr><td>docusaurus</td><td>36m39.857s</td></tr></tbody></table><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ cloc docs/<br>     914 text files.<br>     914 unique files.<br>       0 files ignored.<br><br>github.com/AlDanial/cloc v 1.94  T=2.60 s (351.5 files/s, 319491.6 lines/s)<br>-------------------------------------------------------------------------------<br>Language                     files          blank        comment           code<br>-------------------------------------------------------------------------------<br>Markdown                       914         371604              0         459249<br>-------------------------------------------------------------------------------<br>SUM:                           914         371604              0         459249<br>-------------------------------------------------------------------------------<br></code></pre></td></tr></tbody></table></figure><p>这 nodejs，真香！<br><img src="/resources/a83fcba3cb9b4e89979fa9c51cae86ab.png" alt="1665283372624.png"></p><blockquote><p>ref: <a href="https://vitepress.vuejs.org/">https://vitepress.vuejs.org/</a></p></blockquote><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>vite 的前身 snowpack 虽然已经死了，但它留下的遗产却被 vite 发扬光大，并且在扩展成为更大的社区，成为前端开发工具链的基础设施。</p><blockquote><p>ps1: 实际上，工作的生产项目已经全面使用 vite，虽然也遇到了一些边缘问题，例如 dev 过慢、build 超出内存限制之类的问题，但总体上仍然是目前 DX 最好的 web 构建工具。<br>ps2: 有趣的是，之前的前端工具分散而零碎，例如 webpack 负责 bundle、typescript/babel 负责转译、各种 loader 处理自定义的资源，一通配置与调试之后，你才可能将项目运行起来。更别说多个框架之间的配置和工具还往往不同，在跨框架共用方面实在糟糕。但 vite 却与之相反，默认支持所有常见功能，多框架只需要引入对应框架的插件即可，在需要时才需要深入研究插件和配置。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    <category term="前端" scheme="https://blog.rxliuli.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="框架" scheme="https://blog.rxliuli.com/categories/%E5%89%8D%E7%AB%AF/%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="工具" scheme="https://blog.rxliuli.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="vite" scheme="https://blog.rxliuli.com/tags/vite/"/>
    
  </entry>
  
  <entry>
    <title>闲谈网站的 Google 索引问题</title>
    <link href="https://blog.rxliuli.com/p/cb752f65aeee4661bf4f31fa7d2a2729/"/>
    <id>https://blog.rxliuli.com/p/cb752f65aeee4661bf4f31fa7d2a2729/</id>
    <published>2022-10-07T08:15:23.865Z</published>
    <updated>2022-10-07T08:55:06.596Z</updated>
    
    <content type="html"><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>从今年 2 月份以来，吾辈创建了一个 <a href="https://github.com/liuli-moe/to-the-stars">魔法少女小圆-飞向星空</a> 同人小说翻译的 GitHub 项目，并一直维护至今。最初，这个项目只是将目前几位作者的翻译打包为 epub 以便在手机和电子阅读器上阅读，同时避免国内网站删除、下架或不再维护网站而创建存档。后来，也使用工具从 markdown 中生成了网站。</p><blockquote><p>魔法少女小圆-飞向星空 的作品简介<br><img src="https://user-images.githubusercontent.com/24560368/156177284-33456fc7-53fc-4515-a4bd-48683ca88277.png" alt="cover"><br>在经历了几个世纪的动荡之后，一个乌托邦式的 AI— 人类政府治理着地球，预示着后稀缺社会的来临和太空殖民的新时代。一次意外的接触却让科技更先进的敌对外星种族打破了和平，这迫使魔法少女们走出幕后，拯救人类文明。在这一切之中，志筑良子，一个普通的女孩，仰望着星空，好奇着她在宇宙中的归所。</p><p>“丘比承诺说人类总有一天也能到达那遥远的星空。但它们很明智地没有说出来，人类将会在那里遇到什么。”—— 引言</p></blockquote><h2 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h2><p>之前，该网站使用 vuepress 生成，因为它看起来相当友好和简单，吾辈之前也在其他地方使用过它。但最近吾辈尝试为网站<a href="https://github.com/liuli-moe/to-the-stars/issues/22">添加搜索功能</a>，在调研中了解到 <a href="https://www.google.com/cse/">Google Custom Search Engine</a>，但实际测试中发现无法搜索有效内容。进一步调查中发现了是 Google 未正确索引网站，所以导致无法正常搜索。</p><p><img src="https://user-images.githubusercontent.com/24560368/192085971-f23a5fcb-6741-4367-be43-5072c80e158f.png" alt="index"></p><p>吾辈也观察了 vuepress 生成的内容，它会在 dist/ 下生成 index.html 和 404.html，而在使用 github pages 部署后，如果访问一个不存在的路径，会被自动导航到 404.html，然后通过 vue-router 渲染具体的页面内容（本质上还是 spa 网站），这就导致了 Google 搜索报告问题 <a href="https://support.google.com/webmasters/answer/7440203#not_found_404">未找到 (404)</a>，而这似乎在 vuepress 中没人关注。</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">├── 404.html<br>├── assets<br>├── CNAME<br>├── index.html<br>├── local-search.json<br>├── logo.png<br>├── logoDark.png<br>└── sitemap.xml<br></code></pre></td></tr></tbody></table></figure><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>于是，不得已之下，吾辈尝试寻找了 vuepress 的替代品，最终使用了 <a href="https://docusaurus.io/">docusaurus</a>。它与 vuepress 的基本目标相同，只是使用了不同的技术栈，吾辈在 <a href="https://github.com/liuli-moe/to-the-stars/issues/23">issue feat: 考虑迁移至 docusaurus</a> 中说明了它们的一些差异，但最关键的还是它生成的 bundle 中指向了实际的 .html 文件，这让 Google 索引很开心。</p><p><img src="/resources/c1231e694b074c4f84bf02c89193cd9d.png" alt="1665132275042.png"></p><p>同时，吾辈也将 sitemap 提交到了 bing，这让国内用户也可以搜索了。</p><p><img src="https://user-images.githubusercontent.com/24560368/194464064-c1097f9e-3ab4-4fd8-b660-7d2db1928a38.jpg" alt="google"><br><img src="https://user-images.githubusercontent.com/24560368/194463665-57c4e566-9712-4737-9596-df22705b258a.jpg" alt="bing"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>只是现有的搜索引擎都有一个问题，对于大量没有使用标题分割的内容效果并不好。例如小说网站，大量的内容是以 <code>&lt;p&gt;&lt;/p&gt;</code> 标签分割。这确实是一个烦人的问题，不过还是留到下一次再解决吧。</p><blockquote><p>其实在 vuepress 中尝试解决过，ref: <a href="https://github.com/liuli-moe/to-the-stars/issues/22#issuecomment-1253240061">https://github.com/liuli-moe/to-the-stars/issues/22#issuecomment-1253240061</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    <category term="其他" scheme="https://blog.rxliuli.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    <category term="杂谈" scheme="https://blog.rxliuli.com/categories/%E5%85%B6%E4%BB%96/%E6%9D%82%E8%B0%88/"/>
    
    
    <category term="开源" scheme="https://blog.rxliuli.com/tags/%E5%BC%80%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>代码生成-从环境变量生成类型定义</title>
    <link href="https://blog.rxliuli.com/p/d867b35e62454483ae697185d93617ab/"/>
    <id>https://blog.rxliuli.com/p/d867b35e62454483ae697185d93617ab/</id>
    <published>2022-09-29T12:18:51.145Z</published>
    <updated>2022-10-09T00:56:48.582Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>既之前的 <a href="/p/b8e8ce8bccff49d191480a40a18a7fc8">代码生成-从 module css 生成 dts</a> 之后，这篇来实现从环境变量生成接口，便于开发时能够有正确的类型提示。</p><h2 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h2><p>在前端日常开发中，环境变量经常用于区分不同环境的配置，最常见的像是服务端地址。但在使用时，往往不能得到提示，或是一个环境变量没有。</p><p>我们通常使用以下两种方式访问环境变量</p><p>在 vite 中使用 <code>import.meta.env</code></p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span><br></code></pre></td></tr></tbody></table></figure><p>在 vite importMeta.d.ts 中的类型定义为</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ImportMeta</span> {<br>  <span class="hljs-comment">// 其他属性。。。</span><br>  <span class="hljs-keyword">readonly</span> <span class="hljs-attr">env</span>: <span class="hljs-title class_">ImportMetaEnv</span><br>}<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ImportMetaEnv</span> {<br>  [<span class="hljs-attr">key</span>: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span><br>  <span class="hljs-attr">BASE_URL</span>: <span class="hljs-built_in">string</span><br>  <span class="hljs-attr">MODE</span>: <span class="hljs-built_in">string</span><br>  <span class="hljs-attr">DEV</span>: <span class="hljs-built_in">boolean</span><br>  <span class="hljs-attr">PROD</span>: <span class="hljs-built_in">boolean</span><br>  <span class="hljs-attr">SSR</span>: <span class="hljs-built_in">boolean</span><br>}<br></code></pre></td></tr></tbody></table></figure><p>或者在普通 nodejs 项目中使用 <code>process.env</code></p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts">process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span><br></code></pre></td></tr></tbody></table></figure><p>在 nodejs process.d.ts 中的类型定义为</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Dict</span>&lt;T&gt; {<br>  [<span class="hljs-attr">key</span>: <span class="hljs-built_in">string</span>]: T | <span class="hljs-literal">undefined</span><br>}<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ProcessEnv</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Dict</span>&lt;<span class="hljs-built_in">string</span>&gt; {<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Can be used to change the default timezone at runtime</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-variable constant_">TZ</span>?: <span class="hljs-built_in">string</span><br>}<br></code></pre></td></tr></tbody></table></figure><p>但无论如何，它们都不能定义一些项目中定制的环境变量，这需要我们手动完成。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>这里使用 vite 举例，如果需要在代码中使用 <code>import.meta.env</code> 时能够提示自定义的环境变量的话，需要在 <em>vite-env.d.ts</em> 中添加 <code>ImportMetaEnv</code>。<br>例如添加环境变量 VITE_PORT/VITE_AUTH_TOKEN 的类型定义</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ImportMetaEnv</span> {<br>  <span class="hljs-variable constant_">VITE_PORT</span>?: <span class="hljs-built_in">string</span><br>  <span class="hljs-variable constant_">VITE_AUTH_TOKEN</span>?: <span class="hljs-built_in">string</span><br>}<br></code></pre></td></tr></tbody></table></figure><p>现在，使用环境变量的流程变成：<strong>在 .env 中添加环境变量</strong> =&gt; <strong>在 vite-env.d.ts 中添加类型定义</strong> =&gt; <strong>在代码中使用环境变量</strong>，可以看到，我们基本上重复添加了两次环境变量，只是使用了不同的语法，这正是我们要解决的问题，从环境变量自动生成类型定义。</p><p><img src="/resources/3f4cd03fa7564d6a99abab7d2c11d826.svg" alt="从环境变量生成类型定义.drawio.svg"></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>获取环境变量的路径（vite 的环境变量类型定义文件发生过一次变化，需要做下兼容）</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getEnvPath</span>(<span class="hljs-params">cwd: <span class="hljs-built_in">string</span></span>) {<br>  <span class="hljs-keyword">let</span> envPath = path.<span class="hljs-title function_">resolve</span>(cwd, <span class="hljs-string">'src/vite-env.d.ts'</span>)<br><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">await</span> <span class="hljs-title function_">pathExists</span>(envPath)) {<br>    <span class="hljs-keyword">return</span> envPath<br>  }<br><br>  envPath = path.<span class="hljs-title function_">resolve</span>(cwd, <span class="hljs-string">'src/env.d.ts'</span>)<br><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">await</span> <span class="hljs-title function_">pathExists</span>(envPath)) {<br>    <span class="hljs-keyword">return</span> envPath<br>  }<br><br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">'未找到环境变量配置文件'</span>)<br>}<br></code></pre></td></tr></tbody></table></figure><p>扫描所有的环境变量</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">scan</span>(<span class="hljs-params">dir: <span class="hljs-built_in">string</span></span>): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">string</span>[]&gt; {<br>  <span class="hljs-keyword">const</span> files = <span class="hljs-keyword">await</span> <span class="hljs-title class_">FastGlob</span>(<span class="hljs-string">'.env*'</span>, {<br>    <span class="hljs-attr">cwd</span>: path.<span class="hljs-title function_">resolve</span>(dir),<br>  })<br><br>  <span class="hljs-keyword">const</span> configs = <span class="hljs-keyword">await</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>(<br>    files.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">file</span>) =&gt;</span> <span class="hljs-title function_">readFile</span>(path.<span class="hljs-title function_">resolve</span>(dir, file), <span class="hljs-string">'utf-8'</span>)),<br>  )<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">uniqueBy</span>(configs.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">s</span>) =&gt;</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(<span class="hljs-title function_">parse</span>(s))).<span class="hljs-title function_">flat</span>())<br>}<br></code></pre></td></tr></tbody></table></figure><p>对比环境变量与类型定义</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">eq</span>(<span class="hljs-params">a: <span class="hljs-built_in">string</span>[], b: <span class="hljs-built_in">string</span>[]</span>): <span class="hljs-built_in">boolean</span> {<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">f</span> = (<span class="hljs-params">a: <span class="hljs-built_in">string</span>, b: <span class="hljs-built_in">string</span></span>) =&gt; a.<span class="hljs-title function_">localeCompare</span>(b)<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>([...a].<span class="hljs-title function_">sort</span>(f)) === <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>([...b].<span class="hljs-title function_">sort</span>(f))<br>}<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getEnvs</span>(<span class="hljs-params">ast: n.ASTNode</span>): <span class="hljs-built_in">string</span>[] {<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">CodeUtil</span>.<span class="hljs-title function_">iterator</span>(ast, n.<span class="hljs-property">TSInterfaceDeclaration</span>)<br>    .<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> (item.<span class="hljs-property">id</span> <span class="hljs-keyword">as</span> n.<span class="hljs-property">Identifier</span>).<span class="hljs-property">name</span> === <span class="hljs-string">'ImportMetaEnv'</span>)<br>    .<span class="hljs-title function_">flatMap</span>(<span class="hljs-function">(<span class="hljs-params">ast</span>) =&gt;</span> <span class="hljs-title class_">CodeUtil</span>.<span class="hljs-title function_">iterator</span>(ast, n.<span class="hljs-property">TSPropertySignature</span>))<br>    .<span class="hljs-title function_">flatMap</span>(<span class="hljs-function">(<span class="hljs-params">ast</span>) =&gt;</span> <span class="hljs-title class_">CodeUtil</span>.<span class="hljs-title function_">iterator</span>(ast, n.<span class="hljs-property">Identifier</span>))<br>    .<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item.<span class="hljs-property">name</span>)<br>}<br></code></pre></td></tr></tbody></table></figure><p>修改类型定义</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">function</span> <span class="hljs-title function_">convert</span>(<span class="hljs-params">ast: n.ASTNode, envs: <span class="hljs-built_in">string</span>[]</span>): n.<span class="hljs-property">ASTNode</span> {<br>  <span class="hljs-keyword">let</span> envInterface = <span class="hljs-title class_">CodeUtil</span>.<span class="hljs-title function_">iterator</span>(ast, n.<span class="hljs-property">TSInterfaceDeclaration</span>).<span class="hljs-title function_">find</span>(<br>    <span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> (item.<span class="hljs-property">id</span> <span class="hljs-keyword">as</span> n.<span class="hljs-property">Identifier</span>).<span class="hljs-property">name</span> === <span class="hljs-string">'ImportMetaEnv'</span>,<br>  )<br><br>  <span class="hljs-keyword">if</span> (!envInterface) {<br>    envInterface = b.<span class="hljs-title function_">tsInterfaceDeclaration</span>(<br>      b.<span class="hljs-title function_">identifier</span>(<span class="hljs-string">'ImportMetaEnv'</span>),<br>      b.<span class="hljs-title function_">tsInterfaceBody</span>([]),<br>    )<br>    ;(ast <span class="hljs-keyword">as</span> n.<span class="hljs-property">File</span>).<span class="hljs-property">program</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">push</span>(envInterface)<br>  }<br><br>  envInterface.<span class="hljs-property">body</span>.<span class="hljs-property">body</span> = envs.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">name</span>) =&gt;</span><br>    b.<span class="hljs-property">tsPropertySignature</span>.<span class="hljs-title function_">from</span>({<br>      <span class="hljs-attr">key</span>: b.<span class="hljs-title function_">identifier</span>(name),<br>      <span class="hljs-attr">typeAnnotation</span>: b.<span class="hljs-title function_">tsTypeAnnotation</span>(b.<span class="hljs-title function_">tsStringKeyword</span>()),<br>      <span class="hljs-attr">readonly</span>: <span class="hljs-literal">true</span>,<br>    }),<br>  )<br><br>  <span class="hljs-keyword">return</span> ast<br>}<br></code></pre></td></tr></tbody></table></figure><p>最后，将它们连接起来</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">gen</span>(<span class="hljs-params">cwd: <span class="hljs-built_in">string</span></span>): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">void</span>&gt; {<br>  <span class="hljs-keyword">const</span> envPath = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getEnvPath</span>(cwd)<br>  <span class="hljs-keyword">const</span> code = <span class="hljs-keyword">await</span> <span class="hljs-title function_">readFile</span>(envPath, <span class="hljs-string">'utf-8'</span>)<br>  <span class="hljs-keyword">const</span> ast = <span class="hljs-title class_">CodeUtil</span>.<span class="hljs-title function_">parse</span>(code)<br>  <span class="hljs-keyword">const</span> envNames = <span class="hljs-keyword">await</span> <span class="hljs-title function_">scan</span>(cwd)<br><br>  <span class="hljs-keyword">if</span> (<span class="hljs-title function_">eq</span>(envNames, <span class="hljs-title function_">getEnvs</span>(ast))) {<br>    <span class="hljs-keyword">return</span><br>  }<br><br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">writeFile</span>(envPath, <span class="hljs-title class_">CodeUtil</span>.<span class="hljs-title function_">print</span>(<span class="hljs-title function_">convert</span>(ast, envNames)))<br>}<br></code></pre></td></tr></tbody></table></figure><p>实现 vite 插件</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> { <span class="hljs-title class_">Plugin</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'vite'</span><br><span class="hljs-keyword">import</span> { gen } <span class="hljs-keyword">from</span> <span class="hljs-string">'./gen'</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> path <span class="hljs-keyword">from</span> <span class="hljs-string">'path'</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">envDtsGen</span>(<span class="hljs-params"></span>): <span class="hljs-title class_">Plugin</span> {<br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">rootPath</span>: <span class="hljs-built_in">string</span><br>  <span class="hljs-keyword">return</span> {<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">'vite-plugin-env-dts-gen'</span>,<br>    <span class="hljs-title function_">configResolved</span>(<span class="hljs-params">resolveConfig</span>) {<br>      rootPath = resolveConfig.<span class="hljs-property">root</span><br>    },<br>    <span class="hljs-title function_">configureServer</span>(<span class="hljs-params">server</span>) {<br>      server.<span class="hljs-property">watcher</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">'.env*'</span>)<br>      <span class="hljs-keyword">const</span> <span class="hljs-title function_">listener</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">filePath: <span class="hljs-built_in">string</span></span>) =&gt; {<br>        <span class="hljs-keyword">const</span> relative = path.<span class="hljs-title function_">relative</span>(rootPath, filePath)<br>        <span class="hljs-comment">// console.log('filePath: ', relative)</span><br>        <span class="hljs-keyword">if</span> (relative.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">'.env'</span>)) {<br>          <span class="hljs-keyword">await</span> <span class="hljs-title function_">gen</span>(rootPath)<br>        }<br>      }<br>      server.<span class="hljs-property">watcher</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">'change'</span>, listener)<br>      server.<span class="hljs-property">watcher</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">'add'</span>, listener)<br>    },<br>    <span class="hljs-keyword">async</span> <span class="hljs-title function_">buildStart</span>(<span class="hljs-params"></span>) {<br>      <span class="hljs-keyword">await</span> <span class="hljs-title function_">gen</span>(rootPath)<br>    },<br>  }<br>}<br></code></pre></td></tr></tbody></table></figure><blockquote><p>完整代码 ref: <a href="https://github.com/rxliuli/liuli-tools/blob/master/libs/vite-plugin-env-dts-gen">https://github.com/rxliuli/liuli-tools/blob/master/libs/vite-plugin-env-dts-gen</a></p></blockquote><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> { defineConfig } <span class="hljs-keyword">from</span> <span class="hljs-string">'vite'</span><br><span class="hljs-keyword">import</span> { envDtsGen } <span class="hljs-keyword">from</span> <span class="hljs-string">'@liuli-util/vite-plugin-env-dts-gen'</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>({<br>  <span class="hljs-attr">plugins</span>: [<span class="hljs-title function_">envDtsGen</span>()],<br>})<br></code></pre></td></tr></tbody></table></figure><p>现在，每当修改环境变量文件时，都会自动修改对应的类型定义，编写代码时也会有提示和校验了。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>之后，将演示两个现有的代码生成的实例。</p><ul><li>从 graphql 生成代码</li><li>从 open api schema 生成类型定义</li></ul>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    <category term="前端" scheme="https://blog.rxliuli.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="开发者体验" scheme="https://blog.rxliuli.com/categories/%E5%89%8D%E7%AB%AF/%E5%BC%80%E5%8F%91%E8%80%85%E4%BD%93%E9%AA%8C/"/>
    
    
    <category term="typescript" scheme="https://blog.rxliuli.com/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>代码生成-从 module css 生成 dts</title>
    <link href="https://blog.rxliuli.com/p/b8e8ce8bccff49d191480a40a18a7fc8/"/>
    <id>https://blog.rxliuli.com/p/b8e8ce8bccff49d191480a40a18a7fc8/</id>
    <published>2022-09-28T14:30:47.951Z</published>
    <updated>2022-10-18T11:27:14.160Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>代码生成对于很多开发者都不是陌生的概念，从使用脚手架（create-react-app）生成项目，到使用 ide 生成代码、或是从后端 api schema 生成代码，几乎不可能避免使用它。它可以解决各种各样的问题</p><ul><li>从同一个来源生成项目，避免千人千面的项目整体结构</li><li>减少编写样板代码</li><li>避免在多个地方重复编写代码导致的不一致性</li></ul><p>但在使用 TypeScript 时，它还可以做到一些其他有趣的事情，包括</p><ul><li>生成类型提高开发者体验，例如为 env、module css、i18n config 生成类型定义</li><li>支持原本不支持引入的文件，例如为 graphql 生成代码音变引入它</li></ul><p>或许有人会认为代码生成需要处理 ast（即抽象语法树），而处理 ast 是一件复杂的事情，因而不去尝试做类似的事情。吾辈要说的是，ast 的实际结构确实可能会很复杂，例如 TypeScript 官方解析器解析 ts 得到的那个，但其核心却相当简单，这个领域仅仅只是门槛稍微有点高。如果你选择了一个合适的语法树操作工具，再加上现有的各种 代码 &lt;=&gt; ast 可视化工具，那事情会变得简单许多。</p><h2 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h2><p>想要生成代码，基本上就像将一只大象放进冰箱里面一样需要三步</p><ol><li>得到某种类型的元数据，例如从 css 得到它的 ast</li><li>转换元数据得到生成目标代码的 ast</li><li>将 ast 转换成代码</li></ol><p><img src="/resources/0a85923724f64322b272f96ba09f0982.svg" alt="代码生成步骤.drawio.svg"></p><p>正如标题所言，在这里主要的目标代码是 TypeScript，相应的，元数据的来源多种多样，从 json 数据、到其他语言的 ast、到远端的接口，这实际上没有什么限制，只要你能够将之转换为目标 ast 即可。</p><p>下面我们将来尝试第一个，也是最简单的一个，从 module css 文件生成类型定义</p><h2 id="从-css-生成类型定义"><a href="#从-css-生成类型定义" class="headerlink" title="从 css 生成类型定义"></a>从 css 生成类型定义</h2><h3 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h3><p>为什么要这样做？</p><p>在使用 css module 时，我们通常使用构建工具，例如 rollup/vite/webpack 来解析 *.module.css 文件，并使得最终 bundle 中的结果符合预期。但在开发阶段，它并没有太多提示，例如定义了一个 css class，但你在 ts 中使用时，并不会有什么提示。当你将一个 css class 删除后，也不会有任何代码提示。<br>例如下面这个示例</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* App.module.css */</span><br><span class="hljs-selector-class">.hide</span> {<br>  <span class="hljs-attribute">display</span>: none;<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// App.tsx</span><br><span class="hljs-keyword">import</span> { useReducer } <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span><br><span class="hljs-keyword">import</span> css <span class="hljs-keyword">from</span> <span class="hljs-string">'./App.module.css'</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) {<br>  <span class="hljs-keyword">const</span> [hide, toggle] = <span class="hljs-title function_">useReducer</span>(<span class="hljs-function">(<span class="hljs-params">s</span>) =&gt;</span> !s, <span class="hljs-literal">false</span>)<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{toggle}</span>&gt;</span>toggle<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">{hide</span> ? <span class="hljs-attr">css.hide</span> <span class="hljs-attr">:</span> ''}&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>}<br></code></pre></td></tr></tbody></table></figure><p>如果我们在 App.module.css 旁边放一个 App.module.css.d.ts 文件，那么在 ts 中使用时就会很快乐</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> <span class="hljs-attr">css</span>: {<br>  <span class="hljs-attr">hide</span>: <span class="hljs-built_in">string</span><br>}<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> css<br></code></pre></td></tr></tbody></table></figure><p>当然，在 ide 中也可以完成这个功能，但每个 ide 都需要实现一遍这个功能，这正是问题所在，插件无法跨 ide 使用，但基于 TypeScript 的代码提示可以做到跨 ide 使用，包括 vscode、jetbrains ide、vim 等等。</p><h3 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h3><p>正如上面所言，想要生成代码，在这里需要得到 css ast 和转换 css ast 为 ts ast，而这就需要选择一个合适的解析器来解析 css 得到 ast 以及生成 ts ast 并转换为代码了。</p><p><img src="/resources/736d1e022d374f79be616675e6a616a6.svg" alt="从 css 生成接口基本流程.drawio.svg"></p><p>我们使用以下两个库</p><ul><li>css-tree: 解析 css 代码为 cssom</li><li>ast-types: 一个通用的 ts/js ast 高层次抽象</li><li>recast: 基于 ast-types 的一个 ast 解析生成器</li></ul><blockquote><p>Tip: 代码的 ast 可以在 <a href="https://astexplorer.net/">https://astexplorer.net/</a> 以可视化的方式检查<br><img src="/resources/bef3bb2bf40f43dd87c724d4cfc70bdc.png" alt="1664382002113.png"></p></blockquote><h3 id="解析-css"><a href="#解析-css" class="headerlink" title="解析 css"></a>解析 css</h3><p>首先，解析 css 得到 ast，并从中过滤出所有 class 选择器类名</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">function</span> <span class="hljs-title function_">parse</span>(<span class="hljs-params">code: <span class="hljs-built_in">string</span></span>): <span class="hljs-built_in">string</span>[] {<br>  <span class="hljs-keyword">const</span> ast = csstree.<span class="hljs-title function_">parse</span>(code)<br>  <span class="hljs-keyword">const</span> <span class="hljs-attr">r</span>: <span class="hljs-built_in">string</span>[] = []<br>  csstree.<span class="hljs-title function_">walk</span>(ast, <span class="hljs-function">(<span class="hljs-params">node</span>) =&gt;</span> {<br>    <span class="hljs-keyword">if</span> (node.<span class="hljs-property">type</span> === <span class="hljs-string">'ClassSelector'</span>) {<br>      r.<span class="hljs-title function_">push</span>(node.<span class="hljs-property">name</span>)<br>    }<br>  })<br>  <span class="hljs-keyword">return</span> r<br>}<br></code></pre></td></tr></tbody></table></figure><p>然后将 css 类名列表转换为 ast</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">function</span> <span class="hljs-title function_">convert</span>(<span class="hljs-params">classes: <span class="hljs-built_in">string</span>[]</span>): n.<span class="hljs-property">Program</span> {<br>  <span class="hljs-keyword">return</span> b.<span class="hljs-title function_">program</span>([<br>    b.<span class="hljs-title function_">variableDeclaration</span>(<span class="hljs-string">'const'</span>, [<br>      b.<span class="hljs-title function_">variableDeclarator</span>(<br>        b.<span class="hljs-property">identifier</span>.<span class="hljs-title function_">from</span>({<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">'css'</span>,<br>          <span class="hljs-attr">typeAnnotation</span>: b.<span class="hljs-title function_">tsTypeAnnotation</span>(<br>            b.<span class="hljs-title function_">tsTypeLiteral</span>(<br>              classes.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">s</span>) =&gt;</span><br>                b.<span class="hljs-title function_">tsPropertySignature</span>(<br>                  b.<span class="hljs-title function_">identifier</span>(s),<br>                  b.<span class="hljs-title function_">tsTypeAnnotation</span>(b.<span class="hljs-title function_">tsStringKeyword</span>()),<br>                ),<br>              ),<br>            ),<br>          ),<br>        }),<br>      ),<br>    ]),<br>    b.<span class="hljs-title function_">exportDefaultDeclaration</span>(b.<span class="hljs-title function_">identifier</span>(<span class="hljs-string">'css'</span>)),<br>  ])<br>}<br></code></pre></td></tr></tbody></table></figure><p>最后，将 ast 转换为 ts 代码</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">function</span> <span class="hljs-title function_">format</span>(<span class="hljs-params">ast: n.ASTNode</span>): <span class="hljs-built_in">string</span> {<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">prettyPrint</span>(ast).<span class="hljs-property">code</span><br>}<br></code></pre></td></tr></tbody></table></figure><p>结合一下 3 个方法</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">generate</span>(<span class="hljs-params">cssCode: <span class="hljs-built_in">string</span></span>): <span class="hljs-built_in">string</span> {<br>  <span class="hljs-keyword">const</span> classes = <span class="hljs-title function_">parse</span>(cssCode)<br>  <span class="hljs-keyword">const</span> ast = <span class="hljs-title function_">convert</span>(classes)<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">format</span>(ast)<br>}<br></code></pre></td></tr></tbody></table></figure><p>做个最简单的测试</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<br>  <span class="hljs-title function_">generate</span>(<span class="hljs-string">`/* App.module.css */</span><br><span class="hljs-string">.hide {</span><br><span class="hljs-string">  display: none;</span><br><span class="hljs-string">}</span><br><span class="hljs-string">`</span>),<br>)<br><span class="hljs-comment">// 会得到以下代码</span><br><span class="hljs-comment">// const css: {</span><br><span class="hljs-comment">//     hide: string</span><br><span class="hljs-comment">// };</span><br><br><span class="hljs-comment">// export default css;</span><br></code></pre></td></tr></tbody></table></figure><p>看起来我们完成了基本的从 css 到 dts 的代码生成，但如果希望实用，它还需要一些额外的步骤</p><ol><li>更好的使用方式封装，例如封装为 cli 自动扫描指定目录下的所有 *.module.css 文件并生成对应的 dts 文件，或者是通过插件直接集成到开发工具的流程中，例如 vite 插件</li><li>发布为 npm 包，或者使用某种形式的 monorepo 便于在多个项目复用</li></ol><p>下面使用 vite 插件作为演示</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> { defineConfig, <span class="hljs-title class_">Plugin</span>, <span class="hljs-title class_">ResolvedConfig</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'vite'</span><br><span class="hljs-keyword">import</span> react <span class="hljs-keyword">from</span> <span class="hljs-string">'@vitejs/plugin-react'</span><br><span class="hljs-keyword">import</span> { globby } <span class="hljs-keyword">from</span> <span class="hljs-string">'globby'</span><br><span class="hljs-keyword">import</span> path <span class="hljs-keyword">from</span> <span class="hljs-string">'path'</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> csstree <span class="hljs-keyword">from</span> <span class="hljs-string">'css-tree'</span><br><span class="hljs-keyword">import</span> { namedTypes <span class="hljs-keyword">as</span> n, builders <span class="hljs-keyword">as</span> b } <span class="hljs-keyword">from</span> <span class="hljs-string">'ast-types'</span><br><span class="hljs-keyword">import</span> { prettyPrint } <span class="hljs-keyword">from</span> <span class="hljs-string">'recast'</span><br><span class="hljs-keyword">import</span> fsExtra <span class="hljs-keyword">from</span> <span class="hljs-string">'fs-extra'</span><br><span class="hljs-keyword">import</span> { watch } <span class="hljs-keyword">from</span> <span class="hljs-string">'chokidar'</span><br><br><span class="hljs-comment">// 上面的代码。。。</span><br><br><span class="hljs-keyword">const</span> { pathExists, readFile, remove, writeFile } = fsExtra<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">cssdts</span>(<span class="hljs-params"></span>): <span class="hljs-title class_">Plugin</span> {<br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">config</span>: <span class="hljs-title class_">ResolvedConfig</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">generateByPath</span>(<span class="hljs-params">item: <span class="hljs-built_in">string</span></span>) {<br>    <span class="hljs-keyword">const</span> cssPath = path.<span class="hljs-title function_">resolve</span>(config.<span class="hljs-property">root</span>, item)<br>    <span class="hljs-keyword">const</span> code = <span class="hljs-keyword">await</span> <span class="hljs-title function_">readFile</span>(cssPath, <span class="hljs-string">'utf-8'</span>)<br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">writeFile</span>(cssPath + <span class="hljs-string">'.d.ts'</span>, <span class="hljs-title function_">generate</span>(code))<br>  }<br><br>  <span class="hljs-keyword">return</span> {<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">'vite-plugin-cssdts'</span>,<br>    <span class="hljs-title function_">configResolved</span>(<span class="hljs-params">_config</span>) {<br>      config = _config<br>    },<br>    <span class="hljs-keyword">async</span> <span class="hljs-title function_">buildStart</span>(<span class="hljs-params"></span>) {<br>      <span class="hljs-keyword">const</span> list = <span class="hljs-keyword">await</span> <span class="hljs-title function_">globby</span>(<span class="hljs-string">'src/**/*.module.css'</span>, {<br>        <span class="hljs-attr">cwd</span>: config.<span class="hljs-property">root</span>,<br>      })<br>      <span class="hljs-keyword">await</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>(<br>        list.<span class="hljs-title function_">map</span>(<span class="hljs-keyword">async</span> (item) =&gt; {<br>          <span class="hljs-keyword">const</span> cssPath = path.<span class="hljs-title function_">resolve</span>(config.<span class="hljs-property">root</span>, item)<br>          <span class="hljs-keyword">await</span> <span class="hljs-title function_">generateByPath</span>(cssPath)<br>        }),<br>      )<br>    },<br>    <span class="hljs-title function_">configureServer</span>(<span class="hljs-params">server</span>) {<br>      <span class="hljs-title function_">watch</span>(<span class="hljs-string">'src/**/*.module.css'</span>, { <span class="hljs-attr">cwd</span>: config.<span class="hljs-property">root</span> })<br>        .<span class="hljs-title function_">on</span>(<span class="hljs-string">'add'</span>, generateByPath)<br>        .<span class="hljs-title function_">on</span>(<span class="hljs-string">'change'</span>, generateByPath)<br>        .<span class="hljs-title function_">on</span>(<span class="hljs-string">'unlink'</span>, <span class="hljs-keyword">async</span> (cssPath) =&gt; {<br>          <span class="hljs-keyword">if</span> (cssPath.<span class="hljs-title function_">endsWith</span>(<span class="hljs-string">'.module.css'</span>)) {<br>            <span class="hljs-keyword">const</span> dtsPath = cssPath + <span class="hljs-string">'.d.ts'</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">await</span> <span class="hljs-title function_">pathExists</span>(dtsPath)) {<br>              <span class="hljs-keyword">await</span> <span class="hljs-title function_">remove</span>(dtsPath)<br>            }<br>          }<br>        })<br>    },<br>  }<br>}<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>({<br>  <span class="hljs-attr">plugins</span>: [<span class="hljs-title function_">react</span>(), <span class="hljs-title function_">cssdts</span>()],<br>})<br></code></pre></td></tr></tbody></table></figure><p>现在，每当启动 vite 时都会自动扫描所有的 *.module.css 生成对应的类型定义，在开发模式下还会持续监听文件的变化。</p><p><img src="/resources/13cdf71f96e549c9bb21188dd051a81b.gif" alt="代码提示.gif"></p><h3 id="sourcemap"><a href="#sourcemap" class="headerlink" title="sourcemap"></a>sourcemap</h3><p>目前已经实现了代码提示和校验的功能，但跳转尚未生效，我们可以使用 source-map 来实现它。这是另一个有趣的技术，在之后将详细介绍，这里仅说明一下工作方式。sourcemap 将一个文件的内容与一或多个源文件的内容映射，chrome 或 vscode 均支持根据 sourcemap 自动查找对应的源文件，利用这个功能我们可以让生成的 dts 指向 css 文件。</p><p>效果</p><p><img src="/resources/07d7086ae24e496ca1dcd291668a36ac.gif" alt="跳转.gif"></p><p>完整代码</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> { <span class="hljs-title class_">SourceMapGenerator</span>, <span class="hljs-title class_">SourceNode</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'source-map'</span><br><span class="hljs-keyword">import</span> { defineConfig, <span class="hljs-title class_">Plugin</span>, <span class="hljs-title class_">ResolvedConfig</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'vite'</span><br><span class="hljs-keyword">import</span> react <span class="hljs-keyword">from</span> <span class="hljs-string">'@vitejs/plugin-react'</span><br><span class="hljs-keyword">import</span> { globby } <span class="hljs-keyword">from</span> <span class="hljs-string">'globby'</span><br><span class="hljs-keyword">import</span> path <span class="hljs-keyword">from</span> <span class="hljs-string">'path'</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> csstree <span class="hljs-keyword">from</span> <span class="hljs-string">'css-tree'</span><br><span class="hljs-keyword">import</span> { namedTypes <span class="hljs-keyword">as</span> n, builders <span class="hljs-keyword">as</span> b } <span class="hljs-keyword">from</span> <span class="hljs-string">'ast-types'</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> recast <span class="hljs-keyword">from</span> <span class="hljs-string">'recast'</span><br><span class="hljs-keyword">import</span> fsExtra <span class="hljs-keyword">from</span> <span class="hljs-string">'fs-extra'</span><br><span class="hljs-keyword">import</span> { watch } <span class="hljs-keyword">from</span> <span class="hljs-string">'chokidar'</span><br><span class="hljs-keyword">import</span> { keyBy } <span class="hljs-keyword">from</span> <span class="hljs-string">'lodash-es'</span><br><span class="hljs-keyword">import</span> tsParser <span class="hljs-keyword">from</span> <span class="hljs-string">'recast/parsers/typescript.js'</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">parse</span>(<span class="hljs-params">code: <span class="hljs-built_in">string</span></span>): csstree.<span class="hljs-property">ClassSelector</span>[] {<br>  <span class="hljs-keyword">const</span> ast = csstree.<span class="hljs-title function_">parse</span>(code, { <span class="hljs-attr">positions</span>: <span class="hljs-literal">true</span> })<br>  <span class="hljs-keyword">const</span> <span class="hljs-attr">r</span>: csstree.<span class="hljs-property">ClassSelector</span>[] = []<br>  csstree.<span class="hljs-title function_">walk</span>(ast, <span class="hljs-function">(<span class="hljs-params">node</span>) =&gt;</span> {<br>    <span class="hljs-keyword">if</span> (node.<span class="hljs-property">type</span> === <span class="hljs-string">'ClassSelector'</span>) {<br>      r.<span class="hljs-title function_">push</span>(node)<br>    }<br>  })<br>  <span class="hljs-keyword">return</span> r<br>}<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">convert</span>(<span class="hljs-params">classes: csstree.ClassSelector[]</span>): n.<span class="hljs-property">Program</span> {<br>  <span class="hljs-keyword">const</span> r = b.<span class="hljs-title function_">variableDeclaration</span>(<span class="hljs-string">'const'</span>, [<br>    b.<span class="hljs-title function_">variableDeclarator</span>(<br>      b.<span class="hljs-property">identifier</span>.<span class="hljs-title function_">from</span>({<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">'css'</span>,<br>        <span class="hljs-attr">typeAnnotation</span>: b.<span class="hljs-title function_">tsTypeAnnotation</span>(<br>          b.<span class="hljs-title function_">tsTypeLiteral</span>(<br>            classes.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">s</span>) =&gt;</span><br>              b.<span class="hljs-title function_">tsPropertySignature</span>(<br>                b.<span class="hljs-title function_">identifier</span>(s.<span class="hljs-property">name</span>),<br>                b.<span class="hljs-title function_">tsTypeAnnotation</span>(b.<span class="hljs-title function_">tsStringKeyword</span>()),<br>              ),<br>            ),<br>          ),<br>        ),<br>      }),<br>    ),<br>  ])<br>  ;(r <span class="hljs-keyword">as</span> <span class="hljs-built_in">unknown</span> <span class="hljs-keyword">as</span> n.<span class="hljs-property">TSTypeAliasDeclaration</span>).<span class="hljs-property">declare</span> = <span class="hljs-literal">true</span><br>  <span class="hljs-keyword">return</span> b.<span class="hljs-title function_">program</span>([r, b.<span class="hljs-title function_">exportDefaultDeclaration</span>(b.<span class="hljs-title function_">identifier</span>(<span class="hljs-string">'css'</span>))])<br>}<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">format</span>(<span class="hljs-params">ast: n.ASTNode</span>): <span class="hljs-built_in">string</span> {<br>  <span class="hljs-keyword">return</span> recast.<span class="hljs-title function_">prettyPrint</span>(ast).<span class="hljs-property">code</span><br>}<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sourcemap</span>(<span class="hljs-params">{</span><br><span class="hljs-params">  code,</span><br><span class="hljs-params">  classes,</span><br><span class="hljs-params">  source,</span><br><span class="hljs-params">  target,</span><br><span class="hljs-params">}: {</span><br><span class="hljs-params">  code: <span class="hljs-built_in">string</span></span><br><span class="hljs-params">  classes: csstree.ClassSelector[]</span><br><span class="hljs-params">  source: <span class="hljs-built_in">string</span></span><br><span class="hljs-params">  target: <span class="hljs-built_in">string</span></span><br><span class="hljs-params">}</span>) {<br>  <span class="hljs-keyword">const</span> root = recast.<span class="hljs-title function_">parse</span>(code, { <span class="hljs-attr">parser</span>: tsParser })<br>  <span class="hljs-keyword">const</span> cssSelectorsMap = <span class="hljs-title function_">keyBy</span>(classes, <span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item.<span class="hljs-property">name</span>)<br>  <span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SourceMapGenerator</span>({<br>    <span class="hljs-attr">file</span>: target,<br>  })<br>  recast.<span class="hljs-title function_">visit</span>(root, {<br>    <span class="hljs-title function_">visitTSPropertySignature</span>(<span class="hljs-params">path</span>) {<br>      <span class="hljs-keyword">const</span> name = (path.<span class="hljs-property">node</span>.<span class="hljs-property">key</span> <span class="hljs-keyword">as</span> n.<span class="hljs-property">Identifier</span>).<span class="hljs-property">name</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>((path.<span class="hljs-property">node</span>.<span class="hljs-property">key</span> <span class="hljs-keyword">as</span> n.<span class="hljs-property">Identifier</span>).<span class="hljs-property">name</span>)<br>      <span class="hljs-keyword">const</span> css = cssSelectorsMap[name]<br>      <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Pos</span> {<br>        <span class="hljs-attr">line</span>: <span class="hljs-built_in">number</span><br>        <span class="hljs-attr">column</span>: <span class="hljs-built_in">number</span><br>      }<br><br>      <span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">original: Pos, generated: Pos</span>) {<br>        map.<span class="hljs-title function_">addMapping</span>({<br>          <span class="hljs-attr">source</span>: source,<br>          <span class="hljs-attr">original</span>: {<br>            <span class="hljs-attr">line</span>: original.<span class="hljs-property">line</span>,<br>            <span class="hljs-attr">column</span>: original.<span class="hljs-property">column</span>,<br>          },<br>          <span class="hljs-attr">generated</span>: {<br>            <span class="hljs-attr">line</span>: generated.<span class="hljs-property">line</span>,<br>            <span class="hljs-attr">column</span>: generated.<span class="hljs-property">column</span>,<br>          },<br>        })<br>      }<br>      <span class="hljs-title function_">add</span>(css.<span class="hljs-property">loc</span>!.<span class="hljs-property">start</span>, path.<span class="hljs-property">node</span>!.<span class="hljs-property">key</span>.<span class="hljs-property">loc</span>!.<span class="hljs-property">start</span>)<br>      <span class="hljs-title function_">add</span>(css.<span class="hljs-property">loc</span>!.<span class="hljs-property">end</span>, path.<span class="hljs-property">node</span>!.<span class="hljs-property">key</span>.<span class="hljs-property">loc</span>!.<span class="hljs-property">end</span>)<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    },<br>  })<br>  <span class="hljs-keyword">return</span> map.<span class="hljs-title function_">toString</span>()<br>}<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">generate</span>(<span class="hljs-params"></span><br><span class="hljs-params">  cssCode: <span class="hljs-built_in">string</span>,</span><br><span class="hljs-params">  source: <span class="hljs-built_in">string</span>,</span><br><span class="hljs-params">  target: <span class="hljs-built_in">string</span>,</span><br><span class="hljs-params"></span>): <span class="hljs-built_in">string</span> {<br>  <span class="hljs-keyword">const</span> classes = <span class="hljs-title function_">parse</span>(cssCode)<br>  <span class="hljs-keyword">const</span> ast = <span class="hljs-title function_">convert</span>(classes)<br>  <span class="hljs-keyword">const</span> code = <span class="hljs-title function_">format</span>(ast)<br>  <span class="hljs-keyword">const</span> mapCode = <span class="hljs-title function_">sourcemap</span>({ code, classes, source, target })<br>  <span class="hljs-keyword">return</span> (<br>    code +<br>    <span class="hljs-string">'\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,'</span> +<br>    <span class="hljs-title function_">btoa</span>(mapCode)<br>  )<br>}<br><br><span class="hljs-keyword">const</span> { pathExists, readFile, remove, writeFile } = fsExtra<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">cssdts</span>(<span class="hljs-params"></span>): <span class="hljs-title class_">Plugin</span> {<br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">config</span>: <span class="hljs-title class_">ResolvedConfig</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">generateByPath</span>(<span class="hljs-params">item: <span class="hljs-built_in">string</span></span>) {<br>    <span class="hljs-keyword">const</span> cssPath = path.<span class="hljs-title function_">resolve</span>(config.<span class="hljs-property">root</span>, item)<br>    <span class="hljs-keyword">const</span> code = <span class="hljs-keyword">await</span> <span class="hljs-title function_">readFile</span>(cssPath, <span class="hljs-string">'utf-8'</span>)<br>    <span class="hljs-keyword">const</span> dtsPath = cssPath + <span class="hljs-string">'.d.ts'</span><br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">writeFile</span>(dtsPath, <span class="hljs-title function_">generate</span>(code, cssPath, dtsPath))<br>  }<br><br>  <span class="hljs-keyword">return</span> {<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">'vite-plugin-cssdts'</span>,<br>    <span class="hljs-title function_">configResolved</span>(<span class="hljs-params">_config</span>) {<br>      config = _config<br>    },<br>    <span class="hljs-keyword">async</span> <span class="hljs-title function_">buildStart</span>(<span class="hljs-params"></span>) {<br>      <span class="hljs-keyword">const</span> list = <span class="hljs-keyword">await</span> <span class="hljs-title function_">globby</span>(<span class="hljs-string">'src/**/*.module.css'</span>, {<br>        <span class="hljs-attr">cwd</span>: config.<span class="hljs-property">root</span>,<br>      })<br>      <span class="hljs-keyword">await</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>(<br>        list.<span class="hljs-title function_">map</span>(<span class="hljs-keyword">async</span> (item) =&gt; {<br>          <span class="hljs-keyword">const</span> cssPath = path.<span class="hljs-title function_">resolve</span>(config.<span class="hljs-property">root</span>, item)<br>          <span class="hljs-keyword">await</span> <span class="hljs-title function_">generateByPath</span>(cssPath)<br>        }),<br>      )<br>    },<br>    <span class="hljs-title function_">configureServer</span>(<span class="hljs-params">server</span>) {<br>      <span class="hljs-title function_">watch</span>(<span class="hljs-string">'src/**/*.module.css'</span>, { <span class="hljs-attr">cwd</span>: config.<span class="hljs-property">root</span> })<br>        .<span class="hljs-title function_">on</span>(<span class="hljs-string">'add'</span>, generateByPath)<br>        .<span class="hljs-title function_">on</span>(<span class="hljs-string">'change'</span>, generateByPath)<br>        .<span class="hljs-title function_">on</span>(<span class="hljs-string">'unlink'</span>, <span class="hljs-keyword">async</span> (cssPath) =&gt; {<br>          <span class="hljs-keyword">if</span> (cssPath.<span class="hljs-title function_">endsWith</span>(<span class="hljs-string">'.module.css'</span>)) {<br>            <span class="hljs-keyword">const</span> dtsPath = cssPath + <span class="hljs-string">'.d.ts'</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">await</span> <span class="hljs-title function_">pathExists</span>(dtsPath)) {<br>              <span class="hljs-keyword">await</span> <span class="hljs-title function_">remove</span>(dtsPath)<br>            }<br>          }<br>        })<br>    },<br>  }<br>}<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>({<br>  <span class="hljs-attr">plugins</span>: [<span class="hljs-title function_">react</span>(), <span class="hljs-title function_">cssdts</span>()],<br>  <span class="hljs-attr">build</span>: {<br>    <span class="hljs-attr">sourcemap</span>: <span class="hljs-string">'inline'</span>,<br>    <span class="hljs-attr">minify</span>: <span class="hljs-literal">false</span>,<br>  },<br>})<br></code></pre></td></tr></tbody></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>在之后的几篇文章中，吾辈将演示代码生成的实际用途，并实现一些简单的例子，也会给出现有的更完善的的工具（如果有的话）。</p><ul><li><a href="/p/d867b35e62454483ae697185d93617ab">代码生成-从环境变量生成类型定义</a></li><li><a href="/p/7fc05ef7c1274b168504c216a6774ea6">代码生成-从 i18n config 生成类型定义</a></li><li>从 graphql 生成代码</li><li>从 open api schema 生成类型定义</li></ul>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    <category term="前端" scheme="https://blog.rxliuli.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="开发者体验" scheme="https://blog.rxliuli.com/categories/%E5%89%8D%E7%AB%AF/%E5%BC%80%E5%8F%91%E8%80%85%E4%BD%93%E9%AA%8C/"/>
    
    
    <category term="typescript" scheme="https://blog.rxliuli.com/tags/typescript/"/>
    
    <category term="vite" scheme="https://blog.rxliuli.com/tags/vite/"/>
    
    <category term="工程化" scheme="https://blog.rxliuli.com/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript ESM 很好，但它现在也许没那么好</title>
    <link href="https://blog.rxliuli.com/p/73331967c1814df480811eee598e714b/"/>
    <id>https://blog.rxliuli.com/p/73331967c1814df480811eee598e714b/</id>
    <published>2022-08-10T09:47:00.363Z</published>
    <updated>2022-10-01T17:47:14.585Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>可能许多前端开发者都知道，自从去年 sindresorhus 发表 <a href="https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c">esm only 的宣言</a> 一年多以来，许多项目开始转向了 esm only，即仅支持 esm 而不支持 cjs，以此来迫使整个生态更快的迁移到 esm only。</p><p>一些流行的项目已经这样做了</p><ul><li>sindresorhus 维护的上千个 npm 包</li><li>node-fetch</li><li>remark 系列</li><li>更多。。。</li></ul><p>它们声称：你可以仍然使用现有版本而不升级到最新版，大版本更新不会影响到你。事实如何？</p><p>吾辈之前碰到过几次无法使用 esm only 包的问题，每当吾辈想尝试 esm only 时，总是还有一些问题，最痛苦的是，一些包是 esm only，而另一些是 cjs only，总要选择放弃一边，fuck esm only。主要问题一些是 cjs only 的包，以及必须兼容的包 typescript/jest/ts-jest/wallaby 未能正确支持 esm。当然，吾辈可以选择寻找 esm only 包的替代品，例如 globby =&gt; fast-glob、remark =&gt; markdown-it、node-fetch =&gt; node-fetch@2，lodash-es =&gt; lodash，但这终究不是一个长久的选择，更何况有些包很难真正找到替代品，例如 remark 系列。</p><p>那么，使用旧版本的包有什么问题呢？<br>主要问题是很难找到正确的版本，当然，如果使用的是相对独立的包，例如 node-fetch 这个，就可以直接使用 v2 版本即可。但如果使用的是 vuepress/remark 这种 monorepo 中包含许多小型包的项目，你很难找到每个子项目正确的版本。</p><p>吾辈最近在做 epub 生成器的时候需要从 markdown 并操作 ast 做一些转换，最后转换为 html，因此再次使用 remark，也决定真正尝试使用 esm，下面是一些尝试的过程。</p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>使用 esm 必须解决以下几个问题，否则在生产环境中使用是不可能的</p><ul><li><input checked="" disabled="" type="checkbox"> typescript 支持 – 基本上全部的 web 项目都使用了 ts，不支持的话是不可接受的</li><li><input checked="" disabled="" type="checkbox"> jest 支持 – 同样大量使用的测试工具<ul><li><input checked="" disabled="" type="checkbox"> wallaby 支持 – 一个付费的所见即所得的测试工具</li></ul></li><li><input checked="" disabled="" type="checkbox"> 允许引用 cjs 模块 – 需要支持现有包</li><li><input checked="" disabled="" type="checkbox"> 双模块包仍然能支持两种 esm/cjs 的项目 – 需要支持 cjs 项目引用</li><li><input checked="" disabled="" type="checkbox"> 支持不打包的模块 – monorepo 中有些私有模块不会 bundle</li><li><input checked="" disabled="" type="checkbox"> esbuild 支持 – esbuild 正在成为 lib bundle 标准</li></ul><h2 id="修改-package-声明"><a href="#修改-package-声明" class="headerlink" title="修改 package 声明"></a>修改 package 声明</h2><p>第一步是修改包的模块类型，修改 <code>"type": "module"</code> 即可将包声明为 esm，所有 js 代码将默认以 esm 模块运行。</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">{</span><br>  <span class="hljs-attr">"type"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"module"</span><br><span class="hljs-punctuation">}</span><br></code></pre></td></tr></tbody></table></figure><h2 id="TypeScript-支持"><a href="#TypeScript-支持" class="headerlink" title="TypeScript 支持"></a>TypeScript 支持</h2><p>从 ts4.7 开始支持 NodeNext，所以需要更改 tsconfig.json</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">{</span><br>  <span class="hljs-attr">"compilerOptions"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span><br>    <span class="hljs-attr">"module"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"ESNext"</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"moduleResolution"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"NodeNext"</span><br>  <span class="hljs-punctuation">}</span><br><span class="hljs-punctuation">}</span><br></code></pre></td></tr></tbody></table></figure><p>另外，在 ts 文件中导入其他 ts 文件必须使用 .js 后缀</p><p>这是一个奇怪的限制，参考 <a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-7.html#type-in-packagejson-and-new-extensions">ts 4.7 发布文档</a></p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> { helper } <span class="hljs-keyword">from</span> <span class="hljs-string">'./foo.js'</span> <span class="hljs-comment">// works in ESM &amp; CJS</span><br><span class="hljs-title function_">helper</span>()<br></code></pre></td></tr></tbody></table></figure><p>看起来是否会很奇怪，但现在只能这样写，typescript 甚至会这样提示</p><h2 id="jest-x2F-wallaby-支持"><a href="#jest-x2F-wallaby-支持" class="headerlink" title="jest/wallaby 支持"></a>jest/wallaby 支持</h2><p>例如使用 <code>pnpm jest src/__tests__/lodash.test.ts</code> 命令运行以下代码</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> { uniq } <span class="hljs-keyword">from</span> <span class="hljs-string">'lodash-es'</span><br><br><span class="hljs-title function_">it</span>(<span class="hljs-string">'uniq'</span>, <span class="hljs-function">() =&gt;</span> {<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">uniq</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]))<br>})<br></code></pre></td></tr></tbody></table></figure><p>出现错误</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">Jest encountered an unexpected token<br></code></pre></td></tr></tbody></table></figure><p>从 jest 28 开始支持实验性的 esm 支持，wallaby/ts-jest 也都可以通过配置支持，按照以下步骤即可处理</p><ol><li><p>配置 ts-jest</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">{</span><br>  <span class="hljs-attr">"jest"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span><br>    <span class="hljs-attr">"preset"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"ts-jest/presets/default-esm"</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"globals"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span><br>      <span class="hljs-attr">"ts-jest"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span><br>        <span class="hljs-attr">"useESM"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>      <span class="hljs-punctuation">}</span><br>    <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"moduleNameMapper"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span><br>      <span class="hljs-attr">"^(\\.{1,2}/.*)\\.js$"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"$1"</span><br>    <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"testMatch"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">"&lt;rootDir&gt;/src/**/__tests__/*.test.ts"</span><span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">}</span><br><span class="hljs-punctuation">}</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>修改命令为 <code>node --experimental-vm-modules node_modules/jest/bin/jest.js src/__tests__/lodash.test.ts</code></p></li><li><p>配置 wallaby</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">{</span><br>  <span class="hljs-attr">"wallaby"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span><br>    <span class="hljs-attr">"env"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span><br>      <span class="hljs-attr">"params"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span><br>        <span class="hljs-attr">"runner"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"--experimental-vm-modules"</span><br>      <span class="hljs-punctuation">}</span><br>    <span class="hljs-punctuation">}</span><br>  <span class="hljs-punctuation">}</span><br><span class="hljs-punctuation">}</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>由于 esm 的导入是静态的，所以还需要卸载 <code>@types/jest</code> 使用 <code>@jest/globals</code> 包导入测试需要的函数，例如 <code>it/expect/describe/beforeEach</code> 等等</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> { it, expect } <span class="hljs-keyword">from</span> <span class="hljs-string">'@jest/globals'</span><br><br><span class="hljs-title function_">it</span>(<span class="hljs-string">'basic'</span>, <span class="hljs-function">() =&gt;</span> {<br>  <span class="hljs-title function_">expect</span>(<span class="hljs-number">1</span> + <span class="hljs-number">2</span>).<span class="hljs-title function_">toBe</span>(<span class="hljs-number">3</span>)<br>})<br></code></pre></td></tr></tbody></table></figure></li></ol><h2 id="nodejs-支持"><a href="#nodejs-支持" class="headerlink" title="nodejs 支持"></a>nodejs 支持</h2><p>nodejs 自从 14 就开始支持 esm，但直到目前 18 为止迁移仍然不是平滑的，主要遇到了以下问题。</p><h3 id="导入-cjs-only-模块"><a href="#导入-cjs-only-模块" class="headerlink" title="导入 cjs only 模块"></a>导入 cjs only 模块</h3><p>遗憾的是，现存的大量包都是 cjs only 模块的，不可能短时间迁移，而 nodejs 中 esm 与 cjs 的互操作性并不太好，所以需要处理一下。下面以 fs-extra 为例：</p><p>之前一般会这样写</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> { readdir } <span class="hljs-keyword">from</span> <span class="hljs-string">'fs-extra'</span><br><span class="hljs-keyword">import</span> path <span class="hljs-keyword">from</span> <span class="hljs-string">'path'</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">await</span> <span class="hljs-title function_">readdir</span>(path.<span class="hljs-title function_">resolve</span>()))<br></code></pre></td></tr></tbody></table></figure><p>使用 tsx 运行时会出现错误 <code>SyntaxError: The requested module 'fs-extra' does not provide an export named 'readdir'</code>，这似乎是一个已知错误，参考：<a href="https://github.com/esbuild-kit/tsx/issues/38">https://github.com/esbuild-kit/tsx/issues/38</a></p><p>现在需要修改为</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> fsExtra <span class="hljs-keyword">from</span> <span class="hljs-string">'fs-extra'</span><br><span class="hljs-keyword">import</span> path <span class="hljs-keyword">from</span> <span class="hljs-string">'path'</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">await</span> fsExtra.<span class="hljs-title function_">readdir</span>(path.<span class="hljs-title function_">resolve</span>()))<br></code></pre></td></tr></tbody></table></figure><p>或者修改为以下代码使用 <code>ts-node --esm &lt;file&gt;</code> 运行（tsx 不支持这种方式）</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> fsExtra = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs-extra'</span>)<br><span class="hljs-keyword">import</span> path <span class="hljs-keyword">from</span> <span class="hljs-string">'path'</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">await</span> fsExtra.<span class="hljs-title function_">readdir</span>(path.<span class="hljs-title function_">resolve</span>()))<br></code></pre></td></tr></tbody></table></figure><h3 id="使用-dirname"><a href="#使用-dirname" class="headerlink" title="使用 __dirname"></a>使用 <code>__dirname</code></h3><p>是的，你没看错，在 esm 模块下 <code>__dirname</code> 不可用了，取而代之的是 <code>import.meta.url</code>，总而言之，现在的使用方式是</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> path <span class="hljs-keyword">from</span> <span class="hljs-string">'path'</span><br><span class="hljs-keyword">import</span> { fileURLToPath } <span class="hljs-keyword">from</span> <span class="hljs-string">'url'</span><br><br><span class="hljs-keyword">const</span> __filename = <span class="hljs-title function_">fileURLToPath</span>(<span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">url</span>)<br><span class="hljs-keyword">const</span> __dirname = path.<span class="hljs-title function_">dirname</span>(__filename)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(__dirname)<br></code></pre></td></tr></tbody></table></figure><p>参考文章 <a href="https://flaviocopes.com/fix-dirname-not-defined-es-module-scope/">https://flaviocopes.com/fix-dirname-not-defined-es-module-scope/</a>，之后在谈到 esbuild 时再说打包 cjs bundle 如何处理 <code>import.meta.url</code>（在 cjs 中不支持，又是二选一）。</p><h2 id="lib-维护与使用"><a href="#lib-维护与使用" class="headerlink" title="lib 维护与使用"></a>lib 维护与使用</h2><h3 id="新的-esm-与-cjs-双包支持配置"><a href="#新的-esm-与-cjs-双包支持配置" class="headerlink" title="新的 esm 与 cjs 双包支持配置"></a>新的 esm 与 cjs 双包支持配置</h3><p>之前，我们通过 main/module 字段区分模块</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">{</span><br>  <span class="hljs-attr">"main"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"dist/index.js"</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">"module"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"dist/index.esm.js"</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">"types"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"dist/index.d.ts"</span><br><span class="hljs-punctuation">}</span><br></code></pre></td></tr></tbody></table></figure><p>但在 esm 项目中引用会报错</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">SyntaxError: The requested module <span class="hljs-string">'cjs-and-esm-lib'</span> does not provide an <span class="hljs-built_in">export</span> named <span class="hljs-string">'hello'</span><br></code></pre></td></tr></tbody></table></figure><p>esm 项目不认这个，它新定义了 exports 字段，所以需要增加（注意 main 字段仍需保留兼容旧版本 node）exports 字段</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">{</span><br>  <span class="hljs-attr">"exports"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span><br>    <span class="hljs-attr">"."</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span><br>      <span class="hljs-attr">"import"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"./dist/index.esm.js"</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"require"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"./dist/index.js"</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"types"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"./dist/index.d.ts"</span><br>    <span class="hljs-punctuation">}</span><br>  <span class="hljs-punctuation">}</span><br><span class="hljs-punctuation">}</span><br></code></pre></td></tr></tbody></table></figure><p>参考该回答：<a href="https://stackoverflow.com/a/70020984">https://stackoverflow.com/a/70020984</a></p><h2 id="esbuild-支持"><a href="#esbuild-支持" class="headerlink" title="esbuild 支持"></a>esbuild 支持</h2><p>原以为 esbuild 天生支持 esm 所以应该会很简单，但实际上也遇到了相当多的问题。</p><p>捆绑以下代码为 cjs 会出现错误</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> path <span class="hljs-keyword">from</span> <span class="hljs-string">'path'</span><br><span class="hljs-keyword">import</span> { fileURLToPath } <span class="hljs-keyword">from</span> <span class="hljs-string">'url'</span><br><span class="hljs-keyword">import</span> fsExtra <span class="hljs-keyword">from</span> <span class="hljs-string">'fs-extra'</span><br><br><span class="hljs-keyword">const</span> { readdir } = fsExtra<br><br><span class="hljs-keyword">const</span> __filename = <span class="hljs-title function_">fileURLToPath</span>(<span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">url</span>)<br><span class="hljs-keyword">const</span> __dirname = path.<span class="hljs-title function_">dirname</span>(__filename)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(__dirname)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">await</span> <span class="hljs-title function_">readdir</span>(__dirname))<br></code></pre></td></tr></tbody></table></figure><p>命令</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">esbuild src/bin.ts --platform=node --outfile=dist/bin.esm.js --bundle --sourcemap --format=esm<br>esbuild src/bin.ts --platform=node --outfile=dist/bin.js --bundle --sourcemap --format=cjs<br></code></pre></td></tr></tbody></table></figure><p>错误</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">[ERROR] Top-level await is currently not supported with the <span class="hljs-string">"cjs"</span> output format<br></code></pre></td></tr></tbody></table></figure><p>这里是因为 cjs 不能包含顶级 await，修改为</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> path <span class="hljs-keyword">from</span> <span class="hljs-string">'path'</span><br><span class="hljs-keyword">import</span> { fileURLToPath } <span class="hljs-keyword">from</span> <span class="hljs-string">'url'</span><br><span class="hljs-keyword">import</span> fsExtra <span class="hljs-keyword">from</span> <span class="hljs-string">'fs-extra'</span><br><br><span class="hljs-keyword">const</span> { readdir } = fsExtra<br><br>;(<span class="hljs-keyword">async</span> () =&gt; {<br>  <span class="hljs-keyword">const</span> __filename = <span class="hljs-title function_">fileURLToPath</span>(<span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">url</span>)<br>  <span class="hljs-keyword">const</span> __dirname = path.<span class="hljs-title function_">dirname</span>(__filename)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(__dirname)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">await</span> <span class="hljs-title function_">readdir</span>(__dirname))<br>})()<br></code></pre></td></tr></tbody></table></figure><p>捆绑没有问题，但运行会出错</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">node dist/bin.js<br></code></pre></td></tr></tbody></table></figure><p>首先是第一个错误</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">var import_path = __toESM(require(<span class="hljs-string">"path"</span>), 1);<br>                  ^<br><br>ReferenceError: require is not defined <span class="hljs-keyword">in</span> ES module scope, you can use import instead<br>This file is being treated as an ES module because it has a <span class="hljs-string">'.js'</span> file extension and <span class="hljs-string">'esm-demo\packages\esm-include-cjs-lib\package.json'</span> contains <span class="hljs-string">"type"</span>: <span class="hljs-string">"module"</span>. To<br>treat it as a CommonJS script, rename it to use the <span class="hljs-string">'.cjs'</span> file extension.<br></code></pre></td></tr></tbody></table></figure><p>它说这是一个 esm 包，默认代码是 esm 模块，如果希望是以 cjs 模块执行，需要修改为 cjs 后缀。</p><p>修改命令</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">esbuild src/bin.ts --platform=node --outfile=dist/bin.cjs --bundle --sourcemap --format=cjs<br></code></pre></td></tr></tbody></table></figure><p>然后出现了第二个错误</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">TypeError [ERR_INVALID_ARG_TYPE]: The <span class="hljs-string">"path"</span> argument must be of <span class="hljs-built_in">type</span> string or an instance of URL. Received undefined<br></code></pre></td></tr></tbody></table></figure><p>相关代码</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// src/bin.ts</span><br><span class="hljs-keyword">var</span> import_path = <span class="hljs-title function_">__toESM</span>(<span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>), <span class="hljs-number">1</span>)<br><span class="hljs-keyword">var</span> import_url = <span class="hljs-built_in">require</span>(<span class="hljs-string">'url'</span>)<br><span class="hljs-keyword">var</span> import_fs_extra = <span class="hljs-title function_">__toESM</span>(require_lib(), <span class="hljs-number">1</span>)<br><span class="hljs-keyword">var</span> import_meta = {}<br><span class="hljs-keyword">var</span> { readdir } = import_fs_extra.<span class="hljs-property">default</span><br>;(<span class="hljs-keyword">async</span> () =&gt; {<br>  <span class="hljs-keyword">const</span> __filename = (<span class="hljs-number">0</span>, import_url.<span class="hljs-property">fileURLToPath</span>)(import_meta.<span class="hljs-property">url</span>) <span class="hljs-comment">// 这里是关键，因为 import.meta.url 在 cjs 代码中是空的</span><br>  <span class="hljs-keyword">const</span> __dirname = import_path.<span class="hljs-property">default</span>.<span class="hljs-title function_">dirname</span>(__filename)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(__dirname)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">await</span> <span class="hljs-title function_">readdir</span>(__dirname))<br>})()<br></code></pre></td></tr></tbody></table></figure><p>根据<a href="https://github.com/evanw/esbuild/issues/1492#issuecomment-893144483">这个 issue 中作者的回答</a>，修改命令</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">esbuild src/bin.ts --platform=node --outfile=dist/bin.cjs --inject:./import-meta-url.js --define:import.meta.url=import_meta_url --bundle --sourcemap --format=cjs<br></code></pre></td></tr></tbody></table></figure><p>遗憾的是，这不再生效，bundle 的代码如下</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// import-meta-url.js</span><br><span class="hljs-keyword">var</span> import_meta_url2 = <span class="hljs-built_in">require</span>(<span class="hljs-string">'url'</span>).<span class="hljs-title function_">pathToFileURL</span>(__filename)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(import_meta_url2)<br><br><span class="hljs-comment">// src/bin.ts</span><br><span class="hljs-keyword">var</span> import_path = <span class="hljs-title function_">__toESM</span>(<span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>), <span class="hljs-number">1</span>)<br><span class="hljs-keyword">var</span> import_url = <span class="hljs-built_in">require</span>(<span class="hljs-string">'url'</span>)<br>;(<span class="hljs-keyword">async</span> () =&gt; {<br>  <span class="hljs-keyword">const</span> __filename2 = (<span class="hljs-number">0</span>, import_url.<span class="hljs-property">fileURLToPath</span>)(import_meta_url)<br>  <span class="hljs-keyword">const</span> __dirname = import_path.<span class="hljs-property">default</span>.<span class="hljs-title function_">dirname</span>(__filename2)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(__dirname)<br>})()<br></code></pre></td></tr></tbody></table></figure><p>可以明显看到，注入的脚本的变量名被修改了，从 <code>import_meta_url</code> =&gt; <code>import_meta_url2</code>，这是奇怪的问题。。。</p><p>或许可以替换 <code>--inject</code> =&gt; <code>--banner</code></p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">esbuild src/bin.ts --platform=node --outfile=dist/bin.cjs --define:import.meta.url=import_meta_url --bundle --sourcemap --banner:js=<span class="hljs-string">"var import_meta_url = require('url').pathToFileURL(__filename)"</span> --format=cjs<br></code></pre></td></tr></tbody></table></figure><p>这样就生效了</p><hr><p>那么，运行 esm bundle 呢？<br>也会出现错误</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">'Dynamic require of "'</span> + x + <span class="hljs-string">'" is not supported'</span>)<br><br><span class="hljs-title class_">Error</span>: <span class="hljs-title class_">Dynamic</span> <span class="hljs-built_in">require</span> <span class="hljs-keyword">of</span> <span class="hljs-string">"fs"</span> is not supported<br></code></pre></td></tr></tbody></table></figure><p>按照<a href="https://github.com/evanw/esbuild/issues/1921#issuecomment-1152991694">这里</a>的解决方法修改命令</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">esbuild src/bin.ts --platform=node --outfile=dist/bin.esm.js --bundle --sourcemap --banner:js=<span class="hljs-string">"import { createRequire } from 'module';const require = createRequire(import.meta.url);"</span> --format=esm<br></code></pre></td></tr></tbody></table></figure><p>现在，bundle 后的代码可以终于运行了。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>或许 esm only 看起来很好，也有 tree shaking 看起来很棒的想法，但现在，它都还没有真正在生产中可用。包括一系列重要的项目都没有迁移，包括 react/vscode/electron/vite 等等。实际上，在此之前，许多人（吾辈亦然）也都使用 esm 模块来编写代码，只是最终的 bundle 产物可能不是 esm，例如在浏览器中可能是 iife，在 nodejs 中是 cjs，但绝大多数的应用层开发者并不关心这些，只有 lib 的维护者才会关心，esm only 则将包的复杂度也转移给了使用者，而且在 cjs 中引用 esm only 的包并没有真正可用的方案。相比于 esbuild/vite 这种解决实际问题的项目而言，esm only 运动更像是一场 web 前端圈内的狂欢。</p>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    <category term="前端" scheme="https://blog.rxliuli.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="工程化" scheme="https://blog.rxliuli.com/categories/%E5%89%8D%E7%AB%AF/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
    
    <category term="javascript" scheme="https://blog.rxliuli.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>新视点</title>
    <link href="https://blog.rxliuli.com/p/002e2156c7de4d7189c30e6af1eb76ee/"/>
    <id>https://blog.rxliuli.com/p/002e2156c7de4d7189c30e6af1eb76ee/</id>
    <published>2022-07-31T10:34:57.640Z</published>
    <updated>2022-08-01T13:38:45.518Z</updated>
    
    <content type="html"><![CDATA[<p>这周请了 5 天的年假，回去了一趟老家，虽然很多事物没有什么变化，但认知世界的眼睛发生了变化，便看到了一些不曾留意过的东西。</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEUbjwYBQkklYjA0npQ5lPuG5CY5w1TrycauJp-2mfqaDs4Fd5I727g8e0dlFTLBDyOu6IhZc5pgrQch-5RJtnFDW2TLNRPVO0Uf2M8sBDzsW59_noS-35qt9qbbalYk7O4u-zHM3_lh2cUVI2geI1v5=w1783-h1337-no" alt="爷爷的旧居被农田围上了"></p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEW3hKIshgwnBj1J8gF8_DxSYN4vqkH-9-YwW5rex0AhMC83CeIgBaZnvQrq5-CQpFoQUGd0-xXyGtOeawv1JDlZqEUWnoF6azruPZc25r-vt1oSIWrkPMh4X3OfmPZr_-m8EM165Q60jQGvYn0SYDTj=w1003-h1337-no" alt="高高的树"></p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEVEK4F8jbciGUedC-b6brnPPrg2ZTudwnhZtDhY-f_mgMStgc0jLgCeTyiGyZU00MRDVdkhn-8Aaw_pb7AQIHRLZwTPLGxUmDQMkgdsmuYK-31ahC067FEiwphbyvQRqHL2l_U3c0kOawTdpc2syupK=w1783-h1337-no" alt="家里的木头小板凳（真-实木）"></p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEWQycXqGJ3lAEw_0U4Y45_0TrUxzfyfv4Hi-Xy9lpVk6i5hFPS3FdtrfWiN8Um4lRWFDj5af96nRMsxs2Qqh1tkNuLIQ0pGy7BKH3QoYZjUu9ylKdUUPuyzUunK4YonIM_ym84GZCZEnqDTvfeKFvJo=w1003-h1337-no" alt="绿叶与树荫"></p><p>そら</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEWcA7J-vNw02TDt81Yp78AHcKwfiVTKtql18HYX3JuxTR7eP3Acpg228pew2MLDq9ReaLVnFYac3Mp5c9K3lgmNt8sKeQiJQa3F85_UTOa5rWYGOpKfjEChpADeLG2HMhVbI79PWsjZRl0x9m2EhJEY=w1783-h1337-no" alt="天空 1"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEVmQHOoTfUnt4QH64OkGfIezcJwM-OtAaE1oa4FKCPUiyGk7er8CF18TdokuwliI0wrT45ieKSstwRwkS310wvuhAxnStZV0Rk8x0Bj-3jbOISt3NdvFfLLLfEBaFQ30V1pA-J7uhYL7uveinI881EK=w1783-h1337-no" alt="天空 2"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEV2nr7K97amspV-Mld2XuzuiKFRBSidqvgEWk96AJz6A8JDV5zgOzkAlFr8xsXRB9hpQ6bHNAxwlsNCMFmLcyt9KcM6nSV6zp1ZL7_UuNAMSXH6SGCk-Cl8LhJynKpnPCWP3y9fRR7IZZtlArZCVcTD=w1783-h1337-no" alt="天空 3"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEV3aJOP24N1Umagfr_h7WTPmWDkpKXeixB03Y2Tp8zTq-jTJbuuE2T_q4zfNZOU7FUfRWtqDv2QsF2rNAfFIK7fI3RS-wXKFmi-Y34i816_yJROeYSM0ift8Snpsdn8NvT-f27gRSPEQtPLS99pm0Lo=w1783-h1337-no" alt="天空 4"></p><p>用树叶吹出来的声音，和吾辈想象中的差别有一点点大 ಡ ͜ ʖ ಡ</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEWeDljN4jFTG5zQ_pmASmE0VcnHOhwQ50Lh5YHOGUBrqFX9dlr6x2jZvzcso0lLtU68OL_psC_1yLJGk2DxX2xx7OfEA2ninK9qed68xi5xTzLaUPL9bk9QejSoCVYfWp2kHGH1gwspZFH_DM-t55TY=w1003-h1337-no" alt="树叶"></p><p>声音: <a href="https://1drv.ms/u/s!AqTwKbfzs-vyiocZXo9hbDbp7h7P2g">https://1drv.ms/u/s!AqTwKbfzs-vyiocZXo9hbDbp7h7P2g</a></p><p>魔幻现实，退林返耕（小时候玩的空地前几年被挖了个大坑（卖地），现在居然种上农作物了，一边是楼房，一边是农田，确实很可以。。。</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEWVlhEiCajamNxy6ILPC_dxFUZU6i5urH-6K7OH9HtyvWIiWAqjSlVnRicVHy6pdoRGcb5I2t-V39vcK1IgOnEPzACxQtl6WYhU-cvjl6AtJrwOi93_hDYFzJl4pXSxnlAGYPxKoccbhW2xokX5h25O=w1783-h1337-no" alt="退林返耕"></p><p>有一点空地就会被糟蹋，之前的小树林变成了养牛养鸭的地方</p><p><img src="https://pbs.twimg.com/media/FYaWY2nUYAAUW_J?format=jpg&amp;name=large" alt="被毁灭的小树林"></p><p>就算在石头中，也无法阻挡生长（这个照片是楼顶上长出的一颗草（生命会自己找到出路 #逃</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEXamFpVGGVIMkOEnP-cVQt4ypVGvdu5X08cZblmkCMCsD0NRF8_x9xBctONhta84i0YJqpCRdUONT2MWpKN6ZtweAqPNww34neFI3n5iK6YEeFRXbI_aMyBGn4pNgSbf7r66N8-iV8pe06RZTdh885v=w1003-h1337-no" alt="石头中长出的草"></p><p>あさひ</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEV2sIra0Ti4nkWvbNgufzLEWVnrHcBrMKd31vctz6D9jvzFUi5TjZxrla1mFkMT8B4zrh2HE8y7YuGUanPwdxwqex6hJNbE6kNnaI9wSCXDf_5aVdjBcBT6eU6vz7UbYieX05ECoYETU6woVGlVxmDO=w1783-h1337-no" alt="热"></p><p>雨后，木头上长出了蘑菇</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEWL7Sg_ejmjQTSHjRAL-pWS71ZLlDaaWg1gN0SlAISnlA6TvE09jYguQdgi8OqG9s2BFHtL6lbw_MK3SeIhBu2sBCusfn331rv1JQ99iLQHup43GnLtRfVMKn8YJeYIouZGW-P2ye28ij_VoeMAcen-=w1003-h1337-no" alt="蘑菇 1"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEVKWE7deSWE_l0faErNQROTp_Y5HBRnlpjV3Qmxaxr_-6pMVDhgLiDYaFedkBcwGz6HS4neAegODYozIO8NxmocoXro4FVhFV5t5kBnGPddVGR6ru1DNSRrLPdH_XGIdrL7s0XtCegxZjTv2Z3Bogtl=w1783-h1337-no" alt="蘑菇 2"></p><p>还未来得及成长的树叶</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEUKPipICU7gEA4W9vzt2qQ5YmcDpbi6eDJCLGA0Sn58VtwofDLuU6Quqsy-8P3bbOzkQN4tkZH3zFqwEcoYfHhQdRuZ61siwiphHX4iq-Pa0XDRVaPEbpMldtcdXna9WIKHoW1L7TMwyAFmduNtKJoG=w1003-h1337-no" alt="树芽"></p><p>在城市举目四望都是高楼，而在村庄，则大多数都是穿破天空的杨树，这也是为什么吾辈对天空拍照时总能拍到树的原因</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEVQBp1i4QG6aOhufPJUAam-Qb61KehmUktOyGjgWSGtVQSPTJaaIRMcIWSKqFImTa5c1byxBTJ7V1n0PMFeZRJPoacnUaGPvfbFqsETpQYd0odUWA3kPi_LFNUM1I2l14SV65OmzRdVNgmt_k8pZkwe=w1003-h1337-no" alt="远方只有树"></p><p>一个封闭的旧房间是如何飞进来了 4 只鸟儿</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEWdit-bbWs8Axt5GG8Yzd5oeohTkXYtzfkJEBSppQQZc-Mv2oBJp3Xg3Xn4UpQThwm5G9RXy4uH_VmMYqVZB0mWnBE9_bvt-m78TKnaDVEV24nIKoeQbtLVq8mi97KHfv3wr1SeMrev1YV4Cfm7F97X=w1003-h1337-no" alt="远摄"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEX5hkVhtW-DIfXhoDvtN6cNCz8nBEZiwvDdcWX9Bh3bSUBBnWC5A6R5w2O_xUjQI0bs1te1CgH96oVbO0OAxobeIjjPFlgG8-IaO_uCVjijxASb9UTFWJ9DTSyUcoE2hXywkdkYJxFZYJUiYP_qtV_P=w1003-h1337-no" alt="近摄"></p><p>蝉</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEWfki45Nw0Sf1OFRln3yNfrX4EylP-UqBo6bo9EJ2uey6wFYqN6nuL2g0umdmbcYXGTwgXQvmbnxOxyhx12fWJF4Zgu57fTbMR2VzchXyOBHEpWks9qk7QXwmYJFkiXvWo5H_SUiLo80j5d5cEBSti7=w1003-h1337-no" alt="蝉 1"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEUrhz_eXrL_-SlCMfWIrZJ2mL5vzD1JUJ-KfxbCtN6cslcPoVGzKG1t15g0ChM7xvhlAb6HxGVLMOn6ByBMIxrcoqnRZHy_eha0Grn2v8d6kIiDSE9J-GUPlXCIDPC2nkQi-TD-maoA57Ei1xD4cIcu=w1783-h1337-no" alt="蝉 2"></p><p>雨过天晴，藏身于瓦砾之中的蜗牛</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEXw0ivAzpg1RvfgAN52iHUxEbidSvE06GbYY0VJ5I0ZhPRGkkJ_oUwGgoR0SOTvxRPcHn6a7UvddT8Tlf3Ko8Vq84r4Ezawo25WqF9J3Uqnf6kw3K4xAhE1ofo2d6qBnRrpBTC8NwPfR401Hian_zDD=w1003-h1337-no" alt="蜗牛 1"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEXWuXuRv1zFFTKLVtOCMMGdV4XtS5my_zVS8QieQU0CC4gAdk7omxeMxWh-nkTVi1BW_nrC6sMlfxlJ3G47CAo3ZkUI0P8D3kb8qK8bhnRja3lukio74DkNl7I9Ed3nwz_3ERoxn2lVcmTX-VD1uqJo=w1003-h1337-no" alt="蜗牛 2"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEWj3w5dJ6xBqf03kuocff0Dag1ejVUCuDQn02uWazi-d-lpw65Dz9VA3T9d7fb5qIJKpohehJYygoKTloZeEzE70CA7JA-6vX-XUTnoEbNW_b_vXRIKwJicPlUIttEplUgLxzzYdAxvS2K6E3_DjLDk=w1003-h1337-no" alt="蜗牛 3"></p><p>死去的蝉（上图中是昨天遇到的一只活的蝉，今天早上就碰到一只死的</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEWABaINBKHI--vkncMp7VzMimo7P5zS0rrCvcG426ilfXiYnkOgLsq7Ge4zJ7ed9CfxZns83dOGh_-bOve_lR6n45fcsfbUA69w2ZE51Lg24BRipEgcY-RJx7309yHdbiW2VWSsL5uIOS4AjR3xtjXM=w1003-h1337-no" alt="死去的蝉 1"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEVWO5YaiXM7JHE-FwjUU6TikFZa0oQ2WDhEhikyYdmVIOms_VxyEXnjhn1nI5Hbh8H-QILYjvLCIn4FmzQgHg85DgBgNlcs-B1--ci5Lg9-6koWtXfOfkZ8CL8Qw6AmlSEbnL4vRfi7VKAoaoqWugJf=w1003-h1337-no" alt="死去的蝉 2"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEX3Er4MoEmXxG5HRj-bftsWbfj-Om_cixRZ-nhcw5HsY5Ip-EkC2zD_2KYAZg3R2n-WxTJkB6sjLwDg--kma96_vduMp-wObS1GNDJXS4yCAGX9rl26B8NMHvTeqeuhAG20OMEllbFWRAnVeLMCycw9=w1003-h1337-no" alt="死去的蝉 3"></p><p>天空确实感觉不错，又拍了几张</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEXBVQey0YwzB2hM5f_Ffs6X-mrRwjjxypJ3FhEE33vIxidrXk1eSnKGYddvkrSvvQj5Zy1PF2CNVbt1g-nOefKin4t5XNOZOnuDo-782mjsSs8pMDOWXh0d2IzYmdepK18upJAeHwyex2-qufzXAn4z=w1783-h1337-no" alt="天空 1"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEUx6z0TMn6WegAknHxa8qQ7uwHMqBxGsyPbDZKb_rrfVgCwrDkac-7g-kx6OBdVDL3GQuXvsZGdUFOF-BRwbPlRfQ3_kcofnw4d0uMflhcO6BLjy-VLO0DROot6xFEEIAEVPE5ARyyLsZft9VmfY-7N=w1783-h1337-no" alt="天空 2"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEWz4K0RHTkhowf3BlqIx6ThTktRpOhcCdCY2IKXyukX2Q92Ed-k1xmWG-VYbdRTZhW8S43l4NmVHg4sHfxRQqb-nkRQjBIsiAnWIqifPcVejM8fUfJgeeSWwIxD4RMDFRWwBZKSc23VQlOShiimbXLj=w1783-h1337-no" alt="天空 3"></p><p>夕阳</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEUVfq4-6jTzSsm8ca_6oVzBYuKZDfWmOhd5TvicErnE5IzvbCimPl9kR7MJzGCulmaMvUuqB34_JFScXRIFf6U--cQd0ynuzPUS_5MeRSn52BEe3ktMonS99rvHEoI-TiiLR-O8YeTnryalX8L-VjXu=w1783-h1337-no" alt="夕阳 2"></p><p>あめ ☔</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEW5MZJTl1G7c3jywXNmamyk8C7ooR_z9pWw2wAaeCfkSQKo9wY4S89ldfdfX1vSpqq8jBvIzOCaO6leisV4QsbjJ10HT7cLSTJh2s3NtD46mc-nFgLd7Q2Jt6z6JqjS84M0fG8PVPda27uB_ofeXPhA=w1003-h1337-no" alt="あめ"></p><p>雨中的云。。。是灰的？</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEX3opFAmhwzUskuulmfyGJ1-i4vLi3DMRFrXlkUJz2v7fuXQqNP5zKteR-v7aKnsJ6OXCRG3xmPKObkD2eolc2TKV6dcdOrQnntIE_-jVP4WminSTDwSJ_goxDjOum9U6vXILaHACblYmPQRjG0QWsg=w1882-h1337-no" alt="雨中的云"></p><p>蜗牛的世界，是二维的</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEVLZ6FSdDtgbFg-OzVEA9fo9iTVlBs5G4mke_yrzcJ14CLuc2HYOQHfchkKnzlNp3zPCb5L46oGasJI9bf0dK_iT08zwhMyieJpKcPiwrE0xxNoQW6cOnCwvcB4XI3jrBui36PvbIKTKAF30oaUQaDC=w1003-h1337-no" alt="蜗牛 1"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEWGdVVFVZDH3p1Gtb6gG0eROfuill6rtLb7Y0g5hIFSUApSeVvdjqj0LR9IvMCkspdDb2ZcuW0VjRkbuaon6d_naka-VLd7OxgeJrqYQ67R9TuLvTTIayXlZQp3u92VSQGWT-F4b6ihHeOkFo4_bXhV=w1003-h1337-no" alt="蜗牛 2"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEVrWKUe22SKcplrt0rLEwfXyxNnCfgt9P6nqgw3BnqvKfQ99jm8-ItHNUE5fWKnliLMd9cSt6xmtssSBCA12vAcmF25ezBpVb2QdHhNIVA3L79aXcTwzDMP88lfWpJeIji2N1WoFz74g8a6KpunhDRm=w1003-h1337-no" alt="蜗牛 3"></p><p>雨后真的有很多蜗牛出来</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEU4nqisIfb96Xu-YnP3SO27JOu2TKiEDR8iCnFl5aRXSDjOMRHLnzxnCc8khjeJcIwL92ywi45OvioRjvSAuD7g6x4vdbskZIxA9HTY_6o05O_yZNHEmZftYaJeHHvR9jKxexgjL5YFbTpO9A4vDWaB=w1003-h1337-no" alt="蜗牛 4"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AL9nZEV2rSDwfngA00LiBn52oSoZ7fzUjqaessP42i-k_PuqErzmmoNBKAiRpYae2SihP7MpA5pTRGlDAorp3aEj7q_-J2B6ubujZA62PnOxhdFl-hwIyv4qDoXzOdff9qsOQiIzs9KWhTRZXgdO-IwptgJe=w1003-h1337-no" alt="蜗牛 5"></p>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    <category term="其他" scheme="https://blog.rxliuli.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    <category term="生活" scheme="https://blog.rxliuli.com/categories/%E5%85%B6%E4%BB%96/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="个人" scheme="https://blog.rxliuli.com/tags/%E4%B8%AA%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>使用 jscodeshift 做重构</title>
    <link href="https://blog.rxliuli.com/p/e124cb73d5864c24bb5547cd3431e338/"/>
    <id>https://blog.rxliuli.com/p/e124cb73d5864c24bb5547cd3431e338/</id>
    <published>2022-07-14T13:45:05.338Z</published>
    <updated>2022-08-07T10:36:38.099Z</updated>
    
    <content type="html"><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>最近迁移了一些 API，因为所有前端项目都在同一个 monorepo 中，所以作为 lib 维护者吾辈还需要帮助迁移其他使用的模块。由于项目数量较多（大约有 30 多个），手动迁移非常麻烦而且难以测试。所以在调研了一些现有的大规模重构的方法后，吾辈选择了 jscodeshift 作为主要工具来做自动化迁移。<br>那么，它相比于使用 ide 的重构功能、使用字符串搜索替换亦或是手工一个个替换有什么不同呢？</p><ul><li>ide（vscode）的重构大多数时候不太好用，尤其在 monorepo 中以及包含 vue 文件时，它基本上无效的。</li><li>字符串替换我们经常使用，它只能处理简单的情况，并不能处理一些更复杂的情况，例如替换导入的变量并修改下面对应的值。</li><li>手工一个个替换最大的问题是浪费时间，并且难以形成积累以供后续复用，处理大量文件时是不现实的。</li></ul><p><img src="/resources/911c2de3c0244a2bafca13e8c32d2f0f.svg" alt="codemod.drawio.svg"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>jscodeshift 支持多种解析器，包括常见的 babel、ts、tsx，也提供链式调用 API，类似于 jquery。在调研的过程中，吾辈还发现了一个非常好的工具 <a href="https://astexplorer.net/">astexplorer</a>，它可以非常方便的浏览一段代码的 ast，便于确认如何找到想要处理的 ast 节点。</p><p><img src="/resources/cffe2a8a0f69452bbaca26977e4a9ade.png" alt="1658135431847"></p><p>jscodeshift 同时提供了 cli/lib 的使用方式，下面是基本的使用命令，它会在匹配的 ts 文件上运行转换脚本 transform.ts，<code>-d</code> 表示尝试运行并确定影响范围。</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">jscodeshift -t=./transform.ts --parser=ts ./*.ts -d<br></code></pre></td></tr></tbody></table></figure><h3 id="替换-import-导入的变量并替换所有使用到的-API"><a href="#替换-import-导入的变量并替换所有使用到的-API" class="headerlink" title="替换 import 导入的变量并替换所有使用到的 API"></a>替换 import 导入的变量并替换所有使用到的 API</h3><p>一种需求是将命名空间导入重构为命名导入，例如将 <code>import * as _ from 'lodash'</code> 转换为 <code>import { uniq } from 'lodash'</code> 便于构建工具能正确的 tree shaking。</p><p>转换前</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> _ <span class="hljs-keyword">from</span> <span class="hljs-string">'lodash'</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(_.<span class="hljs-title function_">sort</span>(_.<span class="hljs-title function_">uniq</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>])))<br></code></pre></td></tr></tbody></table></figure><p>转换后</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> { sort, uniq } <span class="hljs-keyword">from</span> <span class="hljs-string">'lodash'</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">sort</span>(<span class="hljs-title function_">uniq</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>])))<br></code></pre></td></tr></tbody></table></figure><p>这里只需要找到引用命名空间的所有调用，并分别替换<strong>导入</strong>与<strong>命名空间方法调用</strong>即可，以下是实现</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> {<br>  <span class="hljs-title class_">Identifier</span>,<br>  <span class="hljs-title class_">ImportDeclaration</span>,<br>  <span class="hljs-title class_">MemberExpression</span>,<br>  <span class="hljs-title class_">Transform</span>,<br>} <span class="hljs-keyword">from</span> <span class="hljs-string">'jscodeshift'</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">replaceImport</span>: <span class="hljs-title class_">Transform</span> = <span class="hljs-function">(<span class="hljs-params">fileInfo, api</span>) =&gt;</span> {<br>  <span class="hljs-keyword">const</span> j = api.<span class="hljs-property">j</span><br>  <span class="hljs-keyword">const</span> root = <span class="hljs-title function_">j</span>(fileInfo.<span class="hljs-property">source</span>)<br>  <span class="hljs-keyword">const</span> importNames = root<br>    .<span class="hljs-title function_">find</span>(j.<span class="hljs-property">ImportDeclaration</span>)<br>    .<span class="hljs-title function_">find</span>(j.<span class="hljs-property">ImportNamespaceSpecifier</span>)<br>    .<span class="hljs-title function_">find</span>(j.<span class="hljs-property">Identifier</span>)<br>    .<span class="hljs-title function_">nodes</span>()<br>    .<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">node</span>) =&gt;</span> (node <span class="hljs-keyword">as</span> <span class="hljs-title class_">Identifier</span>).<span class="hljs-property">name</span>)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(importNames)<br>  <span class="hljs-keyword">const</span> list = importNames.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">name</span>) =&gt;</span> ({<br>    name,<br>    <span class="hljs-attr">list</span>: root<br>      .<span class="hljs-title function_">find</span>(j.<span class="hljs-property">MemberExpression</span>, {<br>        <span class="hljs-attr">object</span>: { name },<br>      })<br>      .<span class="hljs-title function_">nodes</span>()<br>      .<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">node</span>) =&gt;</span> ((node <span class="hljs-keyword">as</span> <span class="hljs-title class_">MemberExpression</span>).<span class="hljs-property">property</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">Identifier</span>).<span class="hljs-property">name</span>),<br>  }))<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(list)<br>  list.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">{ name, list }</span>) =&gt;</span> {<br>    root<br>      .<span class="hljs-title function_">find</span>(j.<span class="hljs-property">ImportDeclaration</span>, {<br>        <span class="hljs-attr">specifiers</span>: [{ <span class="hljs-attr">type</span>: <span class="hljs-string">'ImportNamespaceSpecifier'</span>, <span class="hljs-attr">local</span>: { name } }],<br>      })<br>      .<span class="hljs-title function_">replaceWith</span>(<span class="hljs-function">(<span class="hljs-params">path</span>) =&gt;</span> {<br>        <span class="hljs-keyword">const</span> node = path.<span class="hljs-property">node</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">ImportDeclaration</span><br>        node.<span class="hljs-property">specifiers</span> = list.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">name</span>) =&gt;</span><br>          j.<span class="hljs-title function_">importSpecifier</span>(j.<span class="hljs-title function_">identifier</span>(name)),<br>        )<br>        <span class="hljs-keyword">return</span> node<br>      })<br>    list.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">p</span>) =&gt;</span> {<br>      root<br>        .<span class="hljs-title function_">find</span>(j.<span class="hljs-property">MemberExpression</span>, { <span class="hljs-attr">object</span>: { name }, <span class="hljs-attr">property</span>: { <span class="hljs-attr">name</span>: p } })<br>        .<span class="hljs-title function_">replaceWith</span>(j.<span class="hljs-title function_">identifier</span>(p))<br>    })<br>  })<br>  <span class="hljs-keyword">return</span> root.<span class="hljs-title function_">toSource</span>()<br>}<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> replaceImport<br></code></pre></td></tr></tbody></table></figure><h3 id="将废弃的-API-替换为新的-API-调用"><a href="#将废弃的-API-替换为新的-API-调用" class="headerlink" title="将废弃的 API 替换为新的 API 调用"></a>将废弃的 API 替换为新的 API 调用</h3><p>还有一些时候我们废弃了一些 API，但目前仍然有引用，为了避免堆叠兼容式的代码，需要将使用旧 API 的代码转换为使用新 API 的代码。<br>例如我们希望替换以下代码</p><p>转换前</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> { <span class="hljs-title class_">RendererApiFactory</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'ipc-renderer'</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> { vmBasicMessageChannel } = <span class="hljs-title class_">RendererApiFactory</span>.<span class="hljs-title function_">createAll</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> { systemApi } = <span class="hljs-title class_">RendererApiFactory</span>.<span class="hljs-title function_">createAllIpcMainApi</span>(<br>  vmBasicMessageChannel,<br>)<br></code></pre></td></tr></tbody></table></figure><p>转换后</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> { <span class="hljs-title class_">ApiFactory</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'app-utils'</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> { basicMessageChannel, systemApi } =<br>  <span class="hljs-title class_">ApiFactory</span>.<span class="hljs-title function_">createAll</span>(basicMessageChannel)<br></code></pre></td></tr></tbody></table></figure><p>这里替换稍微复杂一点，涉及到以下几个操作</p><ul><li>删除 import 的指定导入</li><li>创建新的导入</li><li>删除变量</li><li>创建新的导出</li><li>清理空的导入、导出</li></ul><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> { <span class="hljs-title class_">Identifier</span>, <span class="hljs-title class_">ObjectProperty</span>, <span class="hljs-title class_">Transform</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'jscodeshift'</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">depretedApi</span>: <span class="hljs-title class_">Transform</span> = <span class="hljs-function">(<span class="hljs-params">fileInfo, api</span>) =&gt;</span> {<br>  <span class="hljs-keyword">const</span> j = api.<span class="hljs-property">j</span><br>  <span class="hljs-keyword">const</span> root = <span class="hljs-title function_">j</span>(fileInfo.<span class="hljs-property">source</span>)<br><br>  <span class="hljs-keyword">const</span> findImport = root<br>    .<span class="hljs-title function_">find</span>(j.<span class="hljs-property">ImportDeclaration</span>, { <span class="hljs-attr">source</span>: { <span class="hljs-attr">value</span>: <span class="hljs-string">'ipc-renderer'</span> } })<br>    .<span class="hljs-title function_">filter</span>(<br>      <span class="hljs-function">(<span class="hljs-params">path</span>) =&gt;</span><br>        <span class="hljs-title function_">j</span>(path.<span class="hljs-property">node</span>).<span class="hljs-title function_">find</span>(j.<span class="hljs-property">ImportSpecifier</span>, {<br>          <span class="hljs-attr">imported</span>: { <span class="hljs-attr">name</span>: <span class="hljs-string">'RendererApiFactory'</span> },<br>        }).<span class="hljs-property">length</span> !== <span class="hljs-number">0</span>,<br>    )<br>  <span class="hljs-keyword">if</span> (findImport.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) {<br>    <span class="hljs-keyword">return</span><br>  }<br>  findImport<br>    .<span class="hljs-title function_">find</span>(j.<span class="hljs-property">ImportSpecifier</span>, { <span class="hljs-attr">imported</span>: { <span class="hljs-attr">name</span>: <span class="hljs-string">'RendererApiFactory'</span> } })<br>    .<span class="hljs-title function_">remove</span>()<br>  findImport.<span class="hljs-title function_">insertAfter</span>(<br>    j.<span class="hljs-title function_">importDeclaration</span>(<br>      [j.<span class="hljs-title function_">importSpecifier</span>(j.<span class="hljs-title function_">identifier</span>(<span class="hljs-string">'ApiFactory'</span>))],<br>      j.<span class="hljs-title function_">literal</span>(<span class="hljs-string">'app-utils'</span>),<br>    ),<br>  )<br>  <span class="hljs-keyword">if</span> (findImport.<span class="hljs-title function_">find</span>(j.<span class="hljs-property">ImportSpecifier</span>).<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) {<br>    findImport.<span class="hljs-title function_">remove</span>()<br>  }<br><br>  root<br>    .<span class="hljs-title function_">find</span>(j.<span class="hljs-property">ExportNamedDeclaration</span>)<br>    .<span class="hljs-title function_">filter</span>(<br>      <span class="hljs-function">(<span class="hljs-params">path</span>) =&gt;</span><br>        <span class="hljs-title function_">j</span>(path.<span class="hljs-property">node</span>).<span class="hljs-title function_">find</span>(j.<span class="hljs-property">MemberExpression</span>, {<br>          <span class="hljs-attr">object</span>: { <span class="hljs-attr">name</span>: <span class="hljs-string">'RendererApiFactory'</span> },<br>          <span class="hljs-attr">property</span>: { <span class="hljs-attr">name</span>: <span class="hljs-string">'createAll'</span> },<br>        }).<span class="hljs-property">length</span> !== <span class="hljs-number">0</span>,<br>    )<br>    .<span class="hljs-title function_">remove</span>()<br>  <span class="hljs-keyword">const</span> createAllIpcMainApi = root.<span class="hljs-title function_">find</span>(j.<span class="hljs-property">ExportNamedDeclaration</span>).<span class="hljs-title function_">filter</span>(<br>    <span class="hljs-function">(<span class="hljs-params">path</span>) =&gt;</span><br>      <span class="hljs-title function_">j</span>(path.<span class="hljs-property">node</span>).<span class="hljs-title function_">find</span>(j.<span class="hljs-property">MemberExpression</span>, {<br>        <span class="hljs-attr">object</span>: { <span class="hljs-attr">name</span>: <span class="hljs-string">'RendererApiFactory'</span> },<br>        <span class="hljs-attr">property</span>: { <span class="hljs-attr">name</span>: <span class="hljs-string">'createAllIpcMainApi'</span> },<br>      }).<span class="hljs-property">length</span> !== <span class="hljs-number">0</span>,<br>  )<br>  <span class="hljs-keyword">const</span> keys = createAllIpcMainApi<br>    .<span class="hljs-title function_">find</span>(j.<span class="hljs-property">ObjectPattern</span>)<br>    .<span class="hljs-title function_">find</span>(j.<span class="hljs-property">ObjectProperty</span>)<br>    .<span class="hljs-title function_">nodes</span>()<br>    .<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">node</span>) =&gt;</span> ((node <span class="hljs-keyword">as</span> <span class="hljs-title class_">ObjectProperty</span>).<span class="hljs-property">key</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">Identifier</span>).<span class="hljs-property">name</span>)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(keys)<br>  createAllIpcMainApi.<span class="hljs-title function_">insertAfter</span>(<br>    <span class="hljs-title function_">j</span>(<br>      <span class="hljs-string">`export const { <span class="hljs-subst">${[<span class="hljs-string">'basicMessageChannel'</span>, ...keys].join(</span></span><br><span class="hljs-subst"><span class="hljs-string">        <span class="hljs-string">', '</span>,</span></span><br><span class="hljs-subst"><span class="hljs-string">      )}</span> } = ApiFactory.createAll()`</span>,<br>    )<br>      .<span class="hljs-title function_">find</span>(j.<span class="hljs-property">ExportNamedDeclaration</span>)<br>      .<span class="hljs-title function_">nodes</span>()[<span class="hljs-number">0</span>],<br>  )<br>  createAllIpcMainApi.<span class="hljs-title function_">remove</span>()<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(root.<span class="hljs-title function_">toSource</span>())<br>  <span class="hljs-keyword">return</span> root.<span class="hljs-title function_">toSource</span>()<br>}<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> depretedApi<br></code></pre></td></tr></tbody></table></figure><p>这里可以看到，吾辈并未使用 jscodeshift 构建 ast 的 api，而是直接使用了字符串拼接的方法。主要是使用 jscodeshift 的 api 构建过于繁琐，所以直接拼接字符串然后解析可能更简单一点。</p><h3 id="替换方法调用到多个参数与对象参数"><a href="#替换方法调用到多个参数与对象参数" class="headerlink" title="替换方法调用到多个参数与对象参数"></a>替换方法调用到多个参数与对象参数</h3><p>除此之外，我们还能变换方法调用的参数，例如将多个参数转换为对象参数（这在 ide 中是现成的功能）</p><p>转换前</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-title function_">show</span>(<span class="hljs-string">'liuli'</span>, <span class="hljs-number">17</span>, <span class="hljs-literal">false</span>)<br></code></pre></td></tr></tbody></table></figure><p>转换后</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-title function_">show</span>({ <span class="hljs-attr">name</span>: <span class="hljs-string">'liuli'</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">17</span>, <span class="hljs-attr">sex</span>: <span class="hljs-literal">false</span> })<br></code></pre></td></tr></tbody></table></figure><p>这里我们仅需要找到需要处理的函数调用，然后转换其参数即可。</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> { <span class="hljs-title class_">CallExpression</span>, <span class="hljs-title class_">Identifier</span>, <span class="hljs-title class_">Transform</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">'jscodeshift'</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">replaceParams</span>: <span class="hljs-title class_">Transform</span> = <span class="hljs-function">(<span class="hljs-params">fileInfo, api</span>) =&gt;</span> {<br>  <span class="hljs-keyword">const</span> j = api.<span class="hljs-property">j</span><br>  <span class="hljs-keyword">const</span> root = <span class="hljs-title function_">j</span>(fileInfo.<span class="hljs-property">source</span>)<br><br>  <span class="hljs-keyword">const</span> names = [<span class="hljs-string">'name'</span>, <span class="hljs-string">'age'</span>, <span class="hljs-string">'sex'</span>]<br>  root<br>    .<span class="hljs-title function_">find</span>(j.<span class="hljs-property">CallExpression</span>, { <span class="hljs-attr">callee</span>: { <span class="hljs-attr">type</span>: <span class="hljs-string">'Identifier'</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">'show'</span> } })<br>    .<span class="hljs-title function_">replaceWith</span>(<span class="hljs-function">(<span class="hljs-params">path</span>) =&gt;</span> {<br>      <span class="hljs-keyword">const</span> node = path.<span class="hljs-property">node</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">CallExpression</span><br>      <span class="hljs-keyword">const</span> args = node.<span class="hljs-property">arguments</span><br>      node.<span class="hljs-property">arguments</span> = [<br>        j.<span class="hljs-title function_">objectExpression</span>(<br>          names.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">name, i</span>) =&gt;</span><br>            j.<span class="hljs-title function_">objectProperty</span>(j.<span class="hljs-title function_">identifier</span>(name), args[i] <span class="hljs-keyword">as</span> <span class="hljs-title class_">Identifier</span>),<br>          ),<br>        ),<br>      ]<br>      <span class="hljs-keyword">return</span> node<br>    })<br><br>  <span class="hljs-keyword">return</span> root.<span class="hljs-title function_">toSource</span>()<br>}<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> replaceParams<br></code></pre></td></tr></tbody></table></figure><h2 id="踩到的一些坑"><a href="#踩到的一些坑" class="headerlink" title="踩到的一些坑"></a>踩到的一些坑</h2><h3 id="使用-ts-解析器得到的结果与-jscodeshift-的-API-差距很大"><a href="#使用-ts-解析器得到的结果与-jscodeshift-的-API-差距很大" class="headerlink" title="使用 ts 解析器得到的结果与 jscodeshift 的 API 差距很大"></a>使用 ts 解析器得到的结果与 jscodeshift 的 API 差距很大</h3><p>ts 的 ast 非常特立独行，可以在 <a href="https://astexplorer.net/">astexplorer</a> 看到。吾辈一般会选择使用 @typescript-eslint/parser，它既能解析 js/ts/tsx，又能与 jscodeshift 的 api 相结合判断如何检索节点。</p><h3 id="无法直接按类型找到泛型参数"><a href="#无法直接按类型找到泛型参数" class="headerlink" title="无法直接按类型找到泛型参数"></a>无法直接按类型找到泛型参数</h3><p>例如可以在 ast viewer 中看到节点 TSTypeParameterInstantiation</p><p><img src="/resources/48b7b59c126142358065492d2935f1cb.png" alt="1658133727745"></p><p>但却无法使用 jscodeshift 找到</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> root = <span class="hljs-title function_">j</span>(<span class="hljs-string">`wrap&lt;IHelloApi&gt;()`</span>)<br><span class="hljs-title function_">expect</span>(root.<span class="hljs-title function_">find</span>(j.<span class="hljs-property">TSTypeParameterInstantiation</span>).<span class="hljs-property">length</span>).<span class="hljs-title function_">toBe</span>(<span class="hljs-number">0</span>)<br></code></pre></td></tr></tbody></table></figure><h3 id="string-prototype-replace-替换包含-的字符串时会出现奇怪的现象"><a href="#string-prototype-replace-替换包含-的字符串时会出现奇怪的现象" class="headerlink" title="string.prototype.replace 替换包含 $ 的字符串时会出现奇怪的现象"></a>string.prototype.replace 替换包含 $ 的字符串时会出现奇怪的现象</h3><p>运行下面这段代码，可能会得到让你意外的结果</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> s = <span class="hljs-string">'hell$$ w$$rld'</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s.<span class="hljs-title function_">replaceAll</span>(s, s)) <span class="hljs-comment">// hell$ w$rld</span><br></code></pre></td></tr></tbody></table></figure><p>这与 string.prototype.replace 的一些奇怪实现有关，具体参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace#%E4%BD%BF%E7%94%A8%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BD%9C%E4%B8%BA%E5%8F%82%E6%95%B0">mdn</a>，目前 StackOverflow 上的推荐方法是先处理一次要替换的值</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s.<span class="hljs-title function_">replaceAll</span>(s, s.<span class="hljs-title function_">replaceAll</span>(<span class="hljs-string">'$'</span>, <span class="hljs-string">'$$$$'</span>)))<br></code></pre></td></tr></tbody></table></figure><h3 id="glob-模式依赖于-bash"><a href="#glob-模式依赖于-bash" class="headerlink" title="glob 模式依赖于 bash"></a>glob 模式依赖于 bash</h3><p>这点很烦人，它并未使用 node-glob 之类的包来实现文件匹配，而是直接依赖于 shell 本身的 glob 匹配，而默认情况下并不支持 <code>**</code>。某种变通的方法是使用 <code>find + xargs</code> 来绕过</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts">find .<span class="hljs-comment">/*/src -iname '*.vue' -o -iname '*.ts' | xargs jscodeshift -t "./convertAppApi.ts" -d</span><br></code></pre></td></tr></tbody></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.toptal.com/javascript/write-code-to-rewrite-your-code">https://www.toptal.com/javascript/write-code-to-rewrite-your-code</a></li></ul>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    <category term="前端" scheme="https://blog.rxliuli.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="工程化" scheme="https://blog.rxliuli.com/categories/%E5%89%8D%E7%AB%AF/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
    
    <category term="typescript" scheme="https://blog.rxliuli.com/tags/typescript/"/>
    
    <category term="工程化" scheme="https://blog.rxliuli.com/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>实现一个玩具 lisp 运行时与解析器</title>
    <link href="https://blog.rxliuli.com/p/76673453498244cfbe34027678d75f67/"/>
    <id>https://blog.rxliuli.com/p/76673453498244cfbe34027678d75f67/</id>
    <published>2022-06-16T04:52:45.846Z</published>
    <updated>2022-06-21T04:50:17.099Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前看元循环求值器一节中使用 lisp 实现了一个 lisp 的运行时，吾辈也尝试使用 ts 来实现它。首先，这里展示一张曾经在书中出现过的图，表示一个运行时的基本组成是由 eval 和 apply 组成（看起来很像太极就是了）。eval 负责执行一个表达式，在 lisp 中，所有的代码都是表达式，这没什么问题。apply 则负责执行一个函数，将计算实参列表，并创建一个新的闭包环境绑定到形参上。</p><p><img src="/resources/45a7e01048f34e16911b58813165c1db.svg" alt="循环求值器.excalidraw.svg"></p><p>环境是一个有趣的话题，最初，吾辈了解到的是代换模型，即 <code>(+ (+ 1 2) 3)</code> 也可以被替换为 <code>(+ 1 2 3)</code>。后来，接触到修改变量后，每个函数就会绑定环境，然后动态获取某些值。</p><p>例如执行代码</p><figure class="highlight lisp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lisp">(<span class="hljs-name">define</span> (<span class="hljs-name">add</span> x y)<br>  (<span class="hljs-name">+</span> x y))<br>(<span class="hljs-name">add</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span>)<br></code></pre></td></tr></tbody></table></figure><p><img src="/resources/67194e14b93744cdac9f62a68531cd80.svg" alt="环境模型.excalidraw.svg"></p><h2 id="实现运行时"><a href="#实现运行时" class="headerlink" title="实现运行时"></a>实现运行时</h2><p>最初，吾辈也尝试使用 cons 实现，但后来发现面向对象更适合做这种事情（抽象语法树有不同的类型）。</p><p>考虑到复杂度的问题，目前实现了以下几种 ast</p><ul><li>primitive: 原始值，例如 number/boolean/string</li><li>variable: 变量，从当前环境中获取值</li><li>define: 在当前环境中定义新的值</li><li>set: 修改当前环境中指定的值</li><li>if: 条件判断，类似于三元表达式</li><li>cond: 条件判断，类似于 if/else-if/else</li><li>begin: 一系列表达式，结果为最后一个表达式的值</li><li>lambda: 函数，包含参数、函数体与定义时的环境，可以被 apply 执行</li><li>procedure: 一个需要执行的函数+参数</li></ul><p>先定义基础的 ast 接口，其中 eval 是每种 ast 都必须实现的方法，apply 则仅在 lambda ast 中存在。</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> <span class="hljs-title class_">AstType</span> =<br>  | <span class="hljs-string">'primitive'</span><br>  | <span class="hljs-string">'variable'</span><br>  | <span class="hljs-string">'define'</span><br>  | <span class="hljs-string">'set'</span><br>  | <span class="hljs-string">'if'</span><br>  | <span class="hljs-string">'cond'</span><br>  | <span class="hljs-string">'begin'</span><br>  | <span class="hljs-string">'lambda'</span><br>  | <span class="hljs-string">'procedure'</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IAst</span> {<br>  <span class="hljs-keyword">readonly</span> <span class="hljs-attr">type</span>: <span class="hljs-title class_">AstType</span><br>  <span class="hljs-built_in">eval</span>(<span class="hljs-attr">env</span>: <span class="hljs-title class_">Env</span>): <span class="hljs-built_in">any</span><br>}<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IApplyAst</span> {<br>  <span class="hljs-title function_">apply</span>(<span class="hljs-attr">args</span>: <span class="hljs-built_in">any</span>[]): <span class="hljs-built_in">any</span><br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>然后实现 Env 环境变量，应该能够获取、新增、修改以及扩展为一个新的环境</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Env</span> {<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">any</span>&gt;()<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> prototype: Env | <span class="hljs-literal">null</span> = <span class="hljs-literal">null</span></span>) {}<br>  <span class="hljs-title function_">get</span>(<span class="hljs-attr">k</span>: <span class="hljs-built_in">string</span>): <span class="hljs-built_in">any</span> {<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">map</span>.<span class="hljs-title function_">has</span>(k)<br>      ? <span class="hljs-variable language_">this</span>.<span class="hljs-property">map</span>.<span class="hljs-title function_">get</span>(k)<br>      : <span class="hljs-variable language_">this</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> !== <span class="hljs-literal">null</span><br>      ? <span class="hljs-variable language_">this</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">get</span>(k)<br>      : <span class="hljs-literal">null</span><br>  }<br>  <span class="hljs-title function_">define</span>(<span class="hljs-params">k: <span class="hljs-built_in">string</span>, v: <span class="hljs-built_in">any</span></span>) {<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">map</span>.<span class="hljs-title function_">has</span>(k)) {<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`变量 <span class="hljs-subst">${k}</span> 已定义`</span>)<br>    }<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">map</span>.<span class="hljs-title function_">set</span>(k, v)<br>  }<br>  <span class="hljs-title function_">set</span>(<span class="hljs-attr">k</span>: <span class="hljs-built_in">string</span>, <span class="hljs-attr">v</span>: <span class="hljs-built_in">any</span>): <span class="hljs-built_in">any</span> {<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">map</span>.<span class="hljs-title function_">has</span>(k)) {<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">map</span>.<span class="hljs-title function_">set</span>(k, v)<br>      <span class="hljs-keyword">return</span><br>    }<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> === <span class="hljs-literal">null</span>) {<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`当前环境没有定义 <span class="hljs-subst">${k}</span>`</span>)<br>    }<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">set</span>(k, v)<br>  }<br>  <span class="hljs-title function_">extend</span>(<span class="hljs-params">args: Record&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">any</span>&gt;</span>) {<br>    <span class="hljs-keyword">const</span> env = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Env</span>(<span class="hljs-variable language_">this</span>)<br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(args).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">[k, v]</span>) =&gt;</span> {<br>      env.<span class="hljs-property">map</span>.<span class="hljs-title function_">set</span>(k, v)<br>    })<br>    <span class="hljs-keyword">return</span> env<br>  }<br>}<br></code></pre></td></tr></tbody></table></figure><p>接下来我们分别实现每一个</p><h3 id="原始值"><a href="#原始值" class="headerlink" title="原始值"></a>原始值</h3><p>原始值很简单，例如 1,2,3,4,5… 这样的数字，或 true/false 布尔值，亦或是 “hello world” 这种字符串，它们都是原始值，可以直接声明和使用，所以 ast 也仅仅是保存值，并且执行的时候返回而已。</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrimitiveAst</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IAst</span> {<br>  <span class="hljs-keyword">readonly</span> <span class="hljs-attr">type</span>: <span class="hljs-title class_">AstType</span> = <span class="hljs-string">'primitive'</span><br>  <span class="hljs-keyword">readonly</span> value<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">value: <span class="hljs-built_in">any</span></span>) {}<br>  <span class="hljs-title function_">eval</span>(<span class="hljs-params"></span>) {<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> === <span class="hljs-literal">null</span>) {<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>    }<br>    <span class="hljs-keyword">if</span> (![<span class="hljs-string">'string'</span>, <span class="hljs-string">'number'</span>, <span class="hljs-string">'boolean'</span>].<span class="hljs-title function_">includes</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>)) {<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">'不支持的类型 '</span> + <span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>)<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span><br>  }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="variable-x2F-define-x2F-set-环境"><a href="#variable-x2F-define-x2F-set-环境" class="headerlink" title="variable/define/set 环境"></a>variable/define/set 环境</h3><p>variable/define/set 都是在操作环境，分别是获取、新增和修改。</p><p>有两点需要注意的地方</p><ul><li>variable 有点特殊，因为某些函数预先定义在语言中，例如 <code>+ - * / cons car cdr</code>，它们不需要定义就可以使用（类似于浏览器的 <code>native function</code>），所以这里有一个仅在内部使用的 <code>PrimitiveLambdaAst</code> 类型，可以看到其中实现了 <code>+ &gt; &lt; =</code> 这几个原生函数。</li><li>环境应该保存指向上一个环境的索引，这里为了简单实现使用了引用复制。</li></ul><p><img src="/resources/4748cad3d3c241b6a41520a25f9a1bcb.svg" alt="env.excalidraw.svg"></p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">class</span> <span class="hljs-title class_">PrimitiveLambdaAst</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IAst</span>, <span class="hljs-title class_">IApplyAst</span> {<br>  <span class="hljs-keyword">readonly</span> <span class="hljs-attr">type</span>: <span class="hljs-title class_">AstType</span> = <span class="hljs-string">'lambda'</span><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">readonly</span> name: <span class="hljs-built_in">string</span></span>) {}<br>  <span class="hljs-title function_">eval</span>(<span class="hljs-params">env: Env</span>) {<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span><br>  }<br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">readonly</span> symbols = [<span class="hljs-string">'+'</span>, <span class="hljs-string">'&gt;'</span>, <span class="hljs-string">'&lt;'</span>, <span class="hljs-string">'='</span>]<br>  <span class="hljs-title function_">apply</span>(<span class="hljs-params">args: <span class="hljs-built_in">any</span>[]</span>) {<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> === <span class="hljs-string">'+'</span>) {<br>      <span class="hljs-keyword">return</span> args.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">r, i</span>) =&gt;</span> r + i, <span class="hljs-number">0</span>)<br>    }<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> === <span class="hljs-string">'&gt;'</span>) {<br>      <span class="hljs-keyword">return</span> args[<span class="hljs-number">0</span>] &gt; args[<span class="hljs-number">1</span>]<br>    }<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> === <span class="hljs-string">'&lt;'</span>) {<br>      <span class="hljs-keyword">return</span> args[<span class="hljs-number">0</span>] &lt; args[<span class="hljs-number">1</span>]<br>    }<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> === <span class="hljs-string">'='</span>) {<br>      <span class="hljs-keyword">return</span> args[<span class="hljs-number">0</span>] === args[<span class="hljs-number">1</span>]<br>    }<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">'不支持的 api '</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>  }<br>}<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VariableAst</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IAst</span> {<br>  <span class="hljs-keyword">readonly</span> <span class="hljs-attr">type</span>: <span class="hljs-title class_">AstType</span> = <span class="hljs-string">'variable'</span><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">readonly</span> name: <span class="hljs-built_in">string</span></span>) {}<br>  <span class="hljs-title function_">eval</span>(<span class="hljs-params">env: Env</span>) {<br>    <span class="hljs-keyword">const</span> res = env.<span class="hljs-title function_">get</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>    <span class="hljs-keyword">if</span> (res === <span class="hljs-literal">null</span>) {<br>      <span class="hljs-keyword">if</span> (<span class="hljs-title class_">PrimitiveLambdaAst</span>.<span class="hljs-property">symbols</span>.<span class="hljs-title function_">includes</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)) {<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrimitiveLambdaAst</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>).<span class="hljs-built_in">eval</span>(env)<br>      }<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">'变量未定义 '</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>    }<br>    <span class="hljs-keyword">return</span> res<br>  }<br>}<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefineAst</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IAst</span> {<br>  <span class="hljs-keyword">readonly</span> <span class="hljs-attr">type</span>: <span class="hljs-title class_">AstType</span> = <span class="hljs-string">'define'</span><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">readonly</span> name: <span class="hljs-built_in">string</span>, <span class="hljs-keyword">readonly</span> value: IAst</span>) {}<br>  <span class="hljs-title function_">eval</span>(<span class="hljs-params">env: Env</span>) {<br>    <span class="hljs-keyword">if</span> (env.<span class="hljs-title function_">get</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)) {<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`变量 <span class="hljs-subst">${<span class="hljs-variable language_">this</span>.name}</span> 已存在，不能重复定义`</span>)<br>    }<br>    <span class="hljs-keyword">return</span> env.<span class="hljs-title function_">define</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>.<span class="hljs-built_in">eval</span>(env))<br>  }<br>}<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SetAst</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IAst</span> {<br>  <span class="hljs-keyword">readonly</span> <span class="hljs-attr">type</span>: <span class="hljs-title class_">AstType</span> = <span class="hljs-string">'set'</span><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">readonly</span> name: <span class="hljs-built_in">string</span>, <span class="hljs-keyword">readonly</span> value: IAst</span>) {}<br>  <span class="hljs-title function_">eval</span>(<span class="hljs-params">env: Env</span>) {<br>    <span class="hljs-keyword">if</span> (env.<span class="hljs-title function_">get</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>) === <span class="hljs-literal">null</span>) {<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`变量 <span class="hljs-subst">${<span class="hljs-variable language_">this</span>.name}</span> 不存在，不能设置值`</span>)<br>    }<br>    <span class="hljs-keyword">return</span> env.<span class="hljs-title function_">set</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>.<span class="hljs-built_in">eval</span>(env))<br>  }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="if-x2F-cond-条件判断"><a href="#if-x2F-cond-条件判断" class="headerlink" title="if/cond 条件判断"></a>if/cond 条件判断</h3><p>条件分支的 ast 很简单，许多语言中都有这种功能。</p><p><img src="/resources/a6428fc40e00466dae10b0e23072e4a6.svg" alt="条件判断.excalidraw.svg"></p><blockquote><p>if/cond 可以相互替代，所以可以仅实现一种，然后替换另一种即可，这里由于比较简单所以实现了两种。</p></blockquote><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfAst</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IAst</span> {<br>  <span class="hljs-keyword">readonly</span> <span class="hljs-attr">type</span>: <span class="hljs-title class_">AstType</span> = <span class="hljs-string">'if'</span><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span><br><span class="hljs-params">    <span class="hljs-keyword">readonly</span> predict: IAst,</span><br><span class="hljs-params">    <span class="hljs-keyword">readonly</span> left: IAst,</span><br><span class="hljs-params">    <span class="hljs-keyword">readonly</span> right: IAst,</span><br><span class="hljs-params">  </span>) {}<br>  <span class="hljs-title function_">eval</span>(<span class="hljs-params">env: Env</span>) {<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">predict</span>.<span class="hljs-built_in">eval</span>(env) ? <span class="hljs-variable language_">this</span>.<span class="hljs-property">left</span>.<span class="hljs-built_in">eval</span>(env) : <span class="hljs-variable language_">this</span>.<span class="hljs-property">right</span>.<span class="hljs-built_in">eval</span>(env)<br>  }<br>}<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CondAst</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IAst</span> {<br>  <span class="hljs-keyword">readonly</span> <span class="hljs-attr">type</span>: <span class="hljs-title class_">AstType</span> = <span class="hljs-string">'cond'</span><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span><br><span class="hljs-params">    <span class="hljs-keyword">readonly</span> clauses: [predict: IAst, value: IAst][],</span><br><span class="hljs-params">    <span class="hljs-keyword">readonly</span> defaultValue: IAst | <span class="hljs-literal">null</span>,</span><br><span class="hljs-params">  </span>) {}<br>  <span class="hljs-title function_">eval</span>(<span class="hljs-params">env: Env</span>) {<br>    <span class="hljs-keyword">const</span> findClause = <span class="hljs-variable language_">this</span>.<span class="hljs-property">clauses</span>.<span class="hljs-title function_">find</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item[<span class="hljs-number">0</span>].<span class="hljs-built_in">eval</span>(env))<br>    <span class="hljs-keyword">return</span> findClause<br>      ? findClause[<span class="hljs-number">1</span>].<span class="hljs-built_in">eval</span>(env)<br>      : <span class="hljs-variable language_">this</span>.<span class="hljs-property">defaultValue</span><br>      ? <span class="hljs-variable language_">this</span>.<span class="hljs-property">defaultValue</span>.<span class="hljs-built_in">eval</span>(env)<br>      : <span class="hljs-literal">null</span><br>  }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="sequence-x2F-procedure"><a href="#sequence-x2F-procedure" class="headerlink" title="sequence/procedure"></a>sequence/procedure</h3><p>sequence 表示一系列表达式，全部执行并返回最后一个的结果。例如以下代码应该返回 3</p><figure class="highlight lisp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lisp">(<span class="hljs-name">begin</span><br>  (<span class="hljs-name">define</span> (<span class="hljs-name">add</span> x y) (<span class="hljs-name">+</span> x y))<br>  (<span class="hljs-name">define</span> a <span class="hljs-number">1</span>)<br>  (<span class="hljs-name">define</span> b <span class="hljs-number">2</span>)<br>  (<span class="hljs-name">add</span> a b))<br></code></pre></td></tr></tbody></table></figure><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SequenceAst</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IAst</span> {<br>  <span class="hljs-keyword">readonly</span> <span class="hljs-attr">type</span>: <span class="hljs-title class_">AstType</span> = <span class="hljs-string">'begin'</span><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">readonly</span> exps: IAst[]</span>) {}<br>  <span class="hljs-title function_">eval</span>(<span class="hljs-params">env: Env</span>) {<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">exps</span>.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">_, exp</span>) =&gt;</span> exp.<span class="hljs-built_in">eval</span>(env), <span class="hljs-literal">null</span>)<br>  }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="lambda-x2F-procedure"><a href="#lambda-x2F-procedure" class="headerlink" title="lambda/procedure"></a>lambda/procedure</h3><p>procedure/lambda 是最有趣的一部分，前者负责定义一个函数，后者则负责具体的调用。lambda ast 执行仅绑定了环境，并未真的执行。apply 则才会开辟一个新的环境，并将参数绑定新的环境上，然后执行函数体的代码。procedure 则计算一个表达式，表达式包含函数部分与参数部分，它会分别计算两者并最后应用 lambda ast 的 apply 方法。</p><p>考虑以下代码如何执行</p><figure class="highlight lisp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">(((<span class="hljs-name">lambda</span> (<span class="hljs-name">x</span>) (<span class="hljs-name">lambda</span> (<span class="hljs-name">y</span>) (<span class="hljs-name">+</span> x y))) <span class="hljs-number">1</span>) <span class="hljs-number">2</span>)<br></code></pre></td></tr></tbody></table></figure><p>分为几步看</p><ol><li><code>(lambda (x) (lambda (y) (+ x y)))</code> 创建一个函数，它返回一个新的函数</li><li><code>((lambda (x) (lambda (y) (+ x y))) 1)</code> 应用了上面的函数，创建了一个新的环境，x 被绑定为 1，返回了一个新的函数，可以被认为转换为了表达式 <code>(lambda (y) (+ 1 y))</code></li><li>应用返回的函数，创建新的环境，将 y 绑定到 2</li><li>是一个原生函数 <code>+</code>，直接得到结果 3</li></ol><p><img src="/resources/650bca017a5140f194af7ed764b0b5dc.svg" alt="函数.excalidraw.svg"></p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LambdaAst</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IAst</span>, <span class="hljs-title class_">IApplyAst</span> {<br>  <span class="hljs-keyword">readonly</span> <span class="hljs-attr">type</span>: <span class="hljs-title class_">AstType</span> = <span class="hljs-string">'lambda'</span><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span><br><span class="hljs-params">    <span class="hljs-keyword">readonly</span> args: <span class="hljs-built_in">string</span>[],</span><br><span class="hljs-params">    <span class="hljs-keyword">readonly</span> body: IAst,</span><br><span class="hljs-params">    <span class="hljs-keyword">readonly</span> restArgs: <span class="hljs-built_in">boolean</span>,</span><br><span class="hljs-params">  </span>) {}<br>  env!: <span class="hljs-title class_">Env</span><br>  <span class="hljs-title function_">eval</span>(<span class="hljs-params">env: Env</span>) {<br>    <span class="hljs-comment">// 绑定环境，然后什么都不做</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">env</span> = env<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span><br>  }<br>  <span class="hljs-title function_">apply</span>(<span class="hljs-params">args: <span class="hljs-built_in">any</span>[]</span>) {<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">body</span>.<span class="hljs-built_in">eval</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">env</span>.<span class="hljs-title function_">extend</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">pairArgs</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">args</span>, args)))<br>  }<br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">pairArgs</span>(<span class="hljs-attr">argNames</span>: <span class="hljs-built_in">string</span>[], <span class="hljs-attr">args</span>: <span class="hljs-built_in">any</span>[]): <span class="hljs-title class_">Record</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">any</span>&gt; {<br>    <span class="hljs-keyword">return</span> argNames.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">r, k, i</span>) =&gt;</span> {<br>      <span class="hljs-keyword">if</span> (i === argNames.<span class="hljs-property">length</span> - <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">restArgs</span>) {<br>        r[k] = args.<span class="hljs-title function_">slice</span>(i)<br>      } <span class="hljs-keyword">else</span> {<br>        r[k] = args[i]<br>      }<br>      <span class="hljs-keyword">return</span> r<br>    }, {} <span class="hljs-keyword">as</span> <span class="hljs-title class_">Record</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">any</span>&gt;)<br>  }<br>}<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProcedureAst</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IAst</span> {<br>  <span class="hljs-keyword">readonly</span> <span class="hljs-attr">type</span>: <span class="hljs-title class_">AstType</span> = <span class="hljs-string">'procedure'</span><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">readonly</span> operator: IAst, <span class="hljs-keyword">readonly</span> operands: IAst[]</span>) {}<br>  <span class="hljs-title function_">eval</span>(<span class="hljs-params">env: Env</span>) {<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">applyLisp</span>(<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">operator</span>.<span class="hljs-built_in">eval</span>(env),<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">operands</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">ast</span>) =&gt;</span> ast.<span class="hljs-built_in">eval</span>(env)),<br>    )<br>  }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="统一入口"><a href="#统一入口" class="headerlink" title="统一入口"></a>统一入口</h3><p>然后，统一的入口 <code>evalLisp/applyLisp</code> 就很简单了</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 计算 lisp 表达式</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">evalLisp</span>(<span class="hljs-params">ast: IAst, env: Env = <span class="hljs-keyword">new</span> Env()</span>): <span class="hljs-built_in">any</span> {<br>  <span class="hljs-keyword">return</span> ast.<span class="hljs-built_in">eval</span>(env)<br>}<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 执行一个 lisp 函数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">applyLisp</span>(<span class="hljs-params">ast: IAst &amp; IApplyAst, args: <span class="hljs-built_in">any</span>[]</span>): <span class="hljs-built_in">any</span> {<br>  <span class="hljs-keyword">return</span> ast.<span class="hljs-title function_">apply</span>(args)<br>}<br></code></pre></td></tr></tbody></table></figure><p>验证一下</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-title function_">describe</span>(<span class="hljs-string">'basic'</span>, <span class="hljs-function">() =&gt;</span> {<br>  <span class="hljs-keyword">const</span> primitiveAdd = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VariableAst</span>(<span class="hljs-string">'+'</span>)<br>  <span class="hljs-keyword">const</span> primitiveMore = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VariableAst</span>(<span class="hljs-string">'&gt;'</span>)<br>  <span class="hljs-keyword">const</span> primitiveLess = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VariableAst</span>(<span class="hljs-string">'&lt;'</span>)<br>  <span class="hljs-keyword">const</span> primitiveEq = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VariableAst</span>(<span class="hljs-string">'='</span>)<br>  <span class="hljs-title function_">it</span>(<span class="hljs-string">'primitive'</span>, <span class="hljs-function">() =&gt;</span> {<br>    <span class="hljs-title function_">expect</span>(evalLisp(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PrimitiveAst</span>(<span class="hljs-number">1</span>))).<span class="hljs-title function_">toBe</span>(<span class="hljs-number">1</span>)<br>    <span class="hljs-title function_">expect</span>(evalLisp(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PrimitiveAst</span>(<span class="hljs-literal">false</span>))).<span class="hljs-title function_">toBe</span>(<span class="hljs-literal">false</span>)<br>    <span class="hljs-title function_">expect</span>(evalLisp(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PrimitiveAst</span>(<span class="hljs-string">'hello'</span>))).<span class="hljs-title function_">toBe</span>(<span class="hljs-string">'hello'</span>)<br>    <span class="hljs-title function_">expect</span>(<span class="hljs-function">() =&gt;</span> evalLisp(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PrimitiveAst</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]))).<span class="hljs-title function_">toThrowError</span>()<br>  })<br>  <span class="hljs-title function_">it</span>(<span class="hljs-string">'variable'</span>, <span class="hljs-function">() =&gt;</span> {<br>    <span class="hljs-title function_">expect</span>(<br>      evalLisp(<span class="hljs-keyword">new</span> <span class="hljs-title class_">VariableAst</span>(<span class="hljs-string">'name'</span>), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Env</span>().<span class="hljs-title function_">extend</span>({ <span class="hljs-attr">name</span>: <span class="hljs-string">'liuli'</span> })),<br>    ).<span class="hljs-title function_">toBe</span>(<span class="hljs-string">'liuli'</span>)<br>    <span class="hljs-title function_">expect</span>(<span class="hljs-function">() =&gt;</span> evalLisp(<span class="hljs-keyword">new</span> <span class="hljs-title class_">VariableAst</span>(<span class="hljs-string">'name'</span>))).<span class="hljs-title function_">toThrowError</span>()<br>  })<br>  <span class="hljs-title function_">describe</span>(<span class="hljs-string">'if'</span>, <span class="hljs-function">() =&gt;</span> {<br>    <span class="hljs-title function_">it</span>(<span class="hljs-string">'basic'</span>, <span class="hljs-function">() =&gt;</span> {<br>      <span class="hljs-title function_">expect</span>(<br>        evalLisp(<br>          <span class="hljs-keyword">new</span> <span class="hljs-title class_">IfAst</span>(<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrimitiveAst</span>(<span class="hljs-literal">true</span>),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrimitiveAst</span>(<span class="hljs-literal">true</span>),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrimitiveAst</span>(<span class="hljs-literal">false</span>),<br>          ),<br>        ),<br>      ).<span class="hljs-title function_">toBe</span>(<span class="hljs-literal">true</span>)<br>      <span class="hljs-title function_">expect</span>(<br>        evalLisp(<br>          <span class="hljs-keyword">new</span> <span class="hljs-title class_">IfAst</span>(<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrimitiveAst</span>(<span class="hljs-literal">false</span>),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrimitiveAst</span>(<span class="hljs-literal">true</span>),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrimitiveAst</span>(<span class="hljs-literal">false</span>),<br>          ),<br>        ),<br>      ).<span class="hljs-title function_">toBe</span>(<span class="hljs-literal">false</span>)<br>    })<br>    <span class="hljs-title function_">it</span>(<span class="hljs-string">'variable'</span>, <span class="hljs-function">() =&gt;</span> {<br>      <span class="hljs-title function_">expect</span>(<br>        evalLisp(<br>          <span class="hljs-keyword">new</span> <span class="hljs-title class_">IfAst</span>(<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">VariableAst</span>(<span class="hljs-string">'hasName'</span>),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrimitiveAst</span>(<span class="hljs-literal">true</span>),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrimitiveAst</span>(<span class="hljs-literal">false</span>),<br>          ),<br>          <span class="hljs-keyword">new</span> <span class="hljs-title class_">Env</span>().<span class="hljs-title function_">extend</span>({<br>            <span class="hljs-attr">hasName</span>: <span class="hljs-literal">true</span>,<br>          }),<br>        ),<br>      ).<span class="hljs-title function_">toBe</span>(<span class="hljs-literal">true</span>)<br>    })<br>    <span class="hljs-title function_">it</span>(<span class="hljs-string">'expression'</span>, <span class="hljs-function">() =&gt;</span> {})<br>  })<br>  <span class="hljs-title function_">it</span>(<span class="hljs-string">'cond'</span>, <span class="hljs-function">() =&gt;</span> {<br>    <span class="hljs-keyword">const</span> cond = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CondAst</span>(<br>      [<br>        [<span class="hljs-keyword">new</span> <span class="hljs-title class_">PrimitiveAst</span>(<span class="hljs-literal">false</span>), <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrimitiveAst</span>(<span class="hljs-number">1</span>)],<br>        [<span class="hljs-keyword">new</span> <span class="hljs-title class_">VariableAst</span>(<span class="hljs-string">'x'</span>), <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrimitiveAst</span>(<span class="hljs-number">2</span>)],<br>        [<br>          <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcedureAst</span>(primitiveEq, [<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">VariableAst</span>(<span class="hljs-string">'y'</span>),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrimitiveAst</span>(<span class="hljs-number">3</span>),<br>          ]),<br>          <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrimitiveAst</span>(<span class="hljs-number">3</span>),<br>        ],<br>      ],<br>      <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrimitiveAst</span>(<span class="hljs-number">0</span>),<br>    )<br>    <span class="hljs-title function_">expect</span>(evalLisp(cond, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Env</span>().<span class="hljs-title function_">extend</span>({ <span class="hljs-attr">x</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">3</span> }))).<span class="hljs-title function_">toBe</span>(<span class="hljs-number">2</span>)<br>    <span class="hljs-title function_">expect</span>(evalLisp(cond, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Env</span>().<span class="hljs-title function_">extend</span>({ <span class="hljs-attr">x</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">3</span> }))).<span class="hljs-title function_">toBe</span>(<span class="hljs-number">3</span>)<br>    <span class="hljs-title function_">expect</span>(evalLisp(cond, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Env</span>().<span class="hljs-title function_">extend</span>({ <span class="hljs-attr">x</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">0</span> }))).<span class="hljs-title function_">toBe</span>(<span class="hljs-number">0</span>)<br>  })<br>  <span class="hljs-title function_">describe</span>(<span class="hljs-string">'define'</span>, <span class="hljs-function">() =&gt;</span> {<br>    <span class="hljs-title function_">it</span>(<span class="hljs-string">'basic'</span>, <span class="hljs-function">() =&gt;</span> {<br>      <span class="hljs-keyword">const</span> env = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Env</span>()<br>      evalLisp(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DefineAst</span>(<span class="hljs-string">'name'</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrimitiveAst</span>(<span class="hljs-string">'liuli'</span>)), env)<br>      <span class="hljs-title function_">expect</span>(evalLisp(<span class="hljs-keyword">new</span> <span class="hljs-title class_">VariableAst</span>(<span class="hljs-string">'name'</span>), env)).<span class="hljs-title function_">toBe</span>(<span class="hljs-string">'liuli'</span>)<br>    })<br>    <span class="hljs-title function_">it</span>(<span class="hljs-string">'repeated define'</span>, <span class="hljs-function">() =&gt;</span> {<br>      <span class="hljs-title function_">expect</span>(<span class="hljs-function">() =&gt;</span><br>        evalLisp(<br>          <span class="hljs-keyword">new</span> <span class="hljs-title class_">SequenceAst</span>([<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefineAst</span>(<span class="hljs-string">'name'</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrimitiveAst</span>(<span class="hljs-string">'liuli'</span>)),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefineAst</span>(<span class="hljs-string">'name'</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrimitiveAst</span>(<span class="hljs-string">'liuli'</span>)),<br>          ]),<br>        ),<br>      ).<span class="hljs-title function_">toThrowError</span>()<br>    })<br>  })<br>  <span class="hljs-title function_">describe</span>(<span class="hljs-string">'set'</span>, <span class="hljs-function">() =&gt;</span> {<br>    <span class="hljs-title function_">it</span>(<span class="hljs-string">'basic'</span>, <span class="hljs-function">() =&gt;</span> {<br>      <span class="hljs-keyword">const</span> res = evalLisp(<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">SequenceAst</span>([<br>          <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefineAst</span>(<span class="hljs-string">'name'</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrimitiveAst</span>(<span class="hljs-string">'liuli'</span>)),<br>          <span class="hljs-keyword">new</span> <span class="hljs-title class_">SetAst</span>(<span class="hljs-string">'name'</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrimitiveAst</span>(<span class="hljs-string">'li'</span>)),<br>          <span class="hljs-keyword">new</span> <span class="hljs-title class_">VariableAst</span>(<span class="hljs-string">'name'</span>),<br>        ]),<br>      )<br>      <span class="hljs-title function_">expect</span>(res).<span class="hljs-title function_">toBe</span>(<span class="hljs-string">'li'</span>)<br>    })<br>    <span class="hljs-title function_">it</span>(<span class="hljs-string">'error set'</span>, <span class="hljs-function">() =&gt;</span> {<br>      <span class="hljs-title function_">expect</span>(<span class="hljs-function">() =&gt;</span><br>        evalLisp(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SetAst</span>(<span class="hljs-string">'name'</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrimitiveAst</span>(<span class="hljs-string">'li'</span>))),<br>      ).<span class="hljs-title function_">toThrowError</span>()<br>    })<br>  })<br>  <span class="hljs-title function_">it</span>(<span class="hljs-string">'sequence'</span>, <span class="hljs-function">() =&gt;</span> {<br>    <span class="hljs-keyword">const</span> res = evalLisp(<br>      <span class="hljs-keyword">new</span> <span class="hljs-title class_">SequenceAst</span>([<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefineAst</span>(<span class="hljs-string">'name'</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrimitiveAst</span>(<span class="hljs-string">'liuli'</span>)),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">VariableAst</span>(<span class="hljs-string">'name'</span>),<br>      ]),<br>    )<br>    <span class="hljs-title function_">expect</span>(res).<span class="hljs-title function_">toBe</span>(<span class="hljs-string">'liuli'</span>)<br>  })<br>  <span class="hljs-title function_">it</span>(<span class="hljs-string">'lambda'</span>, <span class="hljs-function">() =&gt;</span> {<br>    <span class="hljs-keyword">const</span> fn = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaAst</span>([], <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrimitiveAst</span>(<span class="hljs-number">1</span>), <span class="hljs-literal">false</span>)<br>    <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">applyLisp</span>(evalLisp(fn), [])).<span class="hljs-title function_">toBe</span>(<span class="hljs-number">1</span>)<br>    <span class="hljs-title function_">expect</span>(evalLisp(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcedureAst</span>(fn, []))).<span class="hljs-title function_">toBe</span>(<span class="hljs-number">1</span>)<br>  })<br>  <span class="hljs-title function_">describe</span>(<span class="hljs-string">'procedure'</span>, <span class="hljs-function">() =&gt;</span> {<br>    <span class="hljs-title function_">it</span>(<span class="hljs-string">'primitive'</span>, <span class="hljs-function">() =&gt;</span> {<br>      <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">applyLisp</span>(evalLisp(primitiveAdd), [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>])).<span class="hljs-title function_">toBe</span>(<span class="hljs-number">3</span>)<br>      <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">applyLisp</span>(evalLisp(primitiveMore), [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>])).<span class="hljs-title function_">toBe</span>(<span class="hljs-literal">false</span>)<br>      <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">applyLisp</span>(evalLisp(primitiveLess), [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>])).<span class="hljs-title function_">toBe</span>(<span class="hljs-literal">true</span>)<br>    })<br>    <span class="hljs-title function_">it</span>(<span class="hljs-string">'wrap'</span>, <span class="hljs-function">() =&gt;</span> {<br>      <span class="hljs-keyword">const</span> add = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaAst</span>(<br>        [<span class="hljs-string">'x'</span>, <span class="hljs-string">'y'</span>],<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcedureAst</span>(primitiveAdd, [<br>          <span class="hljs-keyword">new</span> <span class="hljs-title class_">VariableAst</span>(<span class="hljs-string">'x'</span>),<br>          <span class="hljs-keyword">new</span> <span class="hljs-title class_">VariableAst</span>(<span class="hljs-string">'y'</span>),<br>        ]),<br>        <span class="hljs-literal">false</span>,<br>      )<br>      <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">applyLisp</span>(evalLisp(add), [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>])).<span class="hljs-title function_">toBe</span>(<span class="hljs-number">3</span>)<br>      <span class="hljs-title function_">expect</span>(<br>        evalLisp(<br>          <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcedureAst</span>(add, [<span class="hljs-keyword">new</span> <span class="hljs-title class_">PrimitiveAst</span>(<span class="hljs-number">1</span>), <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrimitiveAst</span>(<span class="hljs-number">2</span>)]),<br>        ),<br>      ).<span class="hljs-title function_">toBe</span>(<span class="hljs-number">3</span>)<br>    })<br>    <span class="hljs-title function_">it</span>(<span class="hljs-string">'close'</span>, <span class="hljs-function">() =&gt;</span> {<br>      <span class="hljs-keyword">const</span> closeFn = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaAst</span>(<br>        [<span class="hljs-string">'x'</span>],<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcedureAst</span>(primitiveAdd, [<br>          <span class="hljs-keyword">new</span> <span class="hljs-title class_">VariableAst</span>(<span class="hljs-string">'x'</span>),<br>          <span class="hljs-keyword">new</span> <span class="hljs-title class_">VariableAst</span>(<span class="hljs-string">'y'</span>),<br>        ]),<br>        <span class="hljs-literal">false</span>,<br>      )<br>      <span class="hljs-title function_">expect</span>(<br>        <span class="hljs-title function_">applyLisp</span>(evalLisp(closeFn, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Env</span>().<span class="hljs-title function_">extend</span>({ <span class="hljs-attr">y</span>: <span class="hljs-number">1</span> })), [<span class="hljs-number">1</span>]),<br>      ).<span class="hljs-title function_">toBe</span>(<span class="hljs-number">2</span>)<br>      <span class="hljs-keyword">const</span> ast = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SequenceAst</span>([<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefineAst</span>(<span class="hljs-string">'x'</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrimitiveAst</span>(<span class="hljs-number">1</span>)),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefineAst</span>(<span class="hljs-string">'y'</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">VariableAst</span>(<span class="hljs-string">'x'</span>)),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcedureAst</span>(closeFn, [<span class="hljs-keyword">new</span> <span class="hljs-title class_">PrimitiveAst</span>(<span class="hljs-number">2</span>)]),<br>      ])<br>      <span class="hljs-title function_">expect</span>(evalLisp(ast)).<span class="hljs-title function_">toBe</span>(<span class="hljs-number">3</span>)<br>    })<br>    <span class="hljs-title function_">it</span>(<span class="hljs-string">'basic'</span>, <span class="hljs-function">() =&gt;</span> {<br>      <span class="hljs-keyword">const</span> returnSelf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaAst</span>([<span class="hljs-string">'x'</span>], <span class="hljs-keyword">new</span> <span class="hljs-title class_">VariableAst</span>(<span class="hljs-string">'x'</span>), <span class="hljs-literal">false</span>)<br>      <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">applyLisp</span>(evalLisp(returnSelf), [<span class="hljs-number">1</span>])).<span class="hljs-title function_">toBe</span>(<span class="hljs-number">1</span>)<br>    })<br>    <span class="hljs-title function_">it</span>(<span class="hljs-string">'restArgs'</span>, <span class="hljs-function">() =&gt;</span> {<br>      <span class="hljs-keyword">const</span> lambda = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaAst</span>(<br>        [<span class="hljs-string">'numbers'</span>],<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">VariableAst</span>(<span class="hljs-string">'numbers'</span>),<br>        <span class="hljs-literal">true</span>,<br>      )<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">applyLisp</span>(evalLisp(lambda), [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]))<br>      <span class="hljs-comment">// expect(applyLisp(evalLisp(lambda, {}), [1, 2])).toBe(1)</span><br>    })<br>    <span class="hljs-title function_">describe</span>(<span class="hljs-string">'cons'</span>, <span class="hljs-function">() =&gt;</span> {<br>      <span class="hljs-keyword">const</span> cons = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaAst</span>(<br>        [<span class="hljs-string">'car'</span>, <span class="hljs-string">'cdr'</span>],<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaAst</span>(<br>          [<span class="hljs-string">'action'</span>],<br>          <span class="hljs-keyword">new</span> <span class="hljs-title class_">CondAst</span>(<br>            [<br>              [<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcedureAst</span>(primitiveEq, [<br>                  <span class="hljs-keyword">new</span> <span class="hljs-title class_">VariableAst</span>(<span class="hljs-string">'action'</span>),<br>                  <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrimitiveAst</span>(<span class="hljs-string">'car'</span>),<br>                ]),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">VariableAst</span>(<span class="hljs-string">'car'</span>),<br>              ],<br>              [<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcedureAst</span>(primitiveEq, [<br>                  <span class="hljs-keyword">new</span> <span class="hljs-title class_">VariableAst</span>(<span class="hljs-string">'action'</span>),<br>                  <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrimitiveAst</span>(<span class="hljs-string">'cdr'</span>),<br>                ]),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">VariableAst</span>(<span class="hljs-string">'cdr'</span>),<br>              ],<br>              [<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcedureAst</span>(primitiveEq, [<br>                  <span class="hljs-keyword">new</span> <span class="hljs-title class_">VariableAst</span>(<span class="hljs-string">'action'</span>),<br>                  <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrimitiveAst</span>(<span class="hljs-string">'setCar'</span>),<br>                ]),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaAst</span>(<br>                  [<span class="hljs-string">'val'</span>],<br>                  <span class="hljs-keyword">new</span> <span class="hljs-title class_">SetAst</span>(<span class="hljs-string">'car'</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">VariableAst</span>(<span class="hljs-string">'val'</span>)),<br>                  <span class="hljs-literal">false</span>,<br>                ),<br>              ],<br>              [<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcedureAst</span>(primitiveEq, [<br>                  <span class="hljs-keyword">new</span> <span class="hljs-title class_">VariableAst</span>(<span class="hljs-string">'action'</span>),<br>                  <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrimitiveAst</span>(<span class="hljs-string">'setCdr'</span>),<br>                ]),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaAst</span>(<br>                  [<span class="hljs-string">'val'</span>],<br>                  <span class="hljs-keyword">new</span> <span class="hljs-title class_">SetAst</span>(<span class="hljs-string">'cdr'</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">VariableAst</span>(<span class="hljs-string">'val'</span>)),<br>                  <span class="hljs-literal">false</span>,<br>                ),<br>              ],<br>            ],<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrimitiveAst</span>(<span class="hljs-string">'error'</span>),<br>          ),<br>          <span class="hljs-literal">false</span>,<br>        ),<br>        <span class="hljs-literal">false</span>,<br>      )<br>      <span class="hljs-title function_">it</span>(<span class="hljs-string">'basic'</span>, <span class="hljs-function">() =&gt;</span> {<br>        <span class="hljs-keyword">const</span> numbers = <span class="hljs-title function_">applyLisp</span>(evalLisp(cons), [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>])<br>        <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">applyLisp</span>(numbers, [<span class="hljs-string">'car'</span>])).<span class="hljs-title function_">toBe</span>(<span class="hljs-number">1</span>)<br>        <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">applyLisp</span>(numbers, [<span class="hljs-string">'cdr'</span>])).<span class="hljs-title function_">toBe</span>(<span class="hljs-number">2</span>)<br>      })<br>      <span class="hljs-keyword">const</span> car = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaAst</span>(<br>        [<span class="hljs-string">'cons'</span>],<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcedureAst</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">VariableAst</span>(<span class="hljs-string">'cons'</span>), [<span class="hljs-keyword">new</span> <span class="hljs-title class_">PrimitiveAst</span>(<span class="hljs-string">'car'</span>)]),<br>        <span class="hljs-literal">false</span>,<br>      )<br>      <span class="hljs-keyword">const</span> cdr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaAst</span>(<br>        [<span class="hljs-string">'cons'</span>],<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcedureAst</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">VariableAst</span>(<span class="hljs-string">'cons'</span>), [<span class="hljs-keyword">new</span> <span class="hljs-title class_">PrimitiveAst</span>(<span class="hljs-string">'cdr'</span>)]),<br>        <span class="hljs-literal">false</span>,<br>      )<br><br>      <span class="hljs-title function_">it</span>(<span class="hljs-string">'car/cdr'</span>, <span class="hljs-function">() =&gt;</span> {<br>        <span class="hljs-keyword">const</span> numbers = <span class="hljs-title function_">applyLisp</span>(evalLisp(cons), [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>])<br>        <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">applyLisp</span>(evalLisp(car), [numbers])).<span class="hljs-title function_">toBe</span>(<span class="hljs-number">1</span>)<br>        <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">applyLisp</span>(evalLisp(cdr), [numbers])).<span class="hljs-title function_">toBe</span>(<span class="hljs-number">2</span>)<br>      })<br>      <span class="hljs-keyword">const</span> setCar = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaAst</span>(<br>        [<span class="hljs-string">'cons'</span>, <span class="hljs-string">'val'</span>],<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcedureAst</span>(<br>          <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcedureAst</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">VariableAst</span>(<span class="hljs-string">'cons'</span>), [<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrimitiveAst</span>(<span class="hljs-string">'setCar'</span>),<br>          ]),<br>          [<span class="hljs-keyword">new</span> <span class="hljs-title class_">VariableAst</span>(<span class="hljs-string">'val'</span>)],<br>        ),<br>        <span class="hljs-literal">false</span>,<br>      )<br>      <span class="hljs-keyword">const</span> setCdr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaAst</span>(<br>        [<span class="hljs-string">'cons'</span>, <span class="hljs-string">'val'</span>],<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcedureAst</span>(<br>          <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcedureAst</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">VariableAst</span>(<span class="hljs-string">'cons'</span>), [<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrimitiveAst</span>(<span class="hljs-string">'setCdr'</span>),<br>          ]),<br>          [<span class="hljs-keyword">new</span> <span class="hljs-title class_">VariableAst</span>(<span class="hljs-string">'val'</span>)],<br>        ),<br>        <span class="hljs-literal">false</span>,<br>      )<br>      <span class="hljs-title function_">it</span>(<span class="hljs-string">'set'</span>, <span class="hljs-function">() =&gt;</span> {<br>        <span class="hljs-keyword">const</span> numbers = <span class="hljs-title function_">applyLisp</span>(evalLisp(cons), [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>])<br>        <span class="hljs-title function_">applyLisp</span>(evalLisp(setCar), [numbers, <span class="hljs-number">11</span>])<br>        <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">applyLisp</span>(evalLisp(car), [numbers])).<span class="hljs-title function_">toBe</span>(<span class="hljs-number">11</span>)<br>        <span class="hljs-title function_">applyLisp</span>(evalLisp(setCdr), [numbers, <span class="hljs-number">12</span>])<br>        <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">applyLisp</span>(evalLisp(cdr), [numbers])).<span class="hljs-title function_">toBe</span>(<span class="hljs-number">12</span>)<br>      })<br>    })<br>  })<br>})<br></code></pre></td></tr></tbody></table></figure><h2 id="解析代码为-ast"><a href="#解析代码为-ast" class="headerlink" title="解析代码为 ast"></a>解析代码为 ast</h2><p>上面实现了执行 lisp ast 的功能，但如何将 lisp 代码解析为这种 ast 还没有实现，下面就来完成这一步。</p><h3 id="解析代码为字符流"><a href="#解析代码为字符流" class="headerlink" title="解析代码为字符流"></a>解析代码为字符流</h3><p>简单的处理为一个 token 数组很简单</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 解析代码为 token 数组（一维）</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> <span class="hljs-variable">code</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">tokenize</span>(<span class="hljs-params">code: <span class="hljs-built_in">string</span></span>): <span class="hljs-built_in">string</span>[] {<br>  <span class="hljs-keyword">return</span> code<br>    .<span class="hljs-title function_">replaceAll</span>(<span class="hljs-string">'('</span>, <span class="hljs-string">' ( '</span>)<br>    .<span class="hljs-title function_">replaceAll</span>(<span class="hljs-string">')'</span>, <span class="hljs-string">' ) '</span>)<br>    .<span class="hljs-title function_">split</span>(<span class="hljs-string">' '</span>)<br>    .<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">i</span>) =&gt;</span> i.<span class="hljs-title function_">trim</span>())<br>    .<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">i</span>) =&gt;</span> i.<span class="hljs-property">length</span> !== <span class="hljs-number">0</span>)<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="将字符流结构化"><a href="#将字符流结构化" class="headerlink" title="将字符流结构化"></a>将字符流结构化</h3><p>但我们需要结构化的，所以还需要做一次转换</p><p>基本思路是每次处理一个字符</p><ol><li>如果是 <code>(</code>，则添加一个临时数组存储之后的值，直到遇到 <code>)</code> 为止</li><li>如果是 <code>)</code>，则将当前的临时数组合并到上一个临时数组</li><li>如果是其他字符，则将之追加到当前临时数组中</li><li>如果到了结尾，则返回当前的数组</li><li>初始数组是 <code>[[]]</code>，最后返回 <code>res[0][0]</code></li></ol><p>这是一个基本的流程图</p><p><img src="/resources/8f1eb6d8868d4976b2c5d1dc54c1fb02.jpg" alt="image.jpg"></p><p>下面是解析代码 <code>(begin (define x 1) (define y 2) (+ x y))</code> 的 tokens 流程中数组的状态</p><table><thead><tr><th>step</th><th>code</th><th>arr</th></tr></thead><tbody><tr><td>init</td><td></td><td><code>[[]]</code></td></tr><tr><td>1</td><td><code>(</code></td><td><code>[[], []]</code></td></tr><tr><td>2</td><td><code>begin</code></td><td><code>[[], [begin]]</code></td></tr><tr><td>3</td><td><code>(</code></td><td><code>[[], [begin], []]</code></td></tr><tr><td>4</td><td><code>define</code></td><td><code>[[], [begin], [define]]</code></td></tr><tr><td>5</td><td><code>define</code></td><td><code>[[], [begin], [define]]</code></td></tr><tr><td>6</td><td><code>x</code></td><td><code>[[], [begin], [define, x]]</code></td></tr><tr><td>7</td><td><code>1</code></td><td><code>[[], [begin], [define, x, 1]]</code></td></tr><tr><td>8</td><td><code>)</code></td><td><code>[[], [begin, [define, x, 1]]]</code></td></tr><tr><td>9</td><td><code>(</code></td><td><code>[[], [begin, [define, x, 1]], []]</code></td></tr><tr><td>10</td><td><code>define</code></td><td><code>[[], [begin, [define, x, 1]], [define]]</code></td></tr><tr><td>11</td><td><code>y</code></td><td><code>[[], [begin, [define, x, 1]], [define, y]]</code></td></tr><tr><td>12</td><td><code>2</code></td><td><code>[[], [begin, [define, x, 1]], [define, y, 2]]</code></td></tr><tr><td>13</td><td><code>)</code></td><td><code>[[], [begin, [define, x, 1], [define, y, 2]]]</code></td></tr><tr><td>14</td><td><code>(</code></td><td><code>[[], [begin, [define, x, 1], [define, y, 2]], []]</code></td></tr><tr><td>15</td><td><code>+</code></td><td><code>[[], [begin, [define, x, 1], [define, y, 2]], [+]]</code></td></tr><tr><td>16</td><td><code>x</code></td><td><code>[[], [begin, [define, x, 1], [define, y, 2]], [+, x]]</code></td></tr><tr><td>17</td><td><code>y</code></td><td><code>[[], [begin, [define, x, 1], [define, y, 2]], [+, x, y]]</code></td></tr><tr><td>18</td><td><code>)</code></td><td><code>[[], [begin, [define, x, 1], [define, y, 2], [+, x, y]]]</code></td></tr><tr><td>19</td><td><code>)</code></td><td><code>[[[begin, [define, x, 1], [define, y, 2], [+, x, y]]]]</code></td></tr></tbody></table><p>具体实现</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 解析代码为 token 数组（一维）</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> <span class="hljs-variable">code</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">tokenize</span>(<span class="hljs-params">code: <span class="hljs-built_in">string</span></span>): <span class="hljs-built_in">string</span>[] {<br>  <span class="hljs-keyword">return</span> code<br>    .<span class="hljs-title function_">replaceAll</span>(<span class="hljs-string">'('</span>, <span class="hljs-string">' ( '</span>)<br>    .<span class="hljs-title function_">replaceAll</span>(<span class="hljs-string">')'</span>, <span class="hljs-string">' ) '</span>)<br>    .<span class="hljs-title function_">split</span>(<span class="hljs-string">' '</span>)<br>    .<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">i</span>) =&gt;</span> i.<span class="hljs-title function_">trim</span>())<br>    .<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">i</span>) =&gt;</span> i.<span class="hljs-property">length</span> !== <span class="hljs-number">0</span>)<br>}<br><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">DeepArray</span>&lt;T&gt; = (T | <span class="hljs-title class_">DeepArray</span>&lt;T&gt;)[]<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将平铺的 tokens 结构化，包含层次关系（使用多维数组）</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> <span class="hljs-variable">tokens</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@returns</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">structTokens</span>(<span class="hljs-params">tokens: <span class="hljs-built_in">string</span>[]</span>): <span class="hljs-title class_">DeepArray</span>&lt;<span class="hljs-built_in">string</span>&gt; {<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">iter</span>(<span class="hljs-params">i: <span class="hljs-built_in">number</span>, curr: DeepArray&lt;<span class="hljs-built_in">string</span>&gt;</span>): <span class="hljs-title class_">DeepArray</span>&lt;<span class="hljs-built_in">string</span>&gt; {<br>    <span class="hljs-keyword">if</span> (i === tokens.<span class="hljs-property">length</span>) {<br>      <span class="hljs-keyword">return</span> curr<br>    }<br>    <span class="hljs-keyword">if</span> (tokens[i] === <span class="hljs-string">'('</span>) {<br>      curr.<span class="hljs-title function_">push</span>([])<br>      <span class="hljs-keyword">return</span> <span class="hljs-title function_">iter</span>(i + <span class="hljs-number">1</span>, curr)<br>    }<br>    <span class="hljs-keyword">if</span> (tokens[i] === <span class="hljs-string">')'</span>) {<br>      <span class="hljs-keyword">const</span> sub = curr.<span class="hljs-title function_">pop</span>()!<br>      ;(curr[curr.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>] <span class="hljs-keyword">as</span> <span class="hljs-title class_">DeepArray</span>&lt;<span class="hljs-built_in">string</span>&gt;).<span class="hljs-title function_">push</span>(sub)<br>      <span class="hljs-keyword">return</span> <span class="hljs-title function_">iter</span>(i + <span class="hljs-number">1</span>, curr)<br>    }<br>    ;(curr[curr.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>] <span class="hljs-keyword">as</span> <span class="hljs-title class_">DeepArray</span>&lt;<span class="hljs-built_in">string</span>&gt;).<span class="hljs-title function_">push</span>(tokens[i])<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">iter</span>(i + <span class="hljs-number">1</span>, curr)<br>  }<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">iter</span>(<span class="hljs-number">0</span>, [[]])[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] <span class="hljs-keyword">as</span> <span class="hljs-title class_">DeepArray</span>&lt;<span class="hljs-built_in">string</span>&gt;<br>}<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 解析 lisp 代码为 ast</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> <span class="hljs-variable">code</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">parseLisp</span>(<span class="hljs-params">code: <span class="hljs-built_in">string</span></span>): <span class="hljs-title class_">IAst</span> {<br>  <span class="hljs-keyword">const</span> <span class="hljs-attr">map</span>: <span class="hljs-title class_">Partial</span>&lt;<span class="hljs-title class_">Record</span>&lt;<span class="hljs-title class_">AstType</span>, <span class="hljs-function">(<span class="hljs-params">token: <span class="hljs-built_in">string</span>[]</span>) =&gt;</span> <span class="hljs-title class_">IAst</span>&gt;&gt; = {<br>    <span class="hljs-title function_">define</span>(<span class="hljs-params">token</span>) {<br>      <span class="hljs-keyword">const</span> name = token[<span class="hljs-number">1</span>]<br>      <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(name)) {<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefineAst</span>(<br>          name[<span class="hljs-number">0</span>],<br>          <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaAst</span>(<br>            name.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">as</span> <span class="hljs-built_in">unknown</span> <span class="hljs-keyword">as</span> <span class="hljs-built_in">string</span>[],<br>            <span class="hljs-title function_">readFromToken</span>(token[<span class="hljs-number">2</span>]),<br>            <span class="hljs-literal">false</span>,<br>          ),<br>        )<br>      }<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefineAst</span>(name, <span class="hljs-title function_">readFromToken</span>(token[<span class="hljs-number">2</span>]))<br>    },<br>    <span class="hljs-title function_">set</span>(<span class="hljs-params">token</span>) {<br>      <span class="hljs-keyword">const</span> name = token[<span class="hljs-number">1</span>]<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SetAst</span>(name, <span class="hljs-title function_">readFromToken</span>(token[<span class="hljs-number">2</span>]))<br>    },<br>    <span class="hljs-title function_">begin</span>(<span class="hljs-params">token</span>) {<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SequenceAst</span>(token.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_">map</span>(readFromToken))<br>    },<br>    <span class="hljs-keyword">if</span>(token) {<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IfAst</span>(<br>        <span class="hljs-title function_">readFromToken</span>(token[<span class="hljs-number">1</span>]),<br>        <span class="hljs-title function_">readFromToken</span>(token[<span class="hljs-number">2</span>]),<br>        <span class="hljs-title function_">readFromToken</span>(token[<span class="hljs-number">3</span>]),<br>      )<br>    },<br>    <span class="hljs-title function_">cond</span>(<span class="hljs-params">token</span>) {<br>      <span class="hljs-keyword">if</span> (token[token.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] === <span class="hljs-string">'else'</span>) {<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CondAst</span>(<br>          token<br>            .<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>, token.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>)<br>            .<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">[p, v]</span>) =&gt;</span> [<span class="hljs-title function_">readFromToken</span>(p), <span class="hljs-title function_">readFromToken</span>(v)]),<br>          <span class="hljs-title function_">readFromToken</span>(token[token.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>]),<br>        )<br>      } <span class="hljs-keyword">else</span> {<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CondAst</span>(<br>          token.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">[p, v]</span>) =&gt;</span> [<span class="hljs-title function_">readFromToken</span>(p), <span class="hljs-title function_">readFromToken</span>(v)]),<br>          <span class="hljs-literal">null</span>,<br>        )<br>      }<br>    },<br>    <span class="hljs-title function_">lambda</span>(<span class="hljs-params">token</span>) {<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaAst</span>(<br>        token[<span class="hljs-number">1</span>] <span class="hljs-keyword">as</span> <span class="hljs-built_in">unknown</span> <span class="hljs-keyword">as</span> <span class="hljs-built_in">string</span>[],<br>        <span class="hljs-title function_">readFromToken</span>(token[<span class="hljs-number">2</span>]),<br>        <span class="hljs-literal">false</span>,<br>      )<br>    },<br>  }<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">readFromToken</span>(<span class="hljs-params">token: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">string</span>[]</span>): <span class="hljs-title class_">IAst</span> {<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(token)) {<br>      <span class="hljs-keyword">const</span> op = token[<span class="hljs-number">0</span>]<br>      <span class="hljs-keyword">const</span> parse = map[op <span class="hljs-keyword">as</span> <span class="hljs-title class_">AstType</span>]<br>      <span class="hljs-keyword">return</span> parse<br>        ? <span class="hljs-title function_">parse</span>(token)<br>        : <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcedureAst</span>(<br>            <span class="hljs-title function_">readFromToken</span>(token[<span class="hljs-number">0</span>]),<br>            token.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_">map</span>(readFromToken),<br>          )<br>    }<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> token !== <span class="hljs-string">'string'</span>) {<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">'不支持的 token 类型 '</span> + <span class="hljs-keyword">typeof</span> token)<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">atom</span>(token)<br>  }<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">atom</span>(<span class="hljs-params">token: <span class="hljs-built_in">string</span></span>): <span class="hljs-title class_">IAst</span> {<br>    <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/^\d$/</span>.<span class="hljs-title function_">test</span>(token)) {<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrimitiveAst</span>(<span class="hljs-title class_">Number</span>.<span class="hljs-built_in">parseInt</span>(token))<br>    }<br>    <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/^([0-9]{1,}[.][0-9]*)$/</span>.<span class="hljs-title function_">test</span>(token)) {<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrimitiveAst</span>(<span class="hljs-title class_">Number</span>.<span class="hljs-built_in">parseFloat</span>(token))<br>    }<br>    <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/^".*"$/</span>.<span class="hljs-title function_">test</span>(token)) {<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrimitiveAst</span>(token.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>, token.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>))<br>    }<br>    <span class="hljs-keyword">if</span> ([<span class="hljs-string">'true'</span>, <span class="hljs-string">'false'</span>].<span class="hljs-title function_">includes</span>(token)) {<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrimitiveAst</span>(token === <span class="hljs-string">'true'</span>)<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VariableAst</span>(token)<br>  }<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">readFromToken</span>(<span class="hljs-title function_">structTokens</span>(<span class="hljs-title function_">tokenize</span>(code)) <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span>)<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="转换为-ast"><a href="#转换为-ast" class="headerlink" title="转换为 ast"></a>转换为 ast</h3><p>最终，我们将结构化的 token 转换为 ast</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 解析 lisp 代码为 ast</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> <span class="hljs-variable">code</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">parseLisp</span>(<span class="hljs-params">code: <span class="hljs-built_in">string</span></span>): <span class="hljs-title class_">IAst</span> {<br>  <span class="hljs-keyword">const</span> <span class="hljs-attr">map</span>: <span class="hljs-title class_">Partial</span>&lt;<span class="hljs-title class_">Record</span>&lt;<span class="hljs-title class_">AstType</span>, <span class="hljs-function">(<span class="hljs-params">token: <span class="hljs-built_in">string</span>[]</span>) =&gt;</span> <span class="hljs-title class_">IAst</span>&gt;&gt; = {<br>    <span class="hljs-title function_">define</span>(<span class="hljs-params">token</span>) {<br>      <span class="hljs-keyword">const</span> name = token[<span class="hljs-number">1</span>]<br>      <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(name)) {<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefineAst</span>(<br>          name[<span class="hljs-number">0</span>],<br>          <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaAst</span>(<br>            name.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">as</span> <span class="hljs-built_in">unknown</span> <span class="hljs-keyword">as</span> <span class="hljs-built_in">string</span>[],<br>            <span class="hljs-title function_">readFromToken</span>(token[<span class="hljs-number">2</span>]),<br>            <span class="hljs-literal">false</span>,<br>          ),<br>        )<br>      }<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefineAst</span>(name, <span class="hljs-title function_">readFromToken</span>(token[<span class="hljs-number">2</span>]))<br>    },<br>    <span class="hljs-title function_">set</span>(<span class="hljs-params">token</span>) {<br>      <span class="hljs-keyword">const</span> name = token[<span class="hljs-number">1</span>]<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SetAst</span>(name, <span class="hljs-title function_">readFromToken</span>(token[<span class="hljs-number">2</span>]))<br>    },<br>    <span class="hljs-title function_">begin</span>(<span class="hljs-params">token</span>) {<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SequenceAst</span>(token.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_">map</span>(readFromToken))<br>    },<br>    <span class="hljs-keyword">if</span>(token) {<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IfAst</span>(<br>        <span class="hljs-title function_">readFromToken</span>(token[<span class="hljs-number">1</span>]),<br>        <span class="hljs-title function_">readFromToken</span>(token[<span class="hljs-number">2</span>]),<br>        <span class="hljs-title function_">readFromToken</span>(token[<span class="hljs-number">3</span>]),<br>      )<br>    },<br>    <span class="hljs-title function_">cond</span>(<span class="hljs-params">token</span>) {<br>      <span class="hljs-keyword">if</span> (token[token.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] === <span class="hljs-string">'else'</span>) {<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CondAst</span>(<br>          token<br>            .<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>, token.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>)<br>            .<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">[p, v]</span>) =&gt;</span> [<span class="hljs-title function_">readFromToken</span>(p), <span class="hljs-title function_">readFromToken</span>(v)]),<br>          <span class="hljs-title function_">readFromToken</span>(token[token.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>]),<br>        )<br>      } <span class="hljs-keyword">else</span> {<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CondAst</span>(<br>          token.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">[p, v]</span>) =&gt;</span> [<span class="hljs-title function_">readFromToken</span>(p), <span class="hljs-title function_">readFromToken</span>(v)]),<br>          <span class="hljs-literal">null</span>,<br>        )<br>      }<br>    },<br>    <span class="hljs-title function_">lambda</span>(<span class="hljs-params">token</span>) {<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaAst</span>(<br>        token[<span class="hljs-number">1</span>] <span class="hljs-keyword">as</span> <span class="hljs-built_in">unknown</span> <span class="hljs-keyword">as</span> <span class="hljs-built_in">string</span>[],<br>        <span class="hljs-title function_">readFromToken</span>(token[<span class="hljs-number">2</span>]),<br>        <span class="hljs-literal">false</span>,<br>      )<br>    },<br>  }<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">readFromToken</span>(<span class="hljs-params">token: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">string</span>[]</span>): <span class="hljs-title class_">IAst</span> {<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(token)) {<br>      <span class="hljs-keyword">const</span> op = token[<span class="hljs-number">0</span>]<br>      <span class="hljs-keyword">const</span> parse = map[op <span class="hljs-keyword">as</span> <span class="hljs-title class_">AstType</span>]<br>      <span class="hljs-keyword">return</span> parse<br>        ? <span class="hljs-title function_">parse</span>(token)<br>        : <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcedureAst</span>(<br>            <span class="hljs-title function_">readFromToken</span>(token[<span class="hljs-number">0</span>]),<br>            token.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_">map</span>(readFromToken),<br>          )<br>    }<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> token !== <span class="hljs-string">'string'</span>) {<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">'不支持的 token 类型 '</span> + <span class="hljs-keyword">typeof</span> token)<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">atom</span>(token)<br>  }<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">atom</span>(<span class="hljs-params">token: <span class="hljs-built_in">string</span></span>): <span class="hljs-title class_">IAst</span> {<br>    <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/^\d$/</span>.<span class="hljs-title function_">test</span>(token)) {<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrimitiveAst</span>(<span class="hljs-title class_">Number</span>.<span class="hljs-built_in">parseInt</span>(token))<br>    }<br>    <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/^([0-9]{1,}[.][0-9]*)$/</span>.<span class="hljs-title function_">test</span>(token)) {<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrimitiveAst</span>(<span class="hljs-title class_">Number</span>.<span class="hljs-built_in">parseFloat</span>(token))<br>    }<br>    <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/^".*"$/</span>.<span class="hljs-title function_">test</span>(token)) {<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrimitiveAst</span>(token.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>, token.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>))<br>    }<br>    <span class="hljs-keyword">if</span> ([<span class="hljs-string">'true'</span>, <span class="hljs-string">'false'</span>].<span class="hljs-title function_">includes</span>(token)) {<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrimitiveAst</span>(token === <span class="hljs-string">'true'</span>)<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VariableAst</span>(token)<br>  }<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">readFromToken</span>(<span class="hljs-title function_">structTokens</span>(<span class="hljs-title function_">tokenize</span>(code)) <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span>)<br>}<br></code></pre></td></tr></tbody></table></figure><p>我们可以验证它的正确性</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-title function_">expect</span>(evalLisp(<span class="hljs-title function_">parseLisp</span>(<span class="hljs-string">'"liuli"'</span>))).<span class="hljs-title function_">toBe</span>(<span class="hljs-string">'liuli'</span>)<br><span class="hljs-title function_">expect</span>(evalLisp(<span class="hljs-title function_">parseLisp</span>(<span class="hljs-string">'(+ 1 2)'</span>))).<span class="hljs-title function_">toBe</span>(<span class="hljs-number">3</span>)<br><span class="hljs-title function_">expect</span>(evalLisp(<span class="hljs-title function_">parseLisp</span>(<span class="hljs-string">'(+ 1.1 3.3)'</span>))).<span class="hljs-title function_">toBe</span>(<span class="hljs-number">4.4</span>)<br><span class="hljs-title function_">expect</span>(evalLisp(<span class="hljs-title function_">parseLisp</span>(<span class="hljs-string">'true'</span>))).<span class="hljs-title function_">toBe</span>(<span class="hljs-literal">true</span>)<br><span class="hljs-title function_">expect</span>(evalLisp(<span class="hljs-title function_">parseLisp</span>(<span class="hljs-string">'(begin (define x 1) (define y 2) (+ x y))'</span>))).<span class="hljs-title function_">toBe</span>(<span class="hljs-number">3</span>)<br><span class="hljs-title function_">expect</span>(evalLisp(<span class="hljs-title function_">parseLisp</span>(<span class="hljs-string">'(if true 0 1)'</span>))).<span class="hljs-title function_">toBe</span>(<span class="hljs-number">0</span>)<br><span class="hljs-title function_">expect</span>(evalLisp(<span class="hljs-title function_">parseLisp</span>(<span class="hljs-string">'(if false 0 1)'</span>))).<span class="hljs-title function_">toBe</span>(<span class="hljs-number">1</span>)<br><span class="hljs-title function_">expect</span>(evalLisp(<span class="hljs-title function_">parseLisp</span>(<span class="hljs-string">'(cond (false 0) (false 1))'</span>))).<span class="hljs-title function_">toBe</span>(<span class="hljs-literal">null</span>)<br><span class="hljs-title function_">expect</span>(evalLisp(<span class="hljs-title function_">parseLisp</span>(<span class="hljs-string">'(cond (false 0) (false 1) (else 2))'</span>))).<span class="hljs-title function_">toBe</span>(<span class="hljs-number">2</span>)<br><span class="hljs-title function_">expect</span>(evalLisp(<span class="hljs-title function_">parseLisp</span>(<span class="hljs-string">'(cond (false 0) (true 1) (else 2))'</span>))).<span class="hljs-title function_">toBe</span>(<span class="hljs-number">1</span>)<br><span class="hljs-title function_">expect</span>(evalLisp(<span class="hljs-title function_">parseLisp</span>(<span class="hljs-string">'((lambda (x y) (+ x y)) 1 2)'</span>))).<span class="hljs-title function_">toBe</span>(<span class="hljs-number">3</span>)<br><span class="hljs-title function_">expect</span>(<br>  evalLisp(<span class="hljs-title function_">parseLisp</span>(<span class="hljs-string">'(begin (define (add x y) (+ x y)) (add 1 2))'</span>)),<br>).<span class="hljs-title function_">toBe</span>(<span class="hljs-number">3</span>)<br><span class="hljs-title function_">expect</span>(evalLisp(<span class="hljs-title function_">parseLisp</span>(<span class="hljs-string">'(begin 1 2)'</span>))).<span class="hljs-title function_">toBe</span>(<span class="hljs-number">2</span>)<br><span class="hljs-title function_">expect</span>(evalLisp(<span class="hljs-title function_">parseLisp</span>(<span class="hljs-string">'(begin (define x 1) (set x 2) x)'</span>))).<span class="hljs-title function_">toBe</span>(<span class="hljs-number">2</span>)<br><span class="hljs-title function_">expect</span>(<br>  evalLisp(<br>    <span class="hljs-title function_">parseLisp</span>(<span class="hljs-string">`</span><br><span class="hljs-string">      (</span><br><span class="hljs-string">        begin</span><br><span class="hljs-string">        (define (cons a b) (</span><br><span class="hljs-string">          lambda (action) (</span><br><span class="hljs-string">            cond</span><br><span class="hljs-string">            ((= action "car") a)</span><br><span class="hljs-string">            ((= action "cdr") b)</span><br><span class="hljs-string">          )</span><br><span class="hljs-string">        ))</span><br><span class="hljs-string">        (define (car cons) (cons "car"))</span><br><span class="hljs-string">        (define (cdr cons) (cons "cdr"))</span><br><span class="hljs-string">        (define v (cons 1 2))</span><br><span class="hljs-string">        (+ (car v) (cdr v))</span><br><span class="hljs-string">      )</span><br><span class="hljs-string">    `</span>),<br>  ),<br>).<span class="hljs-title function_">toBe</span>(<span class="hljs-number">3</span>)<br></code></pre></td></tr></tbody></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>在上面，吾辈实现了 lisp 的玩具运行时和解析器，虽然还不支持许多 lisp 的功能（例如 <code>'</code> 引用功能），但核心的功能已经实现了，它可以完成一些基本的数值逻辑运算了。另一种有趣的思路是编译器，它不直接运行 lisp 代码，而是将 lisp 代码编译为一种其他可以运行的代码，例如将 lisp 代码编译为汇编代码执行，或者更有趣的方法是 – 编译为 js，就像 ts 做的一样，那样它就可以与 js 互操作了。</p>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    <category term="其他" scheme="https://blog.rxliuli.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    <category term="SICP" scheme="https://blog.rxliuli.com/categories/%E5%85%B6%E4%BB%96/SICP/"/>
    
    
    <category term="算法" scheme="https://blog.rxliuli.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
