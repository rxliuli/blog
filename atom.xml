<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>rxliuli blog</title>
  
  
  <link href="https://blog.rxliuli.com/atom.xml" rel="self"/>
  
  <link href="https://blog.rxliuli.com/"/>
  <updated>2023-10-27T11:35:51.982Z</updated>
  <id>https://blog.rxliuli.com/</id>
  
  <author>
    <name>rxliuli</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>来日本的第一个月</title>
    <link href="https://blog.rxliuli.com/p/555e3035e0e24d22a98afbf526765705/"/>
    <id>https://blog.rxliuli.com/p/555e3035e0e24d22a98afbf526765705/</id>
    <published>2023-10-27T06:59:00.076Z</published>
    <updated>2023-10-27T11:35:51.982Z</updated>
    
    <content type="html"><![CDATA[<p>自从 10 月初来日本之后，至今也快一个月了，现在可以谈谈更多的感受了。</p><h2 id="城市-京都"><a href="#城市-京都" class="headerlink" title="城市-京都"></a>城市-京都</h2><p>京都真的非常适合骑自行车，自从购买了自行车之后，无论是通勤还是出去玩，基本上都使用自行车，而京都这个城市足够小，出去玩使用自行车很方便。而且京都附近的一些地方的景色真的太美了，尤其是鸭川附近，真的随手都能拍出壁纸的感觉。</p><p><img src="https://lh3.googleusercontent.com/pw/ADCreHd0TUQAuArSC3ITA2SRGRwTT8JtNLgKIIM-fkY_c8UQjXjjdrrZmfgeBve9j-Q4kJ_JsKsmtYY_BipEwXWrgHt4LPZ7hofOureKukVIZmsmXD0fDhpKqJuDkVNlwOpM_AqnjmdFSFOn_syVZdL0ZVPe=w2566-h1924-s-no-gm?authuser=0" alt="鸭川"><br><img src="https://lh3.googleusercontent.com/pw/ADCreHfKg2pZwvi9NeHuy4hyLmRNtIr8fh8x3Jug-pxwX5UgR7NLAmvleDbtGzy-_EqWWUSIvaUljHjmAlS0v6bGcxtdhWdd92esznG4riwcm5t8YUK4bMdwmuXPkdXoGyvmEfwXCO-afH3alb59YEZcITGa=w2566-h1924-s-no-gm?authuser=0" alt="鸭川 2"></p><p>目前去了鸭川和伏见稻荷大社，两者的体验都还不错，而且都是免费的！让吾辈有点想知道，为什么国内的景区大多都要收门票，而这边却不需要。</p><p>拍的一些照片</p><ul><li><a href="https://photos.app.goo.gl/Ja13wq45g6mqWtBB7">鴨川</a></li><li><a href="https://photos.app.goo.gl/zecyQfHvrh4dg4W88">伏見稲荷大社</a></li><li><a href="https://photos.app.goo.gl/6NLajmpYU9Et6BQb6">周りの所</a></li></ul><h2 id="生活-物价"><a href="#生活-物价" class="headerlink" title="生活-物价"></a>生活-物价</h2><p>用一句话来描述就是“来日本之后再次深刻感受被贫穷限制了生活”。生活的物价，可以说吾辈并未真正接受，只是习惯了。一如之前从广州到北京时，惊叹于租房的价格。例如，吾辈购买的自行车大概花了 4w 日元，尽管它只是一辆普通的自行车。还有水果方面，之前总是听到在日本吃不起水果，现在可以确定，确实不太吃得起，大概比北京的还要贵很多，苹果差不多 7 块一个的样子。</p><p>不过，除了物价上的缺点之外，某些方面还不错。例如自来水的感受是明显的，比北京和广州的都要好（广州的可能更差点），之前在那边几乎只能喝桶装水，自来水烧开之后喝会有一点奇怪的味道，但父母似乎没什么感觉，也许只是习惯了。</p><p>放一张动画与现实中的铁道对比<br><img src="/resources/4f9db13d902f49dca36cf233507e1bf3.jpg" alt="动画中的铁道.jpg"><br><img src="/resources/a3bda1019d5a4323978b0d90e7ce38de.jpg" alt="现实中的铁道.jpg"></p><p>顺便谈一下日本的文化，今晚刚去学校聚了个餐，中华料理的活动。但吃饭时老师先吃，学生再吃的规矩（也许是大家都“默认”这样做）真让吾辈感到恶心。当老师都选择完菜后，到吾辈时基本上菜都已经凉了，也许吾辈就不应该参加这个聚餐。</p><h2 id="电子-信息化"><a href="#电子-信息化" class="headerlink" title="电子-信息化"></a>电子-信息化</h2><p>最近在推友的指点下成功办理了 paypay 电子支付，但遗憾的是普及率不算太高。也有推友说“在自己熟悉的范围内活动基本上不用带钱包。手机上 PayPay/Suica/iD 可以 cover 99% 的支付场景。”，但吾辈的体感是普及率不高，吾辈一般都需要留意饭店或超市是否支持 paypay，像是超市，吾辈可以不去业务超市，只去 life，吃饭的话不支持 paypay 就不再吃第二次就好了，但这显然不能说明电子支付的普及率很高。出去玩的时候更是一定带上现金，因为大概率会碰到仅支持现金的情况，目前去玩的两个地方都验证了这一点。</p><p>关于电子支付的问题，吾辈在 twitter 上提出这一点时，几乎是一片骂声，动不动就说让吾辈滚回国内也不少见，还有评论之后屏蔽吾辈的。也许是吾辈触及了一个确实存在的痛点，相比于国内微信、支付宝平分天下，日本则是处理诸侯混战的时代，而且大多数支付方式（visa、paypay、icoca 吾辈确实都有）都没有普及到大多数店铺，想要像在国内拿个手机就能出门几乎是不可能的。</p><p>由于 wise 海外汇款和 paypay 实名验证需要，吾辈已经申请了 my number card。神奇的是，申请时使用了纸质材料，也邮寄了确认单过来，但后续的步骤要在手机上扫二维码填写表单完成，这就是传统与现代工艺的完美结合么？🤣<br><img src="/resources/5dda3479bb324d03b9b01b83a6570933.jpg" alt="my number card 申请.jpg"></p><p>关于使用过的网站或 app，如果说国内是尽可能想偷偷的收集用户的信息，日本的网站则是明目张胆地向你索要，而且到处都要填重复的表单，体验糟糕透了。<br><img src="/resources/27a7b5dc50d34ce8b8766b805dfd9690.jpg" alt="雅虎.jpg"></p><p>让吾辈比较恼火的是日亚和快递，两者的结合简直是灾难。首先是日亚，它对快递没有太大的控制力，导致快递并不完全遵守日亚收件地址的要求。除了日亚自己的快递之外，其他快递几乎总是要求面对面收货，不肯放到快递箱，而吾辈白天不在家里，这相当死板和烦人。<br><img src="/resources/1937a6831de14649bc4b8c11968ddbaf.jpg" alt="送货失败.jpg"><br>在下单之前，无法知道具体是用什么快递，而且发货之后，如果有快递问题，商家和日亚都不肯处理，这导致吾辈通常需要到特定快递的网站上去修改快递收件的信息，例如重新约定收件时间。许多快递都无法一次收到，虽然号称大多数加急快递可以次日达，但实际上并不太容易刚好面对面收到。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>目前仍然没有太多接触日本人的机会，也许吾辈应该去打零工，去更好的了解一些日常的生活和工作习惯。</p>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    <category term="个人" scheme="https://blog.rxliuli.com/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    <category term="思考" scheme="https://blog.rxliuli.com/categories/%E4%B8%AA%E4%BA%BA/%E6%80%9D%E8%80%83/"/>
    
    
    <category term="日本" scheme="https://blog.rxliuli.com/tags/%E6%97%A5%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>来日本的第一周</title>
    <link href="https://blog.rxliuli.com/p/f1210fce6cb4447da12699dfc6f176a4/"/>
    <id>https://blog.rxliuli.com/p/f1210fce6cb4447da12699dfc6f176a4/</id>
    <published>2023-10-09T09:39:04.502Z</published>
    <updated>2023-10-16T06:07:31.216Z</updated>
    
    <content type="html"><![CDATA[<p>刚来日本差不多一周了，简单谈下刚来这几天遇到的各种问题，可能在接触日本好的一面之前，吾辈先接触到了坏的一面，所以可能存在偏见，后续部分观念也许会扭转。</p><h2 id="城市-京都"><a href="#城市-京都" class="headerlink" title="城市-京都"></a>城市-京都</h2><p>之前 <a href="/p/ea7937c3bf4a4db88509943583eeeff0">前往日本</a> 中提到过，来京都的原因是厌恶了大城市的生活，但吾辈还是没想到会遇到各种不方便。</p><p>人们常说京都是一座古老的城市，吾辈现在体会到了，租房里的热水器是 94 年生产的，吾辈甚至找不到使用的教程。😂<br><img src="/resources/20d6af04edcb427eb9e4894dbe91b995.jpg" alt="古老的热水器.jpg"></p><p>然后是吃饭，可能是因为日本人通常会在家里做饭的缘故，附近吃饭的地方通常都比较远，通常吾辈要走 10 ～ 20 分钟，在国内先不说随时可点的外卖，即便是出门吃饭附近 500m 也通常有餐馆。<br>另外，餐馆的饭菜的分量通常较少，刚来的前两天，吾辈吃饭还从未吃饱过，即便价格上已经超过了帝都（平均 1000 日元左右），但仍然吃不饱。下面是去【中華そば】的店里面吃的面<br><img src="/resources/d8adcb3b28cf4036a157dc098b38ede4.jpg" alt="拉面配饭.jpg"></p><p>有推友打趣道：<a href="https://twitter.com/tennosuke01/status/1710604507703611602">1000 日元你竟然想吃饱？🤔 给你点小小的日本震撼</a>，吾辈真的大受震撼。</p><p>直到遇到了御三家（吉野家、すき家和松屋），不仅能吃饱，而且还可以使用支付宝电子支付。<br><img src="/resources/ca973f33c75744cb9f4b6bb50c3d341c.jpg" alt="すき家.jpg"></p><p>而且由于目前还未办理电车票之类的，所以最近几天都在附近转转，逛了一些超市和餐馆，也在附近看到了神社之类的。<br><img src="/resources/9f91a4fef4c34ec98b6b4686ee9eceec.jpg" alt="神社.jpg"></p><h2 id="生活-物价"><a href="#生活-物价" class="headerlink" title="生活-物价"></a>生活-物价</h2><p>虽然有一些心理准备，毕竟之前生活在帝都生活成本也不低，但还是没想到物价能高到如此程度。</p><p>在线下超市购买物品时吾辈已经有贵 50% ～ 100% 的感觉了，在线上具体对比之后发现部分东西甚至可以贵一个数量级。例如</p><p>药品，两盒感冒药大概 200+，国内可能 20+ 的样子？<br><img src="/resources/b1a2795df772418387158c677f328241.jpg" alt="感冒药.jpg"></p><p>文具用品，一支 2b 考试铅笔在日亚大概 1300 日元，国内只需要 4 元，相差 15 倍。<br><img src="/resources/28cbe9146104404c888ae19f6098a4e4.jpg" alt="铅笔-日亚.jpg"><img src="/resources/1ef09f2d8aef41ca9989e02a86787243.jpg" alt="铅笔-淘宝.jpg"></p><p>像是笔记本之类的虽然没有这么明显，但也相差 4 倍的价格，而质量简单看起来并无太大差别，甚至可能还要更差一点。<br><img src="/resources/00dc92a8eb8449d1bc7f5d6ac2dd5485.jpg" alt="笔记本对比.jpg"></p><p>奇怪的是，日本的平均收入也没有特别高，大概 20w+ 年收的样子，但除了租房之外（对比对象是京都），其他的消费都远远超过帝都，这似乎很难说是很好的生活？</p><blockquote><p>吾辈后来也简单想了下，在帝都似乎衣食住行中只有<strong>食</strong>和<strong>住</strong>是需要承担在帝都的价格，其他的得益于网购大多都是比较便宜的。</p></blockquote><h2 id="电子-信息化"><a href="#电子-信息化" class="headerlink" title="电子-信息化"></a>电子-信息化</h2><p>吾辈来日本之前，就有日本的互联网还在上个世纪的刻板印象，现在可以说这种印象至少是部分正确的。从海关开始，所有的手续都是纸质材料，包括办理银行卡、手机卡等等，买车票要排好久好久的队（说日本效率高的人请站出来），甚至楼下还有上个世纪的邮箱！</p><p>相比于在中国便捷的线上外卖与物流体系，日本的自动贩卖机几乎无处不在。虽然看起来比较方便，但相比于线上很大的问题就是商品基本上都过于单一，大多数都是饮料之类的，购买生活用品实际上还是必须去超市，而部分超市并不支持电子支付。</p><p>说起电子支付，这是最让吾辈有挫败感的地方。原本的预期是只要办理了三大件（住址、银行卡和手机卡），就可以正常使用电子支付和线上服务，但意外还是接踵而来。</p><p>首先是银行卡，作为留学生只能办理日本邮政银行的银行卡，只能存取现金，不能接收海外汇款。想要绑定 paypay？抱歉，需要先等 3 个月。至于想要得到拥有正常功能的卡，需要先等半年，至于半年之间无法接受海外汇款的情况下如何活下去，抱歉，我们不管（fuck）。<br><img src="/resources/e1267dc463a749628da97f3ec458ac02.jpg" alt="paypay 无法绑定银行卡.jpg"></p><p>有推友提示可以使用 <a href="https://wise.com/">wise</a> 之类的接受海外汇款，但也需要 <a href="https://www.kojinbango-card.go.jp/en/">my number card</a>，而这个还尚未拿到，以政府的效率，天知道什么时候能拿到。🤷</p><p>其次是电话卡，不仅套餐很贵（2200 日元），网速缓慢（60Mbps），而且充值起来还特别麻烦。除了一心推广自家的信用卡，就只提供了在便利店支付的方式，这实在很不方便。<br><img src="/resources/47bbe4ab1f47488cba1863dc2d6a9cfd.jpg" alt="移动网络速度.jpg"></p><p>不知何故，吾辈后来尝试使用 line pay 绑定邮政银行卡试图完成线上支付时，甚至得到银行卡绑定的手机号码不正确的错误。<br><img src="/resources/ed8670990696406eb3ed54a10686bf1a.jpg" alt="linepay 无法绑定银行卡.jpg"></p><p>而这是一个关键路径，如果不能使用线上支付，几乎所有的线上服务都使用不了，这是完全不可接受的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>来日本之前会对这里存在一些美化的幻想，撕裂幻想直面现实是残酷的，一个地方自有其优点，但也必然存在许多的问题。日吹还是日黑，不过是一体两面罢了。</p>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    <category term="个人" scheme="https://blog.rxliuli.com/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    <category term="思考" scheme="https://blog.rxliuli.com/categories/%E4%B8%AA%E4%BA%BA/%E6%80%9D%E8%80%83/"/>
    
    
    <category term="日本" scheme="https://blog.rxliuli.com/tags/%E6%97%A5%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>前往日本</title>
    <link href="https://blog.rxliuli.com/p/ea7937c3bf4a4db88509943583eeeff0/"/>
    <id>https://blog.rxliuli.com/p/ea7937c3bf4a4db88509943583eeeff0/</id>
    <published>2023-09-03T16:18:58.257Z</published>
    <updated>2023-10-08T15:42:47.610Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>由于吾辈自己的成长经历、信息渠道的局限性，可能存在一些错误的刻板印象和认知，请保持求同存异的宽容心态。</p></blockquote><p>已经定下了 10 月份前往日本的计划，这是吾辈第一次出国，也是想要出去看看更大的世界，所以想谈谈整个想法是如何产生和实施的。</p><h2 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h2><p>关于出国的动机，原因是多方面的，吾辈可以说 2022 年的疫情是引子，但更重要的还是为了寻找变化。</p><h3 id="遭受铁拳"><a href="#遭受铁拳" class="headerlink" title="遭受铁拳"></a>遭受铁拳</h3><p>说起遭受铁拳，总体而言吾辈挨了两次。一次是最近三年所有人都经历过的疫情，另一次则是小时候的计划生育。</p><p>关于计划生育，有吾辈印象深刻的几件事</p><ul><li>4 岁之前吾辈放在姥姥家寄养，因为还有一个妹妹，她比吾辈更早上的户口</li><li>5 岁时回家和妈妈一起生活，有天夜里出来上厕所，看到墙头上有几个人在监视我们家，看到吾辈和妹妹之后家里被罚了</li><li>6 岁时有天放学回家看到有人在砸家里的大门，吓得吾辈去爷爷家里了，后来邻居劝住了要砸堂屋门的那些人</li></ul><p>直到 2004 年时，计划生育在吾辈那个 18 线的偏远城市仍然在执行中。2010 年时，吾辈的姑姑想要一个女儿，仍然要走关系托门路。或许有人不敢相信 2004 年，改革开放都有 20 个年头了，都已经步入新千年了，还会有计划生育这回事，但这也确实是吾辈曾经经历过的事实。如果家里只有一个孩子，或者生活在大城市中，或许对此没有感受。事实上，吾辈的一些城市子女的同事确实没有太多的感受。</p><p>至于最近 3 年经历的疫情，说过的已经太多太多了。对于吾辈而言，转折点有两个</p><ul><li>2022-04 上海封城</li><li>2022-10 北京小区封闭</li></ul><p>上海封城出现了吃不上饭的情况，这简直让吾辈难以置信。都 2022 年了，中国却又再次重现文革时那种情况了。下面是 <a href="https://zh.wikipedia.org/zh-cn/%E5%A2%93%E7%A2%91_(%E4%B9%A6%E7%B1%8D)">《墓碑：中国六十年代大饥荒纪实》</a> 中节选的片段，60 年后的现在，一切似乎没有任何变化。</p><blockquote><p>各级政府千方百计地对外封锁饥饿的消息。公安局控制了所有的邮局，向外面发出的信件一律扣留。中共信阳地委让邮局扣了 12000 多封向外求助的信。为了不让外出逃荒的饥民走漏消息，在村口封锁，不准外逃。对已经外逃的饥民则以 “盲流” 的罪名游街、拷打或其它惩罚。<br>1960 年 3 月 12 日卫生所的干部王启云写信给党中央，反映饿死人的严重问题，要求中央仿照 “包文丞陈州放粮”，公安局侦破后，对王启云进行残酷的批判斗争。<br>伞陂公社第一次向上报的死亡人数 523 人，第二次报的是 3889 人（后又改为 2907 人），后来省委工作组调查结果是 6668 人。<br>用空洞的 “全国形势一派大好” 淡化人们实实在在的饥饿，压制人们对饥饿的不满。<br>就在信阳大量饿死人、人相食普遍发生的时候，《河南日报》还宣传形势一派大好，连续发表七篇 “向共产主义进军” 的文章。<br>在饿殍遍地的情况下，1960 年《河南日报》的元旦社论却以 “开门红 春意浓” 为题，继续粉饰太平，仍坚持全面跃进。<br>农民明明是饿死了，还不能说是因饥饿而死的。县委领导人赵玉书和董安春到武店公社考城大队检查浮肿病情况，问医师王善良：“为什么浮肿病总是治不好，少什么药？” 王医生回答说：“少一味粮食！” 赵、董二人立即决定，将王医生交大会批斗后逮捕。<br>在大批农民饿死的时刻，1960 年 2 月 16 日到 18 日，贵州省委召开了三天地、州、市委第一书记会议，主要讨论农村公共食堂问题。这个会不是解决食堂缺粮的问题，而是闭眼不看现实，向中共中央写了一个假报告――《关于农村公共食堂的报告》<br>强大的政治思想工作使人们驯服，新闻封锁使人愚昧。饿死上百万人的 “信阳事件”、饿死三分之一人口的 “通渭问题”，不仅当时邻近地区不知有其事，甚到几十年后还严加保密。<br>死人明明是饿死的，而说成是年老死的，疾病死的，把非正常死亡说成是正常死亡。有些地方还不允许死者家属哭丧带孝，不准埋坟，对反映死人情况的来信加以扣压，甚至对来信者进行打击；有的干部因为如实向组织反映了死人的情况还挨了斗争。”“因为怕犯错误，怕受处分，怕摘掉乌纱帽，而不敢暴露真实情况；越不敢暴露，问题就发展越大；问题越大，就越不敢暴露。”</p></blockquote><p>再就是后来北京也开始封闭小区，前前后后吾辈被关在小区里超过了一个月。经历的种种让吾辈对这里失去了信心，也真正诞生了离开这里的念头。忘记历史的人必定重蹈覆辙，即便对于一个普通人而言，也知道犯错之后需要记录避免下次再犯。而这个国家似乎总是知错不认错，并且试图塑造正确的集体记忆，导致过段时间就会重新来一遍。考虑到吾辈还有 40 年好活，不希望再次经历这样的事情了。</p><p>另一个关键的想法变化是从“先在国内赚到钱，再考虑走出去”变成了“先走出去，然后再找更好的选择”，这也是 2022 年带来的重要的思想转变，毕竟断断续续被关了一个月以后人总是会改变一些想法，从“国内虽然有些地方不方便，但更适合个人职业发展”变成“这破地方一天都不想多呆了”也在情理之中吧？</p><p>对于吾辈而言，这两次都是政府不讲理的体现，当开始不讲理时，就没有办法去谈论其他什么了。计划生育的实质是不把人当人看，而是视为一种养殖场的资源，用最近新发明的词来说，就是“人矿”。在不需要的时候就禁止生育，在人口红利减少时则期望人们多生，生育本是一个自然权利，却被当作一种资源来管理，这种管理方式本身就是不讲理的。</p><p>吾辈也承认国内之前的发展状况很好，甚至互联网行业已经成为了世界第二，在某些方面（例如在线购物和支付）已经发展的非常成熟了，对于这一点视而不见的都是瞎子。但国进民退仍在进行，甚至愈演愈烈。这让吾辈想起了桑弘农的盐铁论，也想起了这导致了中国历史上从来都是小农社会，循环往复。总是吃不起饭的人把锅砸了，然后死了一些人，吃饭的人少了，发展一段时间后，便开始盛世，再之后由于土地兼并等原因，吃不起饭的人又开始越来越多，然后又开始砸锅。。。</p><p>更让人绝望的是国内的普通人，22 年时由于疫情，似乎理性的声音开始回归，但放开之后，甚至不到 1 年，许多人就开始好了伤疤忘了疼。就像曾经的 <a href="https://coolshell.cn/">左耳朵耗子</a> 说过：“即便自己活的很卑微，只要国家富强，也有大国子民的感觉。”，这恐怕正是许多粉红的心态。</p><h3 id="寻找变化"><a href="#寻找变化" class="headerlink" title="寻找变化"></a>寻找变化</h3><p>吾辈是一个普通人，在 <a href="https://coolshell.cn/articles/19464.html#%E9%A2%86%E5%AF%BC%E5%8A%9B">左耳朵耗子的 4 级分类</a> 中，吾辈只能算是一个稍微有点努力的普通人。</p><blockquote><ol><li>识别自己的特长和天赋</li><li>识别自己的兴趣和事业</li><li>建立高级的习惯和方法</li><li>勤奋努力执着坚持</li></ol></blockquote><p>显然，吾辈不符合分类 1，或者至少有一些扭曲的理解。吾辈相信曾经看过的一句话 “要是自己比他人更擅长的的事情，就算会在平常带来负面影响也没有必要勉强抑制”。这能够说明吾辈的一些习惯，例如更加偏向技术而非产品，因为相比于做产品吾辈更擅长折腾有趣的技术，所以更希望要发展自己的长处。</p><p>对于分类 2，兴趣部分可能有一些，但事业部分则基本没有，成为独立开发者可能是一个不错的起点，但至今为止也没有做到。</p><p>分类 3 同样是一半一半，习惯和方法最近最大的变化是已经使用笔记工具 3 年，并且记录和整理了大量的内容和思考。为了更好的辅助自己，还构建了一些相关的工具链。但另一些习惯，例如时间管理，可以说做的糟糕透顶。</p><p>分类 4 则同样如此，也许用“间歇性踌躇满志，持续性混吃等死”来形容是最好不过了。这与吾辈自身的性格也有关系，吾辈是一个喜新厌旧的人，会不断尝试寻找新的、有趣的东西。每到一个新的环境，总是能够维持一段时间的斗志昂扬。等到熟悉了周围的一切之后，便开始进入漫长的的倦怠期。吾辈坚信没有变化就是等死的论断，在没有变化时，即便没有更好的机会，吾辈也会主动放弃当前的环境。</p><p>另一方面，最近两年吾辈正在逐渐变得对外部事物失去兴趣，对待之前的兴趣爱好不再那么热情，这也是竭力想避免的事情。从最早的阅读，一些书的名字现在还能回想起来，像是苏菲的世界、失乐园之类的。看动画是从小时候就有的兴趣，现在每一季也只追寥寥几部。还有 galgame 和游戏，它们甚至从来没有成为主要的兴趣之一。即便想要尝试发展新的兴趣，但也总是难以长久的坚持，像是年初开始的周末出游，最近也已经中断了一个月。吾辈希望自己永远不要那么成熟，保持对一切事物的感性和好奇。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>其他的一些因素包括子女教育的问题，这点是在 2020 年回去老家时看到一个 10 岁的表妹仍然在用抄小字的方法学习，想到十几年来老家的教育方式没有任何变化，就对子女未来的教育感到绝望。毕竟，众所周知，教育总是绑定房子，吾辈只是普通人，还不配碰一线的房子。</p><p>一些其他的快速想法</p><ul><li>国内房价居高不下，普通人依赖于六个钱包绑定未来多年的收入实属不智，小孩完全变成负资产</li><li>国内的税负过重，长期位于世界前列，养老金长期来看几乎必然变成庞氏骗局</li><li>由于防火墙的存在，互联网已经变成局域网，中文互联网由于寡头的跑马圈地，有价值的信息少且难以搜索</li><li>由于长期的愚民政策，再加上抖音之类的奶头乐，国内许多人的认知简直是井底之蛙，而且还不自知</li><li>大环境已经无法容不下不同的声音（即便是上海快饿死了），一直在奉行愚民政策，就像晚清王朝一样，内部改革成功的可能性几乎没有</li><li>体制整体是向上负责，屁民的生死没人在乎，防疫清零已经变成了政治运动，甚至堪称真正的文革 2.0</li></ul><h2 id="实施"><a href="#实施" class="headerlink" title="实施"></a>实施</h2><h3 id="目的地"><a href="#目的地" class="headerlink" title="目的地"></a>目的地</h3><p>即决定了要出去，去哪儿便是一个问题了。在经过一些考量之后，吾辈最终还是选择了日本。其实可用的选择也不多，基本上就是下面几个地方</p><ul><li>北美：美国、加拿大</li><li>欧洲：德国、英国、法国等</li><li>澳洲：澳大利亚</li><li>亚洲：日本、新加坡</li></ul><p>至于南美非洲之类的地方恐怕没有人愿意真的去，毕竟出去的原因还是为了尝试得到更好的生活。在亚洲国家中日本可能是第一优先的选择了，虽然经历了 20 年的发展停滞，但至少治安上还不错，相比于缅甸柬埔寨之类生命都难以保全的地方好太多了。澳洲的话，吾辈从未真正去了解过，似乎除了袋鼠没有什么是太有名的，不过吾辈有两位同事先后去了那里，也许也有一些不错的地方吧。至于北美和欧洲，吾辈的刻板印象会认为去那里工作可能相对容易，但想要留下来可能要难得多。考虑到当前自身的能力，日常看动画或玩游戏，学习日语会更有动力，以及某种程度上的信仰加成，吾辈最终选择了先去那里看看。</p><h3 id="留学"><a href="#留学" class="headerlink" title="留学"></a>留学</h3><p>具体而言吾辈是怎么出去的呢？考虑到时间因素，吾辈最终选择了走语言学校的途径，这种方法会有相应的优缺点。</p><ul><li>优点<ul><li>有空闲时间来思考未来，尝试自己想做的事情</li><li>相对而言门槛更低一些，可以先熟悉环境而不需要工作</li></ul></li><li>缺点<ul><li>需要脱产，不再有稳定的收入来源</li><li>学生鱼龙混杂</li></ul></li></ul><p>至于城市的选择，吾辈并未真正考虑大多数情况下的第一选择：东京，而是选择了一个更小却也古老的城市：京都。至于原因，吾辈在广州生活了 5 年，在北京生活也有 2 年了，开始想要逃离大城市的生活，而是想在一个小城市中沉静一段时间，找寻自己的未来。也许最终如果考虑工作机会，还是会回到东京，但至少留学时还不需要考虑这个因素。</p><h3 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h3><p>留学期间，吾辈主要考虑三件事</p><ol><li>语言学习，这是目的之一，两个月一次的 nat test 将会作为快速反馈结果的方法</li><li>尝试更好的生活习惯，时间管理、锻炼、开发、写作等</li><li>也许开始尝试独立开发或同人小说的写作，抑或是尝试 pmmm tts 的日语翻译</li></ol><p>必须承认，日本不是最理想的移民国家。与欧美相比，它在传统上并不是移民国家，所以对于真正打算移民归化而言会比较困难。另外在上文也提到过日本似乎逐渐没落了，已经经历了失去的二十年，之后还必须经历失去的三十年，停留在上个世纪，新世纪的互联网发展的一塌糊涂。比较理想的润的国家可能是加拿大和澳大利亚，这两个地方传统上都是移民国家，而且生活压力相对于美国和亚洲都没有那么大。</p><p>如果在日本生活了几年之后发现呆不下去，二润也并非没有可能。或许吾辈正在一如既往地绕远路，但这是吾辈能看到的一个选择，可能是目前能找到最好的。有时候真的羡慕夏泼小姐，既能够明确看到自己想要的事物，并且有能力坚定不移的去执行，即便实际的实行方式肮脏，但最终也无怨无悔地不断前行。吾辈既想保持心灵的纯粹简单，却又想要变得更加强大，这两者似乎是矛盾的，却也只能边走边看了。</p>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    <category term="个人" scheme="https://blog.rxliuli.com/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    <category term="思考" scheme="https://blog.rxliuli.com/categories/%E4%B8%AA%E4%BA%BA/%E6%80%9D%E8%80%83/"/>
    
    
    <category term="日本" scheme="https://blog.rxliuli.com/tags/%E6%97%A5%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>clannad 重看的感想</title>
    <link href="https://blog.rxliuli.com/p/13c4d5fecd3d494fb25a6abaf7c2c250/"/>
    <id>https://blog.rxliuli.com/p/13c4d5fecd3d494fb25a6abaf7c2c250/</id>
    <published>2023-07-28T20:26:02.790Z</published>
    <updated>2023-08-13T15:08:23.440Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近整理硬盘中的动画，发现了 clannad 这部动画，抱着消磨闲暇时间的想法重新看了它。上一次看这部动画还是在高中的时候，那时看这个动画并为有太多共鸣，不管是前期普通的校园恋爱后宫，还是后期渚与汐的死亡，都没有引发太多同感。这次重新观看，就像看其他的老电视剧一样，有过了更多的经历之后，曾经看不懂的、被忽略的细节逐渐浮现在眼前，反而让吾辈真正喜欢上了这部动画。</p><p><img src="/resources/e14dc33ae8634c17bb6b59f479609ce8.jpg" alt="e14dc33ae8634c17bb6b59f479609ce8.jpg"></p><h2 id="过去"><a href="#过去" class="headerlink" title="过去"></a>过去</h2><p>2014 年时，虽然 clannad 已经播出有好几年了，但吾辈还是第一次看到。因为那时吾辈才刚有手机，可以更容易随时接触到互联网，所以才能开始了解之前没太有途径可以看到的日本动画。那时候这部动画被称为 “催泪神作”、“写作 CL，读作人生” 之类的，颇有点中二病的味道。吾辈也慕名而去看了，或许是期待值拉的太高，亦或是太过单纯，吾辈对动画并没有太多的感觉。时光荏苒，吾辈已经工作了几年，也早已不再每周追番，之前下载的动画经历过几次数据转移，静静地躺在硬盘的一个角落中。</p><p>如果要说这部动画是否有意思，里面的主角是否有趣之类的。当然，动画塑造了一些有趣的角色</p><p>坂上智代：聪明而又强大，理想中的女性形象<br>一之濑琴美：非常聪明的青梅竹马<br>藤林杏：傲娇的姐姐<br>藤林琼：害羞的妹妹<br>伊吹风子：可爱担当<br>春原：基本上是好基友这样的人</p><p>有很多有趣的角色，春原与智代的互动也很有趣，但仅此而已，并未达到吾辈心中神作的高度。</p><h2 id="现在"><a href="#现在" class="headerlink" title="现在"></a>现在</h2><p>为什么这一次再看时观点不同了呢？因为注意到了之前看的时候没有留意到的细节</p><ul><li>伊吹风子怎么了？</li><li>一之濑琴美为什么会来到朋也的高中？</li><li>古河渚和冈崎汐得了什么病？</li><li>女主角们之后怎么样了？</li><li>冈崎汐死的时候发生了什么？</li></ul><p>之前在看这部动画的时候吾辈并未留意到，也没有想过这些问题。</p><p>伊吹风子，这是再看动画时最让吾辈感到悲伤的一个人。15 岁时上高中时因为车祸一直在医院昏迷，灵魂却仍在自由的活动，为了姐姐的婚礼，给学校学校雕刻手工海星作为请柬，在成功举行了婚礼之后，最终却被绝大多数人忘记了。如果这听起来不算太糟，那么糟糕还的在后面。在医院昏迷了 10 年之后，她终于醒了过来，但她的心智年龄却永远停在了 15 岁。这就是为什么她再次出现时就像小女孩一样在公园里玩沙子，明明和朋也同龄，但却与朋也的女儿冈崎汐玩的很开心。可悲的是，关于这点，她自己也是知道的，所以她总是说自己是一个成熟的大人，即便她可能永远也长不大了。小时候总是想着快点长大，长大后又怀念小时候的时光，但如果真的无法长大的话，又会产生新的痛苦。</p><p><img src="/resources/b1612469b2084f02a37d58d64254eeea.jpg" alt="伊吹风子"></p><p>一之濑琴美，吾辈看动画时没有太关注这个不怎么在聚光灯下的人，但在看完同人小说 <a href="https://www.fanfiction.net/s/11969560">The Kotomi Continuum</a> 和 <a href="https://archiveofourown.org/works/16039892">Broken Doll: An Alternate After Story</a> 之后，吾辈也真正喜欢上了她。小时候父母双亡，一个人孤独生活多年，产生了强烈的不安全感。尽管如此，她将所有精力投入到了读书与学习上面，这让她获得全国前 10 的成绩排名。那么，为什么她没有去更好的高中，又为何后来又去了美国留学？实际上，她完全是为了朋也才来到他的高中，她甚至完全不需要上课。但长时间的等待之后，直到高中第 3 年才与朋也再次重新相识。不幸的是，在动画中，朋也选择了与渚在一起，所以她最后去美国更好的深造，但心中的问题并未解开。在上面提到的同人小说中，琴美在 16 年后逐渐陷入了抑郁，生育周期也即将结束。这究竟还能算是好结局么？一个人的好结局是否意味着对其他人的坏结局呢？</p><p><strong>前天看到了小兔子，昨天是小鹿，今天是你。</strong><br><img src="/resources/d7442278e9fc4e8187d73a8589631633.jpg" alt="一之濑琴美"></p><!-- 冈崎汐死的时候发生了什么？看起来好像是时间倒转到渚分娩的时候，并且这次渚没有死亡。由于存在许多平行世界的暗示，这可能意味着朋也的意识去了另一个渚、汐和朋也都还活着的平行世界，但之前的世界呢？死亡是否仍然是事实。动画的结局多少算是个好结局，但也否定了之前的所有努力，因为朋也不是靠自己解决的问题，而是依赖于神奇的光玉。现实中不是这样运作的，如果现实中的亲人死亡，也只能忍住悲痛继续前进。 --><h2 id="同人小说"><a href="#同人小说" class="headerlink" title="同人小说"></a>同人小说</h2><blockquote><p>实际上，吾辈喜欢的可能不是 clannad 动画，而是同人小说中对它的重新诠释。</p></blockquote><p>一如既往，吾辈喜欢一个动画之后，就会想要去找一些同人小说去看，去看不同由于一些不同的选择而走向的不同的故事，也想着如果有人能够拯救了这一切的悲剧就好了。正如《飞向星空》之于《魔法少女小圆》的关系，吾辈也是由同人小说了解各种细节设定。怀着这样的想法，吾辈找到了几个还不错的同人小说。说真的，在动画中没怎么看明白的部分，例如空白世界的小女孩和机器人，以及光玉等等，都在同人小说中得到了解答。</p><ul><li><a href="https://www.fanfiction.net/s/11969560">The Kotomi Continuum</a>: 讲述美琴、杏和朋也走到了一起的故事，总体上是一个科幻+爱情故事</li><li><a href="https://archiveofourown.org/works/16039892">Broken Doll: An Alternate After Story</a>: 讲述冈崎汐没有在 5 岁时死去的世界中，36 岁的朋也被藤林椋的女儿喜欢并与之结婚的故事，但与上面的故事有所关联，尽管它们不是同一个作者所写</li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>为什么现在会对这个故事有这样的共鸣呢？或许是因为更能体会到现实的不如人意，总有太多事物得不到和错过，人不能永远停留在某个阶段了吧。</p>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    <category term="其他" scheme="https://blog.rxliuli.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    <category term="杂谈" scheme="https://blog.rxliuli.com/categories/%E5%85%B6%E4%BB%96/%E6%9D%82%E8%B0%88/"/>
    
    
    <category term="杂谈" scheme="https://blog.rxliuli.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>vue 中 boolean props 的默认值问题</title>
    <link href="https://blog.rxliuli.com/p/f3564b039a28421188146aa89b52a3c0/"/>
    <id>https://blog.rxliuli.com/p/f3564b039a28421188146aa89b52a3c0/</id>
    <published>2023-07-11T01:35:08.142Z</published>
    <updated>2023-07-11T13:10:56.167Z</updated>
    
    <content type="html"><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>最近组内其他人基于 antdv 封装了一些组件，其中一些 boolean 类型的 props 被透传到了 antdv 的组件。但实际使用时发现，当不传递这些 boolean props 时，antdv 组件的行为和预期不一致。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>例如</p><p>组件 A</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script lang="ts" setup&gt;<br>withDefaults(<br>  defineProps&lt;{<br>    flag?: boolean<br>  }&gt;(),<br>  {<br>    flag: true,<br>  },<br>)<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;div&gt;<br>    {{ String($props.flag ?? 'undefined') }}<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></tbody></table></figure><p>组件 B</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script lang="ts" setup&gt;<br>import A from './A.vue'<br><br>defineProps&lt;{<br>  flag?: boolean<br>}&gt;()<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;A v-bind="$props"&gt;&lt;/A&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></tbody></table></figure><p>测试使用</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import A from './A.vue'<br>import B from './B.vue'<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;A&gt;&lt;/A&gt;<br>  &lt;B&gt;&lt;/B&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></tbody></table></figure><p>渲染结果</p><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">true<br>false<br></code></pre></td></tr></tbody></table></figure><blockquote><p>playground: <a href="https://play.vuejs.org/#eNqFUcFOwzAM/ZUoQtomjfbAbZRNLXCAAyDgmEtp3S4jTaIk3SZN/XecdOs2aRo9VLbfs/Pst6Op1tG6BTqjiS0M145YcK2eM8kbrYwjKamMasgoilNPHA1ANgBZAO6ZZDKJ+ynYj4mDRovcAWaEJOk8idM+zDDMMEzigUKn1NlCyYrX0coqiYp2nstooRrNBZh37biSltEZCYjHciHU5jXUnGlheqgXSyh+L9RXdutrjH4YsGDWwOiAudzU4Hr4+esNthgPYKPKViD7CvgJVonWa+xpWStLlH3CC2pfwvm4rL/t89aBtIelvFDP7AKfUTzq45XVj3LvorvQx2SHVwxunPgpclk/IB27//M2WFhCxSV8GKVtsn+sEnm9mJEfpQTkSOnm48lVr73bZH37w2WJT99oP4zRvf/npoeXr8s1TG64Wz5BlbfC2fG5QkQvaMSqVznFe50Q9kf24MT/jytgEgrHNfZtScnXQ+K/3Y58OYP+jfu9Ij+YLBZkhH4HZeVoQrpuGBAfJpwu3v0ByAcmXQ==">https://play.vuejs.org/#eNqFUcFOwzAM/ZUoQtomjfbAbZRNLXCAAyDgmEtp3S4jTaIk3SZN/XecdOs2aRo9VLbfs/Pst6Op1tG6BTqjiS0M145YcK2eM8kbrYwjKamMasgoilNPHA1ANgBZAO6ZZDKJ+ynYj4mDRovcAWaEJOk8idM+zDDMMEzigUKn1NlCyYrX0coqiYp2nstooRrNBZh37biSltEZCYjHciHU5jXUnGlheqgXSyh+L9RXdutrjH4YsGDWwOiAudzU4Hr4+esNthgPYKPKViD7CvgJVonWa+xpWStLlH3CC2pfwvm4rL/t89aBtIelvFDP7AKfUTzq45XVj3LvorvQx2SHVwxunPgpclk/IB27//M2WFhCxSV8GKVtsn+sEnm9mJEfpQTkSOnm48lVr73bZH37w2WJT99oP4zRvf/npoeXr8s1TG64Wz5BlbfC2fG5QkQvaMSqVznFe50Q9kf24MT/jytgEgrHNfZtScnXQ+K/3Y58OYP+jfu9Ij+YLBZkhH4HZeVoQrpuGBAfJpwu3v0ByAcmXQ==</a></p></blockquote><p>是不是感觉很神奇，组件 B 明明将所有的 props 都透传给了组件 A，但却渲染出来了不同的结果。在组件 B 中打印一下 <code>props.flag</code> 的值，发现是 <code>false</code>，这就是实际的问题了。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>好吧，目前的解决方法是将所有的 boolean 值的默认值都强制指定为 undefined，例如</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script lang="ts" setup&gt;<br>withDefaults(<br>  defineProps&lt;{<br>    flag?: boolean<br>  }&gt;(),<br>  {<br>    flag: undefined,<br>  },<br>)<br>&lt;/script&gt;<br></code></pre></td></tr></tbody></table></figure><p>这样就可以得到预期的结果了。</p><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">true<br>true<br></code></pre></td></tr></tbody></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>在 vue 的官方文档中找到了这个行为的定义，ref: <a href="https://cn.vuejs.org/guide/components/props.html#boolean-casting">Boolean 类型转换</a></li><li>检查了一下 vue issues，发现这是一个自 2017 年以来就不断有人提出的问题，看起来已经是一个历史遗留问题了，ref: <a href="https://github.com/vuejs/vue/issues/4792">https://github.com/vuejs/vue/issues/4792</a></li><li>有一个 pr 正在尝试改变这个行为，ref: <a href="https://github.com/vuejs/core/pull/8602">https://github.com/vuejs/core/pull/8602</a> – 吾辈错了，它只是修复 withDefaults 显式指定 undefined 时 props 的类型问题，默认情况下还是不符合预期，yyx 回复说为了兼容无法改变，ref: <a href="https://github.com/vuejs/core/issues/8576#issuecomment-1630583143">https://github.com/vuejs/core/issues/8576#issuecomment-1630583143</a></li></ul>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    <category term="前端" scheme="https://blog.rxliuli.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://blog.rxliuli.com/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="typescript" scheme="https://blog.rxliuli.com/tags/typescript/"/>
    
    <category term="vue" scheme="https://blog.rxliuli.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>使用 json schema</title>
    <link href="https://blog.rxliuli.com/p/05e27a46cc1b4dfdbecfe4c8209211fe/"/>
    <id>https://blog.rxliuli.com/p/05e27a46cc1b4dfdbecfe4c8209211fe/</id>
    <published>2023-06-26T06:42:55.120Z</published>
    <updated>2023-09-28T05:13:44.866Z</updated>
    
    <content type="html"><![CDATA[<h2 id="json-schema-是什么"><a href="#json-schema-是什么" class="headerlink" title="json schema 是什么"></a>json schema 是什么</h2><!-- 说明一下 json schema 的官方定义 --><p><a href="https://json-schema.org/">jsonschema</a> 是一种用于描述 json 数据的语言，它的作用是帮助我们定义 json 数据的结构，以及对数据进行校验。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><!-- 说明现有的一些 json schema 的使用场景 --><p>json schema 的应用场景广泛，包括</p><ul><li>定义配置文件的格式以供编辑时提示，例如在 vscode 中编辑 package.json、manifest.json 会有提示</li><li>服务端的接口定义，例如 openapi/openrpc 等</li><li>数据校验，例如校验客户端的参数或者服务端返回的数据</li><li>更多。。。</li></ul><h2 id="为什么要选择它"><a href="#为什么要选择它" class="headerlink" title="为什么要选择它"></a>为什么要选择它</h2><!-- 说明相比于类似的工具或协议，json schema 有什么优势，例如工具支持，运行时存在等等 --><p>与 jsonschema 类似的工具有很多，在不同的场景中不同的等价项，例如在数据校验方面，<a href="https://www.npmjs.com/package/zod">zodjs</a> 是一种使用 js api 作为 json 校验的工具。在定义服务端接口方面，竞争者更是众多，包括 golang 的 <a href="https://grpc.io/">grpc</a>、fackbook 的 <a href="https://graphql.org/">graphql</a>、typescript 的 <a href="https://trpc.io/">trpc</a> 等等。但是 json schema 有以下优势：</p><ul><li>跨语言 – json schema 是一种标准，因此可以跨语言使用，例如可以使用 json schema 来定义前后端交互的接口，然后使用不同语言生成对应的接口定义。与之相对的，zodjs 适用于 js，grpc 比较适用于 golang，graphql/trpc 比较适用于 js/ts 等等。</li><li>工具支持 – json schema 的工具支持非常丰富，数据校验有 ajv、jsonschema 等，生成 typescript 接口有 json-schema-to-typescript，生成 openapi 的接口有 json-schema-to-openapi-schema，许多工具多已经有现成的了</li><li>运行时存在 – json schema 本身就是 json，因此可以直接在运行时使用，例如在客户端校验参数或者在服务端校验返回值，而 grpc/graphql/trpc 等则需要在运行时使用对应的工具来解析 schema</li></ul><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><!-- 说明一下 json schema 的基本语法 --><p>json schema 本身也使用 json 编写，可以简单的编写。</p><p>一个基本示例</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">{</span><br>  <span class="hljs-attr">"type"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"object"</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">"description"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"用户信息"</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">"properties"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span><br>    <span class="hljs-attr">"name"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span><br>      <span class="hljs-attr">"type"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"string"</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"description"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"姓名"</span><br>    <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"age"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span><br>      <span class="hljs-attr">"type"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"number"</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"description"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"年龄"</span><br>    <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"sex"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span><br>      <span class="hljs-attr">"type"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"integer"</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"description"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"性别，0 为女，1 为男"</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"enum"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"hobbies"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span><br>      <span class="hljs-attr">"type"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"array"</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"items"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span><br>        <span class="hljs-attr">"type"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"string"</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">"description"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"爱好"</span><br>      <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"description"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"爱好"</span><br>    <span class="hljs-punctuation">}</span><br>  <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">"required"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">"name"</span><span class="hljs-punctuation">,</span> <span class="hljs-string">"age"</span><span class="hljs-punctuation">,</span> <span class="hljs-string">"sex"</span><span class="hljs-punctuation">,</span> <span class="hljs-string">"hobbies"</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">}</span><br></code></pre></td></tr></tbody></table></figure><p>这描述了一个对象的结构，它对应的 typescript 接口是</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">/** 用户信息 */</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">User</span> {<br>  <span class="hljs-comment">/** 姓名 */</span><br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br>  <span class="hljs-comment">/** 年龄 */</span><br>  <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span><br>  <span class="hljs-comment">/** 性别，0 为女，1 为男 */</span><br>  <span class="hljs-attr">sex</span>: <span class="hljs-number">0</span> | <span class="hljs-number">1</span><br>  <span class="hljs-comment">/** 爱好 */</span><br>  <span class="hljs-attr">hobbies</span>: <span class="hljs-built_in">string</span>[]<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="校验数据"><a href="#校验数据" class="headerlink" title="校验数据"></a>校验数据</h3><p>有了 jsonschema，就可以校验数据了，这里使用 <a href="https://www.npmjs.com/package/jsonschema">jsonschema 库</a>。</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> jsonschema <span class="hljs-keyword">from</span> <span class="hljs-string">'jsonschema'</span><br><br><span class="hljs-keyword">const</span> res = jsonschema.<span class="hljs-title function_">validate</span>(data, schema)<br><span class="hljs-keyword">if</span> (res.<span class="hljs-property">valid</span>) {<br>  <span class="hljs-comment">// 数据校验通过</span><br>} <span class="hljs-keyword">else</span> {<br>  <span class="hljs-comment">// 数据校验失败</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">errors</span>)<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="生成类型定义"><a href="#生成类型定义" class="headerlink" title="生成类型定义"></a>生成类型定义</h3><p>如果希望生成类型定义来便于开发，可以使用 <a href="https://www.npmjs.com/package/json-schema-to-typescript">json-schema-to-typescript</a>。</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> { compile } <span class="hljs-keyword">from</span> <span class="hljs-string">'json-schema-to-typescript'</span><br><br><span class="hljs-keyword">const</span> r = <span class="hljs-keyword">await</span> <span class="hljs-title function_">compile</span>(<br>  {<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">'object'</span>,<br>    <span class="hljs-attr">description</span>: <span class="hljs-string">'用户信息'</span>,<br>    <span class="hljs-attr">properties</span>: {<br>      <span class="hljs-attr">name</span>: {<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">'string'</span>,<br>        <span class="hljs-attr">description</span>: <span class="hljs-string">'姓名'</span>,<br>      },<br>      <span class="hljs-attr">age</span>: {<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">'number'</span>,<br>        <span class="hljs-attr">description</span>: <span class="hljs-string">'年龄'</span>,<br>      },<br>      <span class="hljs-attr">sex</span>: {<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">'integer'</span>,<br>        <span class="hljs-attr">description</span>: <span class="hljs-string">'性别，0 为女，1 为男'</span>,<br>        <span class="hljs-attr">enum</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>],<br>      },<br>      <span class="hljs-attr">hobbies</span>: {<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">'array'</span>,<br>        <span class="hljs-attr">items</span>: {<br>          <span class="hljs-attr">type</span>: <span class="hljs-string">'string'</span>,<br>          <span class="hljs-attr">description</span>: <span class="hljs-string">'爱好'</span>,<br>        },<br>        <span class="hljs-attr">description</span>: <span class="hljs-string">'爱好'</span>,<br>      },<br>    },<br>    <span class="hljs-attr">required</span>: [<span class="hljs-string">'name'</span>, <span class="hljs-string">'age'</span>, <span class="hljs-string">'sex'</span>, <span class="hljs-string">'hobbies'</span>],<br>  },<br>  <span class="hljs-string">'User'</span>,<br>  {<br>    <span class="hljs-attr">bannerComment</span>: <span class="hljs-string">''</span>,<br>    <span class="hljs-attr">additionalProperties</span>: <span class="hljs-literal">false</span>,<br>  },<br>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(r)<br></code></pre></td></tr></tbody></table></figure><p>得到</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用户信息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">User</span> {<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 姓名</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 年龄</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 性别，0 为女，1 为男</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">sex</span>: <span class="hljs-number">0</span> | <span class="hljs-number">1</span><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 爱好</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">hobbies</span>: <span class="hljs-built_in">string</span>[]<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="openapi"><a href="#openapi" class="headerlink" title="openapi"></a>openapi</h2><!-- 说明 openapi 中使用 json schema 的应用场景 --><p>下面来看一个实际用例，使用 openapi 定义服务端 restful 接口，并根据 schema 生成客户端。</p><p>在实际探索生成客户端之前，先考虑生成的客户端大概是什么样的，这里可以参考 <a href="https://github.com/octokit/octokit.js">octokit.js</a>，使用方式形如</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// Create a personal access token at https://github.com/settings/tokens/new?scopes=repo</span><br><span class="hljs-keyword">const</span> octokit = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Octokit</span>({ <span class="hljs-attr">auth</span>: <span class="hljs-string">`personal-access-token123`</span> })<br><br><span class="hljs-comment">// Compare: https://docs.github.com/en/rest/reference/users#get-the-authenticated-user</span><br><span class="hljs-keyword">const</span> {<br>  <span class="hljs-attr">data</span>: { login },<br>} = <span class="hljs-keyword">await</span> octokit.<span class="hljs-property">rest</span>.<span class="hljs-property">users</span>.<span class="hljs-title function_">getAuthenticated</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">'Hello, %s'</span>, login)<br></code></pre></td></tr></tbody></table></figure><p>可以看到整体上是 2 级关系，使用模块-方法名，然后传入参数，返回结果，好像它们只是普通的异步函数一样，所以下面也将尝试生成这样的 client。</p><p>下面定义一个简单的 openapi schema，假设它是 <em>test.openapi.json</em></p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">{</span><br>  <span class="hljs-attr">"paths"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span><br>    <span class="hljs-attr">"/ping"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span><br>      <span class="hljs-attr">"get"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span><br>        <span class="hljs-attr">"operationId"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"ping"</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">"description"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"测试服务是否正常"</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">"responses"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span><br>          <span class="hljs-attr">"200"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span><br>            <span class="hljs-attr">"description"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"服务正常"</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">"content"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span><br>              <span class="hljs-attr">"text/plain"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span><br>                <span class="hljs-attr">"schema"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span><br>                  <span class="hljs-attr">"type"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"string"</span><span class="hljs-punctuation">,</span><br>                  <span class="hljs-attr">"example"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"pong"</span><br>                <span class="hljs-punctuation">}</span><br>              <span class="hljs-punctuation">}</span><br>            <span class="hljs-punctuation">}</span><br>          <span class="hljs-punctuation">}</span><br>        <span class="hljs-punctuation">}</span><br>      <span class="hljs-punctuation">}</span><br>    <span class="hljs-punctuation">}</span><br>  <span class="hljs-punctuation">}</span><br><span class="hljs-punctuation">}</span><br></code></pre></td></tr></tbody></table></figure><p>希望生成的类型定义</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Test</span> {<br>  <span class="hljs-title function_">ping</span>(): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">string</span>&gt;<br>}<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">type</span> <span class="hljs-title class_">ApiInstance</span> = {<br>  <span class="hljs-attr">test</span>: <span class="hljs-title class_">Test</span><br>}<br></code></pre></td></tr></tbody></table></figure><p>希望使用 fetch 适配器创建 client 使用方式</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> api = createClient&lt;<span class="hljs-title class_">ApiInstance</span>&gt;(runtime，request)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">await</span> apis.<span class="hljs-property">test</span>.<span class="hljs-title function_">ping</span>()) <span class="hljs-comment">// pong</span><br></code></pre></td></tr></tbody></table></figure><p>期望</p><ul><li>以类似 github api sdk 的方式使用，不需要使用面向对象的使用方式</li><li>所有的接口均为强类型调用，能识别绝大多数接口定义</li><li>允许合并一些接口，例如某些接口无法正确识别，但允许自定义并合并覆盖生成的</li><li>允许自定义底层的请求实现，例如可以自行选择 fetch/axios 等，也能添加特定的 token 之类的</li></ul><p>现有的工具</p><ol><li><a href="https://github.com/OpenAPITools/openapi-generator">OpenAPI Generator</a>: 这是一个强大的工具，可以从 OpenAPI spec 生成客户端 SDK、服务器存根和 API 文档。它支持许多语言和框架，包括 TypeScript。– 生成的 sdk 非常难用，所有参数都是平铺的，而不是对象的形式，对与可选参数非常不友好。</li><li><a href="https://github.com/swagger-api/swagger-codegen">Swagger Codegen</a>: 这是一个早期的工具，可以从 Swagger 或 OpenAPI 3.0 spec 生成客户端和服务器代码。它也支持 TypeScript，但是请注意，这个项目已经不再活跃，大部分的开发工作已经转移到 OpenAPI Generator。– 已废弃</li><li><a href="https://github.com/RicoSuter/NSwag">NSwag</a>: 这是一个开源的、用于生成 TypeScript 和 C# 客户端的工具，可以从 Swagger 和 OpenAPI spec 中生成。– 和 OpenAPI Generator 有一样的问题<br>GitHub 链接：&lt;&gt;</li><li><a href="https://github.com/acacode/swagger-typescript-api">swagger-typescript-api</a>: 这是一个生成 TypeScript API 的工具，可以从 Swagger 和 OpenAPI spec 中生成。它生成的代码是基于 axios 的，因此如果你的项目已经使用了 axios，这可能是一个好的选择。– 生成的 sdk 每个文件一个 api 和 config，无法在一个配置统一全部的 api</li></ol><p>希望自定义生成逻辑的话，基于现有的库实现也很简单，实际在公司的项目中，为服务端的所有 api 生成 ts 客户端也就 3000 行代码左右。</p><p><img src="/resources/4725f3f77f6544a4bfeaf0c5e773248f.svg" alt="基本生成流程图.drawio.svg"></p><p>基本上，可以分为开发时和运行时，开发时主要负责代码生成，使用生成的 ts 辅助类型校验，运行时主要负责使用 jsonschema 进行数据校验，以及一些可能需要在运行时使用的信息，例如 openapi 中的 url/method 等参数。</p><ol><li>读取 openapi schema，找到每个端点并且解析获取对应的 params/result 的 json schema</li><li>生成对应的 runtime 信息，包含 operationId、url、method、params/result 的 json schema 等必要信息</li><li>生成对应的类型定义，包含 params/result 及 ref 引用的 ts 类型定义</li><li>使用 adapter 生成客户端，或者编写服务端代码（强类型&amp;校验）</li></ol><p>一个 fetch 的 adapter 示例实现</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> <span class="hljs-title class_">HttpMethods</span> =<br>  | <span class="hljs-string">'get'</span><br>  | <span class="hljs-string">'put'</span><br>  | <span class="hljs-string">'post'</span><br>  | <span class="hljs-string">'delete'</span><br>  | <span class="hljs-string">'options'</span><br>  | <span class="hljs-string">'head'</span><br>  | <span class="hljs-string">'patch'</span><br>  | <span class="hljs-string">'trace'</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">OpenApiOperation</span> {<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br>  params?: <span class="hljs-title class_">Schema</span><br>  result?: <span class="hljs-title class_">Schema</span><br>  <span class="hljs-attr">extra</span>: {<br>    <span class="hljs-attr">path</span>: <span class="hljs-built_in">string</span><br>    <span class="hljs-attr">method</span>: <span class="hljs-title class_">HttpMethods</span><br>    <span class="hljs-attr">fields</span>: <span class="hljs-title class_">OpenAPIV3</span>.<span class="hljs-property">ParameterObject</span>[]<br>    <span class="hljs-attr">body</span>: <span class="hljs-built_in">boolean</span><br>  }<br>}<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> createClient&lt;T&gt;(<br>  <span class="hljs-attr">runtimes</span>: <span class="hljs-title class_">Record</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-title class_">OpenApiOperation</span>[]&gt;,<br>  <span class="hljs-attr">request</span>: <span class="hljs-function">(<span class="hljs-params">options: {</span></span><br><span class="hljs-params"><span class="hljs-function">    method: <span class="hljs-built_in">string</span></span></span><br><span class="hljs-params"><span class="hljs-function">    url: <span class="hljs-built_in">string</span></span></span><br><span class="hljs-params"><span class="hljs-function">    data?: <span class="hljs-built_in">any</span></span></span><br><span class="hljs-params"><span class="hljs-function">  }</span>) =&gt;</span> <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">any</span>&gt;,<br>): T {<br>  <span class="hljs-keyword">return</span> (<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(runtimes) <span class="hljs-keyword">as</span> [<span class="hljs-built_in">string</span>, <span class="hljs-title class_">OpenApiOperation</span>[]][]).<span class="hljs-title function_">reduce</span>(<br>    <span class="hljs-function">(<span class="hljs-params">acc, [k, v]</span>) =&gt;</span> {<br>      acc[k] = v.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">acc, it</span>) =&gt;</span> {<br>        acc[it.<span class="hljs-property">name</span>] = <span class="hljs-keyword">async</span> (<span class="hljs-attr">args</span>: <span class="hljs-built_in">any</span>) =&gt; {<br>          <span class="hljs-keyword">let</span> <span class="hljs-attr">path</span>: <span class="hljs-built_in">string</span> = it.<span class="hljs-property">extra</span>.<span class="hljs-property">path</span><br>          <span class="hljs-keyword">const</span> paramaters = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(<br>            <span class="hljs-title function_">groupBy</span>(it.<span class="hljs-property">extra</span>.<span class="hljs-property">fields</span>, <span class="hljs-function">(<span class="hljs-params">it</span>) =&gt;</span> it.<span class="hljs-property">in</span>),<br>          ).<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">acc, [k, v]</span>) =&gt;</span> {<br>            acc[k] = v.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">it</span>) =&gt;</span> it.<span class="hljs-property">name</span>)<br>            <span class="hljs-keyword">return</span> acc<br>          }, {} <span class="hljs-keyword">as</span> <span class="hljs-title class_">Record</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">string</span>[]&gt;)<br>          <span class="hljs-keyword">if</span> (paramaters.<span class="hljs-property">path</span>) {<br>            <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(<span class="hljs-title function_">pick</span>(args, paramaters.<span class="hljs-property">path</span>)).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">[k, v]</span>) =&gt;</span> {<br>              <span class="hljs-keyword">if</span> (path.<span class="hljs-title function_">includes</span>(<span class="hljs-string">`{<span class="hljs-subst">${k}</span>}`</span>) &amp;&amp; !<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(v)) {<br>                path = path.<span class="hljs-title function_">replace</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">`{<span class="hljs-subst">${k}</span>}`</span>, <span class="hljs-string">'g'</span>), <span class="hljs-title class_">String</span>(v))<br>              }<br>            })<br>            args = <span class="hljs-title function_">omit</span>(args, paramaters.<span class="hljs-property">path</span>)<br>          }<br>          <span class="hljs-keyword">if</span> (paramaters.<span class="hljs-property">query</span>) {<br>            <span class="hljs-keyword">const</span> u = <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLSearchParams</span>(<br>              <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(<span class="hljs-title function_">pick</span>(args, paramaters.<span class="hljs-property">query</span>)),<br>            )<br>            path += <span class="hljs-string">'?'</span> + u.<span class="hljs-title function_">toString</span>()<br>            args = <span class="hljs-title function_">omit</span>(args, paramaters.<span class="hljs-property">query</span>)<br>          }<br>          <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> <span class="hljs-title function_">request</span>({<br>            <span class="hljs-attr">method</span>: it.<span class="hljs-property">extra</span>.<span class="hljs-property">method</span>,<br>            <span class="hljs-attr">url</span>: path,<br>            <span class="hljs-attr">data</span>:<br>              !args ||<br>              (args.<span class="hljs-title function_">toString</span>() === <span class="hljs-string">'[object Object]'</span> &amp;&amp;<br>                <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(args).<span class="hljs-property">length</span> === <span class="hljs-number">0</span>)<br>                ? <span class="hljs-literal">undefined</span><br>                : args,<br>          })<br>        }<br>        <span class="hljs-keyword">return</span> acc<br>      }, {} <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span>)<br>      <span class="hljs-keyword">return</span> acc<br>    },<br>    {} <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span>,<br>  )<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="jsonrpc"><a href="#jsonrpc" class="headerlink" title="jsonrpc"></a>jsonrpc</h2><!-- 说明 jsonrpc 如何使用 json schema 的应用场景 --><p>与 openapi 相比，jsonrpc 适用范围可以更加广泛，事实上，jsonrpc 也可以用在 restful 接口上，但一般还是使用 openapi，后者与 restful 有更好的结合。但 jsonrpc 在其他场景，例如 websocket、electron 线程通信等等都可以使用，当然使用 ts 也可以，例如 <a href="https://github.com/GoogleChromeLabs/comlink">comlink</a> 就是这样做的，但 jsonrpc 可以在运行时使用，以实现数据校验的功能。</p><p>一些可能的使用场景</p><ul><li>与 web worker/iframe 通信</li><li>与 worker_threads 通信</li><li>websocket 通信</li><li>electron 主进程与渲染进程通信</li><li>chrome extension 多线程通信</li></ul><p>除开生成代码的部分之外，adapter 部分甚至可以不需要 runtime，因为 runtime 信息只用于校验，不像 openapi 一样还有额外的信息。</p><p>一个基本的 openrpc 定义</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">{</span><br>  <span class="hljs-attr">"name"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"hello"</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">"description"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"hello world"</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">"params"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">{</span><br>      <span class="hljs-attr">"name"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"name"</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"description"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"名字"</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"required"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"schema"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span><br>        <span class="hljs-attr">"type"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"string"</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">"examples"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">"world"</span><span class="hljs-punctuation">]</span><br>      <span class="hljs-punctuation">}</span><br>    <span class="hljs-punctuation">}</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">"result"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span><br>    <span class="hljs-attr">"name"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"result"</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"schema"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span><br>      <span class="hljs-attr">"type"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"string"</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">"examples"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">"hello world"</span><span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">}</span><br>  <span class="hljs-punctuation">}</span><br><span class="hljs-punctuation">}</span><br></code></pre></td></tr></tbody></table></figure><p>重点是 methods 部分，可以看到就是在用 json 表达函数的定义，有参数和返回值的定义。<br>它的对应 ts 定义</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Service</span> {<br>  <span class="hljs-title function_">hello</span>(<span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">string</span>&gt;<br>}<br></code></pre></td></tr></tbody></table></figure><p>这种方式虽然看起来没有使用 ts 定义来的直观，但在跨语言解析方便占有绝对优势，例如生成 golang 的接口代码可以通过 golang 的 ast 实现，而不必面临解析复杂的 ts 代码的问题。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>json schema 是一个不错的规范，由于 json 被绝大多数语言接受了，所以也随之在很多语言中有了实现，可以先从简单的数据校验开始尝试，然后使用它来进行更加复杂的代码生成，可能是一个不错的路径。</p>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    <category term="前端" scheme="https://blog.rxliuli.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="工程化" scheme="https://blog.rxliuli.com/categories/%E5%89%8D%E7%AB%AF/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
    
    <category term="typescript" scheme="https://blog.rxliuli.com/tags/typescript/"/>
    
    <category term="ast" scheme="https://blog.rxliuli.com/tags/ast/"/>
    
  </entry>
  
  <entry>
    <title>使用 vite 开发和构建 nodejs 应用</title>
    <link href="https://blog.rxliuli.com/p/49fb661c297b4544a208ea898c77e5a0/"/>
    <id>https://blog.rxliuli.com/p/49fb661c297b4544a208ea898c77e5a0/</id>
    <published>2023-06-05T19:18:13.466Z</published>
    <updated>2023-06-19T06:56:21.500Z</updated>
    
    <content type="html"><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>vite 作为现代 web 应用的构建工具，许多开发者将之用于开发 web 应用（react、vue），由于其本身的易用性和高性能，许多 web 框架甚至官方编写了插件（solid、astro），可以称得上是近年来 webpack 的成功的挑战者。但实际上，发展至今，vite 已经远不仅仅是一个 web 层的工具，它的周边生态正在蓬勃发展，衍生除了一系列周边的工具，在之前的 <a href="/p/0987a1de82694970851755d02920bc6e">vite-不仅仅是一个构建工具</a> 有所提及，这里专门针对开发 nodejs 应用来说明。</p><h2 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h2><p>vite 为什么适合开发 nodejs 应用？</p><p>首先，即便不使用 vite，你可能也需要使用 vitest 之类的工具进行单元测试，使用 tsx/ts-node 运行源代码调试，使用 tsup/esbuild 将代码 bundle 为最终要运行的 js。那么，如果使用了 vite，这些事情将在同一个生态中完成。</p><ul><li>vitest: 单元测试工具，支持 esm，支持 ts</li><li>vite-node: ts 代码的运行工具，支持 vite 的各种特性，例如 <code>?raw</code> 之类的</li><li>vite: 将 nodejs 应用打包最终运行的 js，可以选择性的捆绑依赖</li></ul><p><img src="/resources/007ec032ff1d4d6e9b2ed2fe5a231dc7.svg" alt="开发流程.drawio.svg"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>vitest 和 vite-node 都是现成的，可以开箱即用，所以下面重点关注 vite 构建相关的事情。</p><p>首先安装依赖</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pnpm i -D vite vite-node vitest<br></code></pre></td></tr></tbody></table></figure><h3 id="vitest"><a href="#vitest" class="headerlink" title="vitest"></a>vitest</h3><p>创建一个单元测试文件，例如 <code>src/__tests__/index.test.ts</code></p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> { it } <span class="hljs-keyword">from</span> <span class="hljs-string">'vitest'</span><br><br><span class="hljs-title function_">it</span>(<span class="hljs-string">'hello world'</span>, <span class="hljs-function">() =&gt;</span> {<br>  <span class="hljs-title function_">expect</span>(<span class="hljs-number">1</span> + <span class="hljs-number">1</span>).<span class="hljs-title function_">eq</span>(<span class="hljs-number">2</span>)<br>})<br></code></pre></td></tr></tbody></table></figure><p>使用下面的命令运行 vitest</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pnpm vitest src/__tests__/index.test.ts<br></code></pre></td></tr></tbody></table></figure><h3 id="vite-node"><a href="#vite-node" class="headerlink" title="vite-node"></a>vite-node</h3><p>可以这样说，你可以使用它替代 node 命令运行任何文件，它只是比 node 命令更加强大，包括</p><ul><li>支持 ts/tsx/esm</li><li>在 esm 中有 cjs 的 polyfill，<code>__dirname</code> 什么的可以直接使用</li><li>支持监视模式运行</li><li>支持 vite 本身的特性，例如 <code>?raw</code></li><li>支持使用 vite 插件</li></ul><p>例如创建一个 <code>src/main.ts</code> 文件</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> { readFile } <span class="hljs-keyword">from</span> <span class="hljs-string">'fs/promises'</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">await</span> <span class="hljs-title function_">readFile</span>(__filename, <span class="hljs-string">'utf-8'</span>))<br></code></pre></td></tr></tbody></table></figure><p>然后使用 vite-node 运行</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pnpm vite-node src/main.ts<br></code></pre></td></tr></tbody></table></figure><h3 id="vite"><a href="#vite" class="headerlink" title="vite"></a>vite</h3><p>vite 想要构建 nodejs 应用，确实需要修改一些配置和插件，主要解决几个问题</p><ol><li>为 esm 代码实现 cjs polyfill，包括 <code>__dirname/__filename/require/self</code></li><li>正确捆绑 devDependencies 的依赖项，但排除 node/dependencies 的依赖</li><li>提供一个开箱即用的默认配置</li></ol><p>然后我们分别解决这几个问题</p><h4 id="构建时针对-cjs-特性做-polyfill"><a href="#构建时针对-cjs-特性做-polyfill" class="headerlink" title="构建时针对 cjs 特性做 polyfill"></a>构建时针对 cjs 特性做 polyfill</h4><p>安装 magic-string，用于修改代码保持 sourcemap</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pnpm i -D magic-string<br></code></pre></td></tr></tbody></table></figure><p>然后再 renderChunk hook 中添加 polyfill 代码</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> <span class="hljs-title class_">MagicString</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'magic-string'</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">shims</span>(<span class="hljs-params"></span>): <span class="hljs-title class_">Plugin</span> {<br>  <span class="hljs-keyword">return</span> {<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">'node-shims'</span>,<br>    <span class="hljs-title function_">renderChunk</span>(<span class="hljs-params">code, chunk</span>) {<br>      <span class="hljs-keyword">if</span> (!chunk.<span class="hljs-property">fileName</span>.<span class="hljs-title function_">endsWith</span>(<span class="hljs-string">'.js'</span>)) {<br>        <span class="hljs-keyword">return</span><br>      }<br>      <span class="hljs-comment">// console.log('transform', chunk.fileName)</span><br>      <span class="hljs-keyword">const</span> s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MagicString</span>(code)<br>      s.<span class="hljs-title function_">prepend</span>(<span class="hljs-string">`</span><br><span class="hljs-string">import __path from 'path'</span><br><span class="hljs-string">import { fileURLToPath as __fileURLToPath } from 'url'</span><br><span class="hljs-string">import { createRequire as __createRequire } from 'module'</span><br><span class="hljs-string"></span><br><span class="hljs-string">const __getFilename = () =&gt; __fileURLToPath(import.meta.url)</span><br><span class="hljs-string">const __getDirname = () =&gt; __path.dirname(__getFilename())</span><br><span class="hljs-string">const __dirname = __getDirname()</span><br><span class="hljs-string">const __filename = __getFilename()</span><br><span class="hljs-string">const self = globalThis</span><br><span class="hljs-string">const require = __createRequire(import.meta.url)</span><br><span class="hljs-string">`</span>)<br>      <span class="hljs-keyword">return</span> {<br>        <span class="hljs-attr">code</span>: s.<span class="hljs-title function_">toString</span>(),<br>        <span class="hljs-attr">map</span>: s.<span class="hljs-title function_">generateMap</span>(),<br>      }<br>    },<br>    <span class="hljs-attr">apply</span>: <span class="hljs-string">'build'</span>,<br>  }<br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="正确捆绑依赖项"><a href="#正确捆绑依赖项" class="headerlink" title="正确捆绑依赖项"></a>正确捆绑依赖项</h4><p>这里为了简化使用现有的 rollup-plugin-node-externals 插件，它可以排除 node 的依赖，也会自动根据 package.json 中的 dependencies 和 devDependencies 进行排除，但需要针对 vite 做一些小的兼容性修改。</p><p>安装依赖</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pnpm i -D rollup-plugin-node-externals<br></code></pre></td></tr></tbody></table></figure><p>简单代理封装一下</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> { nodeExternals } <span class="hljs-keyword">from</span> <span class="hljs-string">'rollup-plugin-node-externals'</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">externals</span>(<span class="hljs-params"></span>): <span class="hljs-title class_">Plugin</span> {<br>  <span class="hljs-keyword">return</span> {<br>    ...<span class="hljs-title function_">nodeExternals</span>(),<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">'node-externals'</span>,<br>    <span class="hljs-attr">enforce</span>: <span class="hljs-string">'pre'</span>,<br>    <span class="hljs-attr">apply</span>: <span class="hljs-string">'build'</span>,<br>  }<br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="添加默认配置"><a href="#添加默认配置" class="headerlink" title="添加默认配置"></a>添加默认配置</h4><p>由于吾辈有很多项目，所以不希望每次都填写配置，而是通过约定 + 支持配置的方式来解决这个问题，所以简单实现一个 vite 插件。</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> path <span class="hljs-keyword">from</span> <span class="hljs-string">'path'</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">config</span>(<span class="hljs-params">options?: { entry?: <span class="hljs-built_in">string</span> }</span>): <span class="hljs-title class_">Plugin</span> {<br>  <span class="hljs-keyword">const</span> entry = options?.<span class="hljs-property">entry</span> ?? <span class="hljs-string">'src/main.ts'</span><br>  <span class="hljs-keyword">return</span> {<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">'node-config'</span>,<br>    <span class="hljs-title function_">config</span>(<span class="hljs-params"></span>) {<br>      <span class="hljs-keyword">return</span> {<br>        <span class="hljs-attr">build</span>: {<br>          <span class="hljs-attr">lib</span>: {<br>            entry,<br>            <span class="hljs-attr">formats</span>: [<span class="hljs-string">'es'</span>],<br>            <span class="hljs-attr">fileName</span>: path.<span class="hljs-title function_">basename</span>(entry, path.<span class="hljs-title function_">extname</span>(entry)),<br>          },<br>        },<br>      }<br>    },<br>    <span class="hljs-attr">apply</span>: <span class="hljs-string">'build'</span>,<br>  }<br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="合并插件"><a href="#合并插件" class="headerlink" title="合并插件"></a>合并插件</h4><p>最终，我们将这些插件合并到一起，就可以使用 vite 构建 nodejs 应用了。</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">node</span>(<span class="hljs-params"></span>): <span class="hljs-title class_">Plugin</span>[] {<br>  <span class="hljs-keyword">return</span> [<span class="hljs-title function_">shims</span>(), <span class="hljs-title function_">externals</span>(), <span class="hljs-title function_">config</span>()]<br>}<br></code></pre></td></tr></tbody></table></figure><p>然后在 vite.config.ts 中使用</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>({<br>  <span class="hljs-attr">plugins</span>: [<span class="hljs-title function_">node</span>()],<br>})<br></code></pre></td></tr></tbody></table></figure><p>现在，我们可以使用 vite 构建 nodejs 应用了</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pnpm vite build<br></code></pre></td></tr></tbody></table></figure><p>享受 vite 带来的一切吧！</p><blockquote><p>吾辈发布了一个 vite 插件 <a href="https://www.npmjs.com/package/@liuli-util/vite-plugin-node">@liuli-util/vite-plugin-node</a>，已经解决了上面的几个问题。</p></blockquote><h2 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h2><p>好吧，这里其实仍然存在一些问题，包括</p><ul><li>vite 没有官方支持构建 node 应用，项目的主要目标也不是它</li><li>vite-plugin-node 还有许多问题，例如没有自动 polyfill <code>__dirname</code> 之类的</li><li>vite 相比 esbuild 的性能仍然差了一个数量级</li></ul><p>没什么选择是尽善尽美的，但吾辈现在选择相信 vite。</p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><ul><li>zx 构建之后无法运行 – chalk 没有正确的配置 – 无法识别 <code>imports</code> 中的 <code>node</code> 字段 – 维护者不在乎，需要考虑更换为 ansi-colors，ref: <a href="https://github.com/chalk/chalk/issues/535">https://github.com/chalk/chalk/issues/535</a></li><li>koa-bodyparser 构建之后存在问题 – 没有正确支持 esm – 等待 <a href="https://github.com/koajs/bodyparser/pull/152">https://github.com/koajs/bodyparser/pull/152</a> 合并</li></ul><h2 id="未来的目标"><a href="#未来的目标" class="headerlink" title="未来的目标"></a>未来的目标</h2><ul><li><input checked="" disabled="" type="checkbox"> 多入口点支持</li></ul>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    <category term="前端" scheme="https://blog.rxliuli.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="工程化" scheme="https://blog.rxliuli.com/categories/%E5%89%8D%E7%AB%AF/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
    
    <category term="vite" scheme="https://blog.rxliuli.com/tags/vite/"/>
    
    <category term="工程化" scheme="https://blog.rxliuli.com/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>手机升级与刷机</title>
    <link href="https://blog.rxliuli.com/p/32e9550dd977485c9701f935b17f771c/"/>
    <id>https://blog.rxliuli.com/p/32e9550dd977485c9701f935b17f771c/</id>
    <published>2023-05-21T15:54:24.555Z</published>
    <updated>2023-05-21T16:34:54.628Z</updated>
    
    <content type="html"><![CDATA[<p>周六时突发奇想将 Oneplus 8T 的系统升级到了最新的 Oxygen 13，结果等来的是完全换皮的国内的 ColorOS 系统，廉价的五颜六色的图标，还有各种无法关闭的微妙广告，让吾辈非常厌恶。</p><p><img src="/resources/42a5443d6ba0412ea5fb3749e20728ec.jpg" alt="Oxygen 13"></p><p>最终，吾辈决定刷机。但考虑到吾辈之前的小米就是被刷机变砖的，所以这次选择了付费远程支持。<br>在简单搜索了一些内容后，主要是在 <a href="https://www.getdroidtips.com/custom-rom-oneplus-8t/">这篇文章</a> 的推荐下，吾辈选择了 <a href="https://lineageos.org/">Lineage OS</a>，它是一个开源的 Android ROM，吾辈看了看官网感觉还不错。于是联系了网络上的付费刷机支持，在经历了一个小时的操作之后，吾辈的手机变成了 Lineage OS。</p><p>但在一些简单的使用之后，意外的发现没有包含 Google 服务，这对于吾辈而言完全不可接受。在尝试了手动安装 Google 服务失败后，不得已联系了付费刷机支持，在更好的描述吾辈的原始需求</p><ol><li>原生 Android 或者接近</li><li>包含 Google 服务</li></ol><p>他推荐了 Pixel Experience，它是一个基于 AOSP 的 ROM，似乎是为了尽可能模拟 Google Pixel 手机的操作系统，以便非 Pixel 手机的用户也能体验到 Pixel 的操作系统。这与吾辈的需求非常吻合，所以又经历了一次付费刷机，这次仅用了 15 分钟就搞定了。</p><p><img src="/resources/afe915a5bd1944d6b630c8b01b8aed92.jpg" alt="Pixel Experience"></p><p>吾辈不喜欢国产手机系统不完全出于对安全的偏见，也是因为效率的考虑，如果吾辈只需要熟悉一套 Android 原生系统就可以了，为什么还要去适应不同的系统呢？更别说还预装了许多愚蠢的应用（抖音）和广告（小米）。</p><p>没有计划的冲动行事往往没有太好的结果，对于这种简单的事情，还有可以挽回的余地，只是浪费了一个下午的时间。但吾辈为什么会忘记之前为什么讨厌系统和应用更新呢？也会只是另一种寻求变化的方式吧。</p>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    <category term="其他" scheme="https://blog.rxliuli.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    <category term="生活" scheme="https://blog.rxliuli.com/categories/%E5%85%B6%E4%BB%96/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="个人" scheme="https://blog.rxliuli.com/tags/%E4%B8%AA%E4%BA%BA/"/>
    
    <category term="生活" scheme="https://blog.rxliuli.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>周报 2023-05-21</title>
    <link href="https://blog.rxliuli.com/p/2f35a4e492a74b5aa327a3a6875b9df5/"/>
    <id>https://blog.rxliuli.com/p/2f35a4e492a74b5aa327a3a6875b9df5/</id>
    <published>2023-05-21T15:53:37.807Z</published>
    <updated>2023-05-21T17:35:50.629Z</updated>
    
    <content type="html"><![CDATA[<p>这两周写了一些简单的小工具，尝试了一些新的技术。</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AJFCJaX5kx0Zbw8lc_yLv7HzayA5RINQguIWgccyvwP_cmKmGVq6sNZs2B8DEIj78jKPMrpIOv8Ay6L8cg2cFwEClEQ1ExlRqpe_usLLBnI8HO8cb3QKkuHh8Caz6vP4YJCkh-zzr9QjsdMZL-DudcC8ZYPp=w1729-h1297-s-no" alt="cover"></p><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p><a href="https://github.com/rxliuli/batch-rename">Batch Rename</a>，吾辈之前一直想写但没写的一个小工具，能够使用 Manoco 编辑器的强大编辑功能来批量重命名文件，吾辈一般用于处理动画字幕文件。传统上的批量重命名工具通常提供两个框，以及多个额外的选项，例如是否匹配后缀名，使用正则，或者模糊匹配大小写等等。但吾辈会认为强大的编辑器功能才能最方便的，如果将文件名作为文本在编辑器上处理，这会更加高效和方便。这个灵感之前有 CLI 做过，VSCode 实现过，但吾辈没有找到独立的应用。即便是 Microsoft PowerToys 也走了传统的批量重命名路线，所以吾辈自己实现了它。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/PL3mft8DEHg" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe><p>TailwindCSS，一个吾辈之前一直很难理解和使用的框架。对于吾辈而言，之前一直难以理解的是它似乎只是简化的行内样式，感觉像是重新发明了 CSS。问题在于，既然吾辈已经学习了 CSS，为什么还要学习另一套和 CSS 差不多的自定义规则呢？在尝试了使用 ChatGPT 编写 TailwindCSS 的 class 之后，吾辈的看法改变了，因为它真的太方便了，以至于吾辈使用它完全重写了 batch-rename 的样式，删除了所有手动编写了 CSS，替换成了 ChatGPT 编写的 JSX + TailwindCSS 代码。</p><p><img src="/resources/37c4dd88248d4a8ea3890c1bccca3c4e.jpg" alt="使用 ChatGPT 生成 JSX + TailwindCSS"></p><p>甚至比吾辈之前使用另一个 UI 框架加手动修补得到的样式好得多，还非常容易地添加了暗色模式的支持。这是前后对比</p><p><img src="/resources/d963b951a211473dbec026fe1bc3b47b.jpg" alt="之前"><br><img src="/resources/d0fd0bfcdcad48ccb853882ff8434c07.jpg" alt="之后"></p><p>当然，也尝试重写了一些其他小工具，例如 <a href="https://github.com/rxliuli/tab-tailor">TabTailor</a>，一个将浏览器新标签页变成视频背景的插件。另外，由于 <a href="https://extensionworkshop.com/documentation/develop/manifest-v3-migration-guide/">Firefox 最近真正支持了 Manifest V3</a>，所以插件也发布了 Firefox 扩展商店，虽然 Firefox 特殊的 Extension ID 确实让吾辈困惑。<br>现在的 UI（根据系统主题自适应）</p><p><img src="/resources/119d60ca352b47098216b94746137f08.png" alt="1684687890156.png"></p><p>也是在这周，吾辈真正开始考虑是否要维护一些自己应用层的脚手架，目前维护着许多相同类型的项目，可能每个项目都有一些细微的差异，想统一这种差异。另外，react 本身的选择太多，想尝试将一些选择固定下来，减少选择的成本。</p><p>目前维护着的项目</p><table><thead><tr><th>项目类型</th><th>数量</th></tr></thead><tbody><tr><td>web</td><td>几十个</td></tr><tr><td>chrome plugin</td><td>5</td></tr><tr><td>vscode extension</td><td>4</td></tr><tr><td>electron</td><td>1</td></tr><tr><td>cli</td><td>10+</td></tr><tr><td>lib</td><td>几十个</td></tr><tr><td>nodejs</td><td>1</td></tr><tr><td>userjs</td><td>6</td></tr></tbody></table><p>长期而言，吾辈期望能够解决开发体验不一致的问题，即便它可能会花费很多时间。</p><h2 id="出游"><a href="#出游" class="headerlink" title="出游"></a>出游</h2><p>周五刚下过雨，所以周六没有出门，周日下午去了奥林森林公园，比想象中还要更大，走了 3 个小时还没有完整走完一圈。与依赖于山的森林公园相比，走的更加平缓舒适，还有许多人在公园里一家人出来野餐，感觉相当不错。旁边有一个奥林匹克塔，非常非常高，于是买票到了顶部，风景还算不错，可以俯瞰整个北京市的风景。<br>下面是拍的一些照片</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AJFCJaUjnZKn0odEcRsHniyocCsLfyAKcbqYRkpAUF6KizliTcxZZNu6CXqtKxWwrFV023_rw6FhNPV4SNeutfpWaMQu-ZQ2h1sumv9NaQJXJgPkEoHW2YDqKfFZHmEU1ccaRF_MNgiSHyuLUpYi5lAU9SkT=w931-h1241-s-no" alt="奥林匹克塔 外景"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AJFCJaVPU4ts-CuPnYw9De6rZ1_teqaUzY1RfBsrfI1FuLv8-iEjlusAgnDax7bD0Xu3IykoEg9Irv-mRQ3mN1LCbWHne4H4uQx1mfkTXKqVmUIFuYwp-tljWrsYzxdMRQm0cFtrqqsluMUg_pOmwGf10G4t=w1655-h1241-s-no" alt="儿童乐园，吾辈已经不是了"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AJFCJaWjGdsqA5T1IGfUyMv6XMQ_LzWFZygBvBxybPdEOQFTkkfNy4ruKyyQFA1pVjVULJq4V_v2x0idQfZ49rQkQXv4zLb-AacuuD6ae7TZJtpgqvM_hbGNNDkcb2FKhSlTmVlmsDoxMLEnuGbd3U-r_S5g=w1655-h1241-s-no" alt="天空与云，在仰山上的天境拍的"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AJFCJaWDG5pXYr6wf2rrmhBssC-c6qJLwdjpHiNAGcpxABRJDiKQvdH9VpQmlhwBzXUIXYghRii5ZnY7mQIjL2HRFCGICyIQ86Cb7Axf2vy6fA6Wquqb_Ojsz_h-vu7pWSHA5cTvyL57ScwaWGsdP_vdYe43=w931-h1241-s-no" alt="似乎是菊花，第一次见到真实的"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AJFCJaWZHCD0GXSuLvD6v8_qogVPxQEyeMliIOSJ5d19YaPNwjyGamtFUjkuAbnmweTwb7bA3MsZt6Bpj5IOXMJeGpnKzI3kxD2DZVeOV3N-Sn2wJy2l7644LJJzR8Fofp4IlWPM9Skq6by43hs_iH0kU8xk=w931-h1241-s-no" alt="多层水梯"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AJFCJaVuw8_v9yUcQQrx76LLwsGdSE3_YUt10wWMyeCSUGQamz02aRaCuQo2P9eZuRNgOGTv41slxBl93tEoETog-RHpQrxSlRAZyEJ0j944F6QmjGE-J6AeX_CBM9rRBNl5WxCQy6ZutKO0AS6yuoNr2rKu=w973-h1297-s-no" alt="上塔"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AJFCJaVmdazSmbk9rmjE3VIOQAJquSo-v_wrHUxv08Np8YcXdob0cgLEYIec8jwpNPmLYZLRsIkSy5pGKR7MIRbuHBllLvb6heZgLrbjV3Kh_vABucL3lq7CcfYfwaFusILTtckIPCmE93jNqZEDexUCesAd=w1655-h1241-s-no" alt="吾辈太喜欢这种和谐的景象了"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AJFCJaWRae66T98gl_if5-DT73jQbbvKYGemgJzEXDGlKCOHxDD04XAn5Qxrj9J3e16jZMP6fmbe6HJlrlmE7J_m1jqb2QaY0cmiWS2xyFAipg7Gf7XxWteNpY7sK9eY48Q48W4w5blUWaCPXR2XDyDf2sSq=w1729-h1297-s-no" alt="负一楼还有一些其他展览的东西"></p><p><a href="https://photos.app.goo.gl/arkhYX34JomnRbsu5">影集</a></p>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    <category term="个人" scheme="https://blog.rxliuli.com/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    <category term="周报" scheme="https://blog.rxliuli.com/categories/%E4%B8%AA%E4%BA%BA/%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="周报" scheme="https://blog.rxliuli.com/tags/%E5%91%A8%E6%8A%A5/"/>
    
    <category term="css" scheme="https://blog.rxliuli.com/tags/css/"/>
    
    <category term="开源" scheme="https://blog.rxliuli.com/tags/%E5%BC%80%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>周报 2023-05-08</title>
    <link href="https://blog.rxliuli.com/p/dd0e9cb99dbb4be1badccb58f3354294/"/>
    <id>https://blog.rxliuli.com/p/dd0e9cb99dbb4be1badccb58f3354294/</id>
    <published>2023-05-08T04:39:25.950Z</published>
    <updated>2023-05-21T17:05:49.560Z</updated>
    
    <content type="html"><![CDATA[<p>刚过完五一，连休了 9 天之后又开始上班了。上周回到了广州父母那边，不过非常不凑巧的是妈妈回老家处理一些事情，所以只有爸爸在那边。回去这几天基本上只有周六是一整天都在家里，其他时候都是出去见朋友和之前的同事。</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AJFCJaUAlNN9xNVyKIup4QEDq43lJM6_KPYLbyMUem3fTrDgCGZKos7LN8vwcjkHUkbBvu-gIefWZ3qiJZh0EaURIAxv441e2SCV-3fPt6hx2KFn3nbuzL4ZjAt9QfvuwbIP5mM5D3115-KP-dCMvBM4pBBx=w978-h1304-s-no" alt="cover"></p><table><thead><tr><th>时间</th><th>事情</th></tr></thead><tbody><tr><td>04-29 周六</td><td>飞回广州，结果飞机晚点 2 个钟，凌晨到家</td></tr><tr><td>04-30 周日</td><td>白天去朋友家里玩</td></tr><tr><td>05-01 周一</td><td>住了一晚，第二天下午回家</td></tr><tr><td>05-02 周二</td><td>见前同事</td></tr><tr><td>05-03 周三</td><td>逛萤火虫漫展，见前前同事</td></tr><tr><td>05-04 周四</td><td>见之前的推友</td></tr><tr><td>05-05 周五</td><td>去长隆水上乐园玩水</td></tr><tr><td>05-06 周六</td><td>在家里完整呆了一天</td></tr><tr><td>05-07 周日</td><td>飞回帝都，飞机晚点接近 3 个钟</td></tr></tbody></table><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><p>上周回广州之后学习的动力不大，直到去推友家联系不上等了一个钟，只能在多邻国刷题。<br>另外，今天连胜天数已到 99（<br><img src="/resources/04373a893aa8478abcae774766cac9ea.jpg" alt="多邻国"></p><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><p>由于 chat demo 已被滥用，以及 gpt4 api 已经申请下来，但费用过于昂贵，所以将所有用户全部禁用。并且数据库迁移至了免费的 supabase，虽然免费的 500M 空间已经用了 100+M 就是了。<br>另外，考虑开发 chat 的后台系统，以可视化的管理用户和 prompt，以及查看 API 的使用情况。</p><h2 id="出游"><a href="#出游" class="headerlink" title="出游"></a>出游</h2><p>上周主要是去了朋友家撸猫，时隔两年逛萤火虫漫展，以及去长隆水上乐园玩，都拍了一些照片。</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AJFCJaVE8Vnr-Nej-B3AQqsA7oRjdwBaBGx42ku2mIAZKlArDJJwivalDs4OVQNubE9xYnPgOGcvo3tgddE46LmeU6RWu8kgsuX2SjCo9zR5ODBW6wQMOJmAIsnO5gSjeLskldGp6g-Xr9ZKsW3uhNPI9ZQw=w978-h1304-s-no" alt="可爱的猫"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AJFCJaUFXaGCzV01tur2f4iVkVDdMzX1SAPbUF5etFY7FZIkgx7i6FUL2RThzBlT6bRhHNv9Vh7HVYY69l4TpfdguNB9yKYyt2lYua5IfU7w7DJJI4xdIQWwFCg9hErt12j1vjAYQAhYot80SwF_I0WEM0Zk=w1739-h1304-s-no" alt="郊区的夜晚"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AJFCJaUbqZWXpA08T0TKtGHJONAJXEkuJuDg9SiumEPeulCw_KyLtHpVKJgV7u-2JsM4y7rR0aLNVTAakkheSo7QKjFLg_yzf3SU_6XGUouaEk3tMc1UZaRQOR9CpjUpvKqvbWgKMgxaKmcJIwqUHLiOaD3q=w1739-h1304-s-no" alt="痛车"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AJFCJaVl1QjnW10vePwJVTgH7zgCcC8N5vpBGIOLa0jQu7pdPJVTUrFGgf7x2votqdy4WuL_kUiGwum9i524pNRkHccO1fEzoqXVaAHi9J93BkcsAJtJyNpBTpk1Qjz0-el2GFsONdvOtW7X6mDKDamhIQWR=w978-h1304-s-no" alt="东方 古明地恋"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AJFCJaWUZ5gh8BqGJA3tQNnfZWvvK4_d8YHKcNbSZ3WwL_s2Plo6Jm-GyCHBi1ifqkksj51I29zwXjpcTfli7Ob5CZYPISWKvAgs9B0AYGncD-malZm8Xjo2q_bc1pq3l7X9V9DYRCG6mjUAQFfGs40F5Xjw=w1739-h1304-s-no" alt="宅舞蹭我推子的热度太狠了"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AJFCJaWe_N1u6DreWfOBgoqUxMmjp63vfa4C1XKET1swu88xUz57IRm3zltDgU4Y7JRmoE63gaD3s_J3gik752arAUGD4R-21YxvbmWKJtxIXTrgagJOqwQ7bi7zOPyEZLP5nWYeY5VD2hN2gv5UouYGP0Tp=w978-h1304-s-no" alt="五一之后人很少"></p><ul><li><a href="https://photos.app.goo.gl/Usmrpx3ruQnnP4wA7">去朋友家撸猫</a></li><li><a href="https://photos.app.goo.gl/9CP4fctd6ioYFuG96">萤火虫漫展</a></li><li><a href="https://photos.app.goo.gl/dJ8Vm5rRmXJRwySj6">长隆水上乐园</a></li></ul>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    <category term="个人" scheme="https://blog.rxliuli.com/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    <category term="周报" scheme="https://blog.rxliuli.com/categories/%E4%B8%AA%E4%BA%BA/%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="周报" scheme="https://blog.rxliuli.com/tags/%E5%91%A8%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>周报 2023-04-23</title>
    <link href="https://blog.rxliuli.com/p/2b868e0020e640bb997c935ae8453bcd/"/>
    <id>https://blog.rxliuli.com/p/2b868e0020e640bb997c935ae8453bcd/</id>
    <published>2023-04-22T16:12:53.747Z</published>
    <updated>2023-05-08T04:39:28.544Z</updated>
    
    <content type="html"><![CDATA[<p>这周的周报晚了一天，因为这两天头疼和发炎，吾辈怀疑已经重阳了，但还没去测试，无论如何，公司内已经有两个了。</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AJFCJaUx85g26gx4pJb18GM17KO0kjS6_3e1plc77_952WfPIY0xZWHI1wg9L3kHL80GGLpYsgndVdPakOj1Zp8nwhDACdCvA1U3A1F4PwQr3RAbfVT1skl8akvTHp5EHGDTrewHbBjma5GaTtrhk0VAn8kK=w1783-h1337-s-no" alt="广播电视塔"></p><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><p>上周公司的事情很多，web chat 改造和 langchain 一直没有去看，这周还是想抽时间看看。下周五一就回广州了，或许可以和那边的朋友交流一些 gpt 应用的想法。</p><p>之前设计的强类型的数据查询 API 被组内吐槽太过复杂，想到了关于技术的使用门槛的事情，所以也想说一下。<br>在一个社区项目中，需要用到 pgsql 数据库，所以需要选择一个 nodejs orm。在选择之前，简单调查了一下找到了 3 个 orm，分别是</p><ul><li>sequelize</li><li>prisma</li><li>typeorm</li></ul><p>最终选择了 sequelize，为什么呢？</p><p>首先检查 <a href="https://npmtrends.com/prisma-vs-sequelize-vs-typeorm">npmtrends</a> 查看下载量，发现 sequelize 的下载量最多，但几乎不再增长。所以优先去看了增长最快的 prisma。</p><p>首先，prisma 的真正的强类型支持很好，但它使用了一种 DSL，引入了额外的复杂度。不像是传统的 npm 包，可以 pnpm install 之后就可以直接使用。而是还必须去熟悉它的 DSL，这让吾辈没有考虑继续使用它。typeorm 则是在看到装饰器的写法之后立刻被抛弃了，毕竟这个特性经过这么多年的 stage 仍然没有稳定，而且已经有几个不同的规范了，这很烦人。</p><p>所以目前可以选择的只有了 sequelize。</p><p>选择肢</p><ol><li>去 npmtrends 找到了 3 个 orm</li><li>去看了评价，喜欢强类型，选择 prisma</li><li>不喜欢 DSL，尝试 typeorm</li><li>不喜欢装饰器，选择 sequelize</li></ol><p>技术设计平衡真的很难把握，想要强类型的话使用起来就会变得复杂，但 anyscript 则是另一个极端。现成的例子太多了，比如</p><table><thead><tr><th>简单</th><th>复杂</th></tr></thead><tbody><tr><td>react-router</td><td>react-navigation</td></tr><tr><td>vite</td><td>webpack</td></tr><tr><td>golang</td><td>rust</td></tr></tbody></table><p>也许变得更好的方法是学习更多优秀的开源项目吧</p><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><p>多邻国差点掉级，80 多天以来第一次忘记玩，在周日刷了半个小时才勉强维持在钻石等级。<br><img src="/resources/4f99cbeb2f864083acbf840587e53970.jpg" alt="image.jpg"></p><h2 id="出游"><a href="#出游" class="headerlink" title="出游"></a>出游</h2><p>这周和同事一起去了玉渊潭，由于去的时间太早，甚至找不到任何卖热饮的商家，直到 9 点半，才找到一个商家买了热狗和奶茶暖了暖身体。由于樱花大多已经谢了，所以公园中的人不多，比之前去的北海公园少的太多太多。与之相比，另一位同事同一天去的景山公园人超多，因为正值牡丹花期。在和同事分开之后，吾辈也顺便去了旁边的中华世纪坛，里面有免费和付费的艺术展，外面的建筑非常适合拍照。</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AJFCJaU7C-WDFIM4TVZs7mKI1PnE-C7p0e5i4x6xo44Ecm89tdNbbGbrgPTLPwDzztG3TtF_Jh5n6ZSYKYr0sCOtY-bIZvqohgGzszCZkJ160tsuDuecKbJhRRjazX2JDNIipIZZsglo-i2jSoU8k3Crnpg-=w1783-h1337-s-no" alt="五孔桥"></p><p>下面都是花，各种各样的，吾辈似乎更加偏爱蓝色和紫色的花呢</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AJFCJaWuEYVcpc1aD14pKb1wZr92H_Tl1-TGA-_JK4fgy9Gl4IGgbSpWse2KC5_9AvUwhrj9LQqucfeQW-8q_EmLDED-eMey3RiBLtqdhOM7HpkuhHAOgEWTNSLT0-TiDIDd49-7i8H27PNV-yuNgcD0J0tA=w1003-h1337-s-no" alt="很漂亮的花，但不确定是什么，也许是樱花？"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AJFCJaV08Q0K8ycquOO34ZGSybfHlkbRs1ajXZr971AhzXdqT7rGJl0bD-Kl73rUEL3Mv4CMwsk-BoGjzk0eeMk-zbtsoWvs2CRhsOAGy4KGi59tJEcjT4DxLXybADF-vODMpJkIbti6UFgu0Wn5x_Y-7T0y=w1003-h1337-s-no" alt="紫藤"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AJFCJaXBucqwu7p9tpUEkTqbOWEegn_WOm7IPhGCjyW-gFDXouNdgc1_LLuto1MLPCP9t3ZmIN8UKu6bI3OI8jv4hXgHIX1aQ3uao7YN-MU6DT-5R0AjOez7rJ0j7Rw9NaLemDmnNoBIFQ3hKSwzKyJLu-PS=w1003-h1337-s-no" alt="三色堇"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AJFCJaU5NvrTCJ5c3_Yb0BnJXzMgqfBk1mFJjKfjMrnrpW-ud8lR-JfryyESm7jmsPbcRt8NTEwBSn0p2hhqhzRkM2zBbt2ELm4ufpVqPGKFBYjIsmst2hQ9yvhzMiMbDdEnPo58-T0MY_2Src7m3x7yEtHx=w1003-h1337-s-no" alt="快要凋零的樱花"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AJFCJaXd6GeNRdfUypxlcuPmbFzuzr2vn7L2-j9ccu-rvgLkn8yLfOU4G2UGdhRujMAkd8ZxmWCCLm-rGj4VpuqaW2kRNfi7ZihXaDih-bAYlasGuAlXyQk-sqUu77n33gMDntbz0AtLCbYccfpLwBsmpO42=w1003-h1337-s-no" alt="路边野花"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AJFCJaUyBP9v7V8TJiHFh62qds3jGcm6hwj4sh6sZNaDlncW-JBijCIijFfnVaahaXuN4v0MTliJkJqnDiulJfOlCHYIbTwKr1Frqx3gcZrpRbh7gAIawewK2j1lw9E8J0pwUkmIsLIMr0FlYleX1fwmY-9A=w1783-h1337-s-no" alt="3D 的画"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AJFCJaUhrzIWL37EY7HshDAJqESyG7BD37Xc3z4Wa_LbOhflWMx70H7U2gT_Jlq3NSRT--uBkk0Tkjpm8UWfcdfVop446GvdKlltNYRsGQbM9zUod1n75ynLqU2wZvMYkoNf3QLCCm4FowCuO4WiZAww4fnE=w1003-h1337-s-no" alt="中华世纪坛 远景"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AJFCJaX0KG91EAlyir3PER0lFL5GmWTXcdst9h60jrxythvpD-G1CDJWbBLIalZ4XlNmso4PJk49yBc3PMjT8Fs4lM7D6r1trbQs6nLvC0B3JUlseRn_eY3c5QP9D5c9WVpNLMcWw2HjBuqS1qBe7niC-uWO=w1003-h1337-s-no" alt="中华世纪坛 近景"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AJFCJaWf0gpZ50_LUzHsmM69FqlTH7b6ZccZtjR9Y-nGip9xLOUwsCYwVL-I5NuQnaDKyofCuIHsC580WLH-IG-iz6J9t6nm0MU1ds3z6Niaf6RaGMuglp3OUHeGGyipCH_E_ZLk8ZgL6GEPcIID2a1q9BnL=w1783-h1337-s-no" alt="旁边的广播电视台，终于拍到了顶部"></p><p>这周的影集有 3 个</p><ul><li><a href="https://photos.app.goo.gl/mpy1JoUS8c8R74Dx6">玉渊潭</a></li><li><a href="https://photos.app.goo.gl/mpy1JoUS8c8R74Dx6">中华世纪坛 - 艺术展</a></li><li><a href="https://photos.app.goo.gl/XX5gR2MDEKvq2h638">中华世纪坛</a></li></ul>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    <category term="个人" scheme="https://blog.rxliuli.com/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    <category term="周报" scheme="https://blog.rxliuli.com/categories/%E4%B8%AA%E4%BA%BA/%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="周报" scheme="https://blog.rxliuli.com/tags/%E5%91%A8%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>周报 2023-04-16</title>
    <link href="https://blog.rxliuli.com/p/8ecc929074874291b7b1e7090d63349c/"/>
    <id>https://blog.rxliuli.com/p/8ecc929074874291b7b1e7090d63349c/</id>
    <published>2023-04-16T12:10:49.380Z</published>
    <updated>2023-04-16T16:10:54.404Z</updated>
    
    <content type="html"><![CDATA[<p>这周决定五一回广州了，或许可以和朋友一起约饭，感觉有快两年不见了呢。看起来五一出行的人真的很多，高铁票真的很不好买，所以吾辈买了机票，虽然时间上也不是挺满意就是了。</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AJFCJaW81JQwAVkrzNwtJ7xahkldTecZKZ3p9XY8XerQ6keFNbDAgQGF8jyFDth84M56bcIBu9bPBR3zBtpb46kEHAxA8h550MBeQ5mA41CaVjSKpN5nqAwazYSVW983IaByMeBQ6D15qIAXawWfpuOy9xQc=w1783-h1337-s-no" alt="蟒山"></p><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><p>由于信用卡上周末被封禁，所以这周有点没有动力继续尝试 gpt 相关工具开发，而且看起来短期内都会处于莽荒时期，它的优先级将不会是最高的了。</p><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><p>好吧，这周没那么疯狂，因为实在太卷了，上周吾辈卷到了 6k+ 就已经感觉很多了，但这次的第一名是 13k+，或许他们真的不用上班？无论如何，还在钻石等级就是了。<br><img src="/resources/09f2422ee2b64fbcae962b36640f0359.jpg" alt="等级排行榜"></p><h2 id="出游"><a href="#出游" class="headerlink" title="出游"></a>出游</h2><p>在山顶拍的一段视频</p><iframe width="560" height="315" src="https://www.youtube.com/embed/N4rxXfLD_Bs" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe><p>其他的一些照片</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AJFCJaUNP5S69XX1Gi-1S4upIf6DDDc0CFpjDqfEfIvaJraNHlKAZzRx377RDxT8kBhlcGffm-Q55NKtyzbHf7b5dsHVkw6dRTi4p3a7G56kRBIsGM5wHLszQYVmVbtBFnwNoUkSrnIsDTke5fmq7Il4kbcr=w1783-h1337-s-no" alt="大佛"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AJFCJaUciLJYitM9F7TgLhkErrrucJ2lYejR5AFh57vLWBPrR_jlWz7TrezCzYyC9zjfHpWzXlc7uwp3KqfxfNzGDf7ljNysndBkN-KUhzv6UjQToYH2aQ831p1oWwvSBvcijuItNs3jqFyQjutDkmuhcdvh=w1783-h1337-s-no" alt="十三陵水库"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AJFCJaVhML76KTR7syn-xRBAsDcaadhkHpwGIYz5jCMtpf3ZfHIZ27ATRH94mBlm6DJ7E-wWBgjFffm3vVXqiGX0sam7ajYOgJLMG1P6UQ7BW_OiDpXlEaFGLZezk8ouJ6b8EFr4WqSyIp2N8UVp1xNqFyuG=w1783-h1337-s-no" alt="半山腰拍的另一张"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AJFCJaUCaOWMUQ3uGPjbmkcpNa-DWayjGFpviEfRt68E4Rm_QvbKFlq17G3vRXhaO_rUGn9XhKz6KxZTUJVq3JLwCpRQpycPYvOm3M1pY9daX9DR3tKVXVKixXm3YyyHPQokhAJkOIQGqECiy-ZOotgo3U7W=w1003-h1337-s-no" alt="山顶的塔，上面拍大佛背景中的那座"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AJFCJaXtOFfWLSP8wjJLv57G-lITDEqIkJIeU-vsoZ98rFfUhyuUjEUe9ASOnLb01X7YUYpGyEwbZI3D1Y9mhmg21qmVsfAofSneTeyigCo-irzvc2-OC6ToLZ4O6vNTRMoFp6dRWYSExU-SG1SJvAoiNwn4=w1783-h1337-s-no" alt="天池"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AJFCJaVmGbJzyUj5z0aNbNB9xRSzFBAbj3xxTKXJFez9U19-In9HsZ_-lqojYS-rhvgmiBwg3yB_tRg7cF5QKQzvxKf6nKOcsk-HjIWzqyQjac1wsLj_oyJLYnEM6dRyhj92a7yzYHnplHc45eGtlmfJaSXX=w1783-h1337-s-no" alt="湛蓝的天空，还有两个飞机飞过"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AJFCJaXHQTe2o0JPDksvgP8ZOG2oZ5zD_41eIOG0QKCGd4dP68OKCnbhaic3EbTQa8ZjsYss6JtlxfxCP-vEC0xggetkJQwK3Pw4kES8lT4Vdh-vVN9Z2xemwT2QHaqrLdXZ9sivoNfXDboMygd4uGgQu0eM=w1783-h1337-s-no" alt="下山走了一段野山路"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AJFCJaXYRg4BcSNcg1HiUuvQ7EtnqHaYUmpFzyIUc95wmxO6QD4vx-_Az7Pz5RcWHNPyED6CyddWCiy4mLoXvHxYRtgAcpDY0-a6Q9CPvoRkjAdKtkrSD0q8JGx2cok74kvJNv9XegQtuCAzywVku4sfYsLI=w1003-h1337-s-no" alt="不知名的花"></p><p><a href="https://photos.app.goo.gl/dQsCfXBE6cfqy9ox5">影集</a></p>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    <category term="个人" scheme="https://blog.rxliuli.com/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    <category term="周报" scheme="https://blog.rxliuli.com/categories/%E4%B8%AA%E4%BA%BA/%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="周报" scheme="https://blog.rxliuli.com/tags/%E5%91%A8%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>周报 2023-04-10</title>
    <link href="https://blog.rxliuli.com/p/d0d2e2c3e6364759aaddb419691f937e/"/>
    <id>https://blog.rxliuli.com/p/d0d2e2c3e6364759aaddb419691f937e/</id>
    <published>2023-04-09T16:12:53.875Z</published>
    <updated>2023-04-10T04:51:29.436Z</updated>
    
    <content type="html"><![CDATA[<p>周六早晨，吾辈收到了一封来自 openai 的邮件，说支付失败，如果在 04-22 号之前没有处理，账号将会被禁用。</p><p><img src="/resources/811761a01fba4f9bbbfd98c71b516ff7.jpg" alt="1681091760836.png"></p><p>吾辈之前曾使用虚拟信用卡的方式购买过 plus，也支付了两次，本以为付费用户的信用卡不会被禁用（否则怎么付费呢？），结果还是太天真了。再又尝试开了几张卡之后，也尝试了淘宝的高昂手续费，但仍然无法支付成功。颇有一种 openai 站着挣钱，吾辈跪着送钱的感觉，或许国内只是不配用 openai 吧。</p><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><p>上周继续开发 web chat 客户端，实用了数据库同步消息、会话和提示，原计划这周继续优化，不过由于周六 openai 的账单，吾辈想也许应该暂停它，而专注于另一件重要的事情上。<br>不过由于在此之间，又碰到了需要导入导出 web 站点数据的需求，于是开发了 chrome 插件 <a href="https://chrome.google.com/webstore/detail/ifeenaocehipahiagdlnkokbekehooge">WebDataMaster</a>，用于将站点的本地数据导出导入。</p><p><img src="/resources/3a7014e462634cbb84c81078e12b2c7b.jpg" alt="WebDataMaster"></p><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><p>快到最后一个等级，所有人都很卷，于是吾辈也只能更卷，目前已经到了钻石等级，这周再卷一次，就可以到顶了。（吾辈在说什么？学习？游戏？）<br><img src="/resources/4e97e44e91c7429d950ee82bebb82fad.jpg" alt="多邻国"></p><h2 id="出游"><a href="#出游" class="headerlink" title="出游"></a>出游</h2><p>同样的，由于周六的破事，完全没有心情出去。原定周六去的蟒山也没有去，只能是这周六再去了。</p>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    <category term="个人" scheme="https://blog.rxliuli.com/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    <category term="周报" scheme="https://blog.rxliuli.com/categories/%E4%B8%AA%E4%BA%BA/%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="周报" scheme="https://blog.rxliuli.com/tags/%E5%91%A8%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>周报 2023-04-02</title>
    <link href="https://blog.rxliuli.com/p/c46c93fd63774dc7952eb72a52b83650/"/>
    <id>https://blog.rxliuli.com/p/c46c93fd63774dc7952eb72a52b83650/</id>
    <published>2023-04-02T15:27:10.618Z</published>
    <updated>2023-04-16T16:10:33.476Z</updated>
    
    <content type="html"><![CDATA[<p>想做的事情很多，但时间总是太少。吾辈这周的主要精力仍然没有放在日语上面，更多的还是处理工作上的事情，web chat 的开发进展有点慢，下周调整状态做的更好。<br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8DQNSVy0jfF0kv60Hsud1D8sm2pP7U09gseLrAQOgliVZO555gyYTa3gj05QkjZHA3T__WS0TUhyRJ2C6MCObOnZmqn8LKB6Ix3VEeBCSKB89WRFZIzrn1ceFYRnAQPpgN9tXppt5VAckKchSOBQ70P=w1452-h1936-s-no" alt="复杂的机械时钟"></p><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><p>这周公司终于开始认真打算尝试 chatgpt 如何集成到项目中了，虽然相对于社区的各路神仙而言这已经是起步太慢了，但似乎相比于更多不愿醒来的人而言已经算是一个进步了？<br>吾辈这周日也终于将用户系统简单实现了，虽然还未想要的集成会话和消息同步功能，下周应该能加上。这也导致部署必须使用 postgresql 数据库，晚点看下如何使用 docker-compose 之类的工具仍然支持简单的部署。多模态是另一个心心念念的想要尝试的方向，可能实现完消息同步之后就开始尝试 langchain。<br><img src="/resources/d7868662da4644769db247da4c3bf62b.png" alt="1680451663660.png"></p><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><p>继续多邻国刷题，好吧，吾辈可能有点卷，预计下周登顶。<br><img src="/resources/fbb2cfa11d9049089c34b3acd60c3fe3.jpg" alt="image.jpg"></p><h2 id="出游"><a href="#出游" class="headerlink" title="出游"></a>出游</h2><p>这周去的科技技术馆总体上体验不好，小孩子<strong>太多</strong>了，甚至有学校的少先队员之类的组团去，真的到处都是人。吾辈原本想去看看有什么好玩的科技展示，但熙攘的人群让兴致大减，只花了两个钟逛了一圈也就回去了。<br>感觉比较惊艳的还是下面这个水滴向上飘的装置，最早是在惊天魔盗团 2 的电影中看到的，没想到这次意外见到实际的了。<br><a href="https://photos.app.goo.gl/1HjTXZNsaitQ2J2CA">https://photos.app.goo.gl/1HjTXZNsaitQ2J2CA</a></p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8D9B571ZVk61DQon2gHfJ_OG1-Sp8Fz_njCOxa_AMZdNAYQxVzaWmJrbcHcckcCMe9r6Fbmm06la9No7x6oVX_ylYvhcNStv-U69fkBkzVttMGqBqqd4UoaqwTYlAWTctXr8gmYZot9_eyANkaW2YwO=w2582-h1936-s-no" alt="门口奇怪的字"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8Dc-zW1rz8PGOX5Lb_Soh38865VYURq41Q419API18KhUHTe9UJNCJAqijUGbxrpiDCAmzOqV0ATx7WLQAFOwo5jZ4FTN2mAV1kly93Hrp0MLWd8qcRSN0KjQY3DxkKd5KrGUQR7VbO_BsGIF2h4M6v=w2582-h1936-s-no" alt="管道机器人"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8AsGTyTdI_Y1Ge-kFSxgocHK1XAEb4C7MsiBs5pNoQHRC8aSFePYPfrsQHs-NZsBUF2691yxTMHh_gsyxMd_sYOkSJJxuZub8-vlgqM_0YyivxUiH2UnUw1hwfbkZmxXmXYUAgePx8ofxCDrGqj2tnF=w1452-h1936-s-no" alt="第一眼看到想到了上学那会 windows 上的三维弹球游戏"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8CHXm7nMzdE2i-7stvsm_A_BKLMCU77m7w-RIwMLik9MMIOzdwpNkQ4lOG_ViEKARcr-BQ6KFh7BYRfw3FVupc62g4_DCiA-bd6mO0kfNpAiESON3N3c-Itbzna-Q5eB53Imd1Ww2nbjpm2_GfL7rro=w1452-h1936-s-no" alt="弹琴的机器人，很符合刻板印象"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8Cpl34HaMXehCUaQ6cXnZ8VsAtWlxl7KzZojpzS1V9eSA5xOMGFDwLYHBxUY8aAfC7Be17yBDwhnu_0_a_lOyuEsmaTPvMCjBPNzyHQMgJY2TDselFHQwr7vJSqhGMtuPFuHQwlQe0MOEm-zIa_3k4h=w1452-h1936-s-no" alt="很漂亮"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8AFwmjBKkpbfiwrja6jiaQb9s5POCLv8FvgxbS3XYqk5nE6DA4OQBZhfETrnm1_lMFrZ5359KQL5_qdr5eHgFhB7-86LztxxMwd39nfvCuiepsD9nFneQyzAqlJ3fP_5trLGoF5D5tm1Vrp0z2IQXUL=w2582-h1936-s-no" alt="上个时代的东西，但政府之类的部分还在用"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8BWWQ8C14iux886HMAzUgql2k4GpMdDAl00XqcKOXScehT2y-xVj3-P52jBVrbYO7Al4ILnMDkiWTELSs9aqZ4ljWCWRGQaO_hcKZsCbIwVCx80cZNgxhuloKKo5a_A7Z1hPC9LQYL_OYn4NPGcG2xD=w2582-h1936-s-no" alt="吾辈未曾经历的时代"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8BL8qHDBLE2Hfg9z0v4jzxhuRC8JbK4sSa1vYBTyZ8Zuo6qw06O3SL3CLlALyTMxFv4wEipYt6JNcjzdjWUbYH0w1b17oMleX_imj_qr_utF5VMnGCkyjvSBtTtqvAeZ3lfXFymtvVc7MqX_oGM9yQN=w2582-h1936-s-no" alt="大屏，之前公司也做过类似的"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8ALBjQjYH_SVtBLF5z5tNJGWWBalAEIeLGz4DA7DJSD8lL6xSKefRmyh-T8Cx1Ijasyi3O-b60-fn6m65ad9LPyH-_x5hIAJl062GqsRZl6vU3TY9ztUi8CkzD56I4Kz0v2IAUoaVsslNeZZ3KnsRYr=w1452-h1936-s-no" alt="漂亮的花"></p><p><a href="https://photos.app.goo.gl/b8LcLTKiWtHiRbXh7">影集</a></p><p>下周预定去蟒山森林公园，回归户外出游，之前想去但一直未开放，这周刚知道它已经在 3 月初就开放了。</p>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    <category term="个人" scheme="https://blog.rxliuli.com/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    <category term="周报" scheme="https://blog.rxliuli.com/categories/%E4%B8%AA%E4%BA%BA/%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="个人" scheme="https://blog.rxliuli.com/tags/%E4%B8%AA%E4%BA%BA/"/>
    
    <category term="周报" scheme="https://blog.rxliuli.com/tags/%E5%91%A8%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>周报 2023-03-26</title>
    <link href="https://blog.rxliuli.com/p/0da316d76f6c4fcbb72a3197047e1b16/"/>
    <id>https://blog.rxliuli.com/p/0da316d76f6c4fcbb72a3197047e1b16/</id>
    <published>2023-03-26T15:51:20.715Z</published>
    <updated>2023-03-26T17:06:28.482Z</updated>
    
    <content type="html"><![CDATA[<p>春暖花开，出去走走，看看花开的样子，就像找回了小时候出去郊游的感觉（实际上，这也只发生过一次）。</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8DRHuwMPJLi8lf8CMqNAgTliN9Xe27rTACy0PvImeTvp4Dy-GCgJdL5EHvsUbBBC6DAQdQtKD8C9dUNzr1iwUdPf5PujECwXtAHhX3Hia8rGoodHDQEMDSED7t-aEEy_p-1itEKr5bA5e_aA2nNLEMQ=w1003-h1337-no" alt="cover"></p><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><p>原定这周末开发用户系统，但实际上却还是耽搁了，奇怪的，生活又开始不再规律了。只是做了一些细节的改进，主要是支持了停止和重新生成消息，实现用户系统以支持消息同步的功能还没有完成，虽然使用 gpt 更容易熟悉和上手 postgresql 数据库就是了。<br>作为 gpt3.5 之后真正开始强使用的人而言，gpt4 的改进是显著的，但它的 api 并不开放，即使对于 plus 用户也是有限制的，3 小时内最多 25 条。吾辈也只能不断加入一个又一个 waitlist 中，和曾经排队去买东西的爷爷奶奶似乎也没什么区别。而这周刚出的 plugin api，揭示了它不想作为基础设施（电信运营商），而是期望同时控制入口（google），一般的生产者再次被挤到了中间。</p><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><p>这周也完成了预期中的学习任务，目前已经到倒数第三个等级，预计这周还能再升一级吧</p><p><img src="/resources/4c03ed6bb5c245909428f164ffd45f3f.png" alt="1679848531362.png"></p><h2 id="出游"><a href="#出游" class="headerlink" title="出游"></a>出游</h2><p>这周去了附近的北海公园，和城内的其他景点一样，人特别特别多，在里面任何地方几乎都能看到人。不像更远的北宫或西山森林公园，可能有些路程走很久也碰不到几个人。<br>不过整体上体验还算不错，总算不再是一直在爬山了，可能是由于春天真的来了的缘故，花开的也很多。</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8CbPtPpGIyLN6IGOUNHE9qPejhAWlUMTiLWYJ8I167NdPAQ4Oc656WFwxIGKrfKx-qsFHX9Rp6qK7gchnneoC1eFJQOD9DSX9Ht7k5VvVP9TT6m0cza4QriA3GzDz3iOAiVT2Vk_3t6MlMzdJwoN-Fs=w1783-h1337-no" alt="整体风景"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8CvyJRyquaY4vxZR9xwACV4RiJ3vjD2ZHvglYCDO-Jpyo98WmNYSvSRVj2uZqHqpXkY4ncQ3qJQcBQNBclmg7QEZdFq48u7h-UwQWwdouM7gVDeiq6Je3bLPST9IThuGW-1yV9GO3nstYLI7aC7MB3e=w1783-h1337-no" alt="另一个角度"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8DJqXvH_sFXRNGGNLXPCVkdrIGXAhGZRWc7z8qbuqAOizUjPZ-dgeAEnxzNs992UEzN8aQYZj87ey2TqldM12IX2hc01b6xUidn1tmsyNTZQgsM4Hb3mIt6B8McJGQt1uV8Ery42qc7NOj4mOAXQits=w1783-h1337-no" alt="桃花"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8DxjQuQTblvgzUaM-kqohzFnSiwfp3jzwa8AAS_VAgr4_mPvAXEtnM3lmPi0UNv2qneDvTnQ4Yr6XumjSHbB31J0PsOLfVx7OwuKyHQECCW7cL0qJhyABHc0fsDnn2pEuVbsIxX2qpvujSPxTA9bTjY=w1783-h1337-no" alt="白玉兰树"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8CNYjNb-TMQJFGXggLAkjlfxQCaHyRpZp1qpX1seBC4I5SdZyo5yTRYUwrEVB1brrkxgqzjO4Ou_I_hJuYMcLt29UxN0sewrkWP9Xc_mDoOeEUGeEhNkIve7hMIVFl5ieXh1sADRC9DiyeuFaNB2Qq-=w1003-h1337-no" alt="山茱萸"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8DaLBCQEHVCplDf_LswBbWZV4cBfWt82WAwzt1kdxjft4edOL4FqbqAGfOTzTAiui2uEMb7pa5WhJmw1P_gHTfUqycovB68MduawdvQYBgqeDDA072dtuGcYhonXUWlU_WCTZLX4-qQUy91BmnmfPdX=w1783-h1337-no" alt="连翘"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8BAEcnduoinPpI6KSyhiwUdUlC6y-xQS0LDMIt2EgXO60K7aqL9i_YQec-cWnyj7IHdoe-8cY1bbAc9UkW1h1T8sHLX-Z-AGz8QiYz8AdKn6M9wGtYSzPFLlAX8jQlXv_w-zN1rzJg8VIBrVb68nYs4=w1003-h1337-no" alt="白塔"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8Bg2TxxBOJ2bbd9bt3HCKoQBnzSAc-30ZRZtMSr2-IPr_Iph0pafS-FTVTG9S-DRp26WNZIn5_oX1yxGPUeXEGBih4wHLMIrO5Xq8CHkloSWQxt5SleaUFhxwYkPlU5MjF15vLAydrGdEUzq5BjDktR=w1783-h1337-no" alt="从白塔往下看"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8Dby5Rk4-gPD6mDRAA0J7a70w6VaUdhBSD2QkedBoS9QOjQeCgzR66j2TqibzUMzh61A-91WUqynCt6A2MMPYG37SXCwFZBn-U3YYNcoLv1DFjLByIu_vYOymWOND2dYx2reQznhKgaCU53vK0gOGE6=w1003-h1337-no" alt="下去就是永安寺"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8BzoWMmzSQ4kwT8_k33RkKwmsbMKY0HVeFumWKHxACvnGrW3Sx6gy8o5Mh6vWl-EQW3bRvYKylQcHOMUy6-czaqpeirIgUtVXgHrh9ecD_PalO_Lev6sub0ldze5jpKHHqJ03eYXntTK6areaS21I2u=w1003-h1337-no" alt="清代建筑"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8B9SWwzK6XOLzD2xlOcQ0Ye4Nbt30ds2pwGtujvCndnEEraZYpR71z15BSV3ycCHfC3jnPeCpwKL2pOEhAKZvvrY9sCNjA9yHmoy-ixrkaccSgJREGQpKNkYsKWzpdsdP6Uq3rmDyrMCCjqyOPsLQgg=w1003-h1337-no" alt="老时钟"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8CFk0hWbIGa1XHHhjY6AQ2JRNmjbffA_TpaYkcl5pG8HRDc0CBBmxUtXNIdiH2O9RMbVT58nUVmNIeu2ShlutLJisIma9V1jxVeDoaZBdUsOjtjEclg16WmU95px6YE_Cg6-feuCGb5Zj2Jw9BtmOMN=w1783-h1337-no" alt="另一个清代建筑"></p><p><a href="https://photos.app.goo.gl/qZMMga71PGzykz2r9">影集</a></p><p>预定下周去同事这周去的科学技术馆，看起来里面有一些吾辈感兴趣的东西，虽然据说小孩子特别多就是了。</p>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    <category term="个人" scheme="https://blog.rxliuli.com/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    <category term="周报" scheme="https://blog.rxliuli.com/categories/%E4%B8%AA%E4%BA%BA/%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="个人" scheme="https://blog.rxliuli.com/tags/%E4%B8%AA%E4%BA%BA/"/>
    
    <category term="周报" scheme="https://blog.rxliuli.com/tags/%E5%91%A8%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>在 react 中使用 mobx 接管所有状态</title>
    <link href="https://blog.rxliuli.com/p/1fcd1517c14c4e68b764d7e6df071805/"/>
    <id>https://blog.rxliuli.com/p/1fcd1517c14c4e68b764d7e6df071805/</id>
    <published>2023-03-14T09:08:43.367Z</published>
    <updated>2023-09-02T17:27:51.979Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 react hooks 中，useEffect 是最常用的 hooks 函数，但其手动管理依赖状态的 api 体验被人诟病已久，社区出现了无数关于如何正确使用 useEffect 的文章，但仍然拦不住更多新人很难正确使用这个 api 的事实，也被戏称为 react 新人墙。而且，在流行 web 框架有且仅有 react 是需要手动管理 hooks 依赖的。其他框架，例如 vue、svelte 与 solidjs 都不需要手动管理依赖。最近 react 社区关于 signals 的突然火热讨论也正反应了更多人认识到了这种 dx 的糟糕之处，preact 甚至 <a href="https://preactjs.com/guide/v10/signals/">官方支持了 signals</a>。</p><h2 id="signal-是什么"><a href="#signal-是什么" class="headerlink" title="signal 是什么"></a>signal 是什么</h2><p>这个概念的流行源于 solidjs，它有一个 createSignal 的函数用于创建响应式的状态，并且也有两个相关的 memo 和 effect 概念，和 react hooks 很相似。但它解决了两个关键的 dx 问题</p><ol><li>react 需要手动管理依赖</li><li>react 的状态修改完之后不能立刻读取到新值</li><li>可以在框架之外使用 – 不是关键问题</li></ol><p>例如</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> [first, setFirst] = <span class="hljs-title function_">createSignal</span>(<span class="hljs-string">'JSON'</span>)<br><span class="hljs-keyword">const</span> [last, setLast] = <span class="hljs-title function_">createSignal</span>(<span class="hljs-string">'Bourne'</span>)<br><br><span class="hljs-title function_">createEffect</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">${first()}</span> <span class="hljs-subst">${last()}</span>`</span>))<br></code></pre></td></tr></tbody></table></figure><p>这段代码会在控制台输出 <code>JSON Bourne</code>，并且当 first 或 last 发生变化时，会再次输出新的值，值得注意的是 createEffect 没有第二个依赖数组的参数。</p><p>但 solidjs 仍然分离了 get 与 set 接口，这导致了 get 必须是一个函数，才能在使用状态时创建订阅，这有点奇怪，所以 solidjs 社区也有人使用 get/set 函数封装了一层，例如</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">function</span> ref&lt;T&gt;(<span class="hljs-attr">value</span>: T): {<br>  <span class="hljs-attr">value</span>: T<br>} {<br>  <span class="hljs-keyword">const</span> [state, setState] = <span class="hljs-title function_">createSignal</span>(value)<br>  <span class="hljs-keyword">return</span> {<br>    <span class="hljs-keyword">get</span> <span class="hljs-title function_">value</span>() {<br>      <span class="hljs-keyword">return</span> <span class="hljs-title function_">state</span>()<br>    },<br>    <span class="hljs-keyword">set</span> <span class="hljs-title function_">value</span>(<span class="hljs-params">v: T</span>) {<br>      <span class="hljs-title function_">setState</span>(<span class="hljs-function">() =&gt;</span> v)<br>    },<br>  }<br>}<br><br><span class="hljs-keyword">const</span> count = <span class="hljs-title function_">ref</span>(<span class="hljs-number">1</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(count.<span class="hljs-property">value</span>) <span class="hljs-comment">// 1</span><br>count.<span class="hljs-property">value</span> += <span class="hljs-number">1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(count.<span class="hljs-property">value</span>) <span class="hljs-comment">// 2</span><br></code></pre></td></tr></tbody></table></figure><p>不过 solidjs 仍然不支持任意写，例如下面这段代码仍然不会触发渲染。</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">ref</span>({ <span class="hljs-attr">count</span>: <span class="hljs-number">1</span> })<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">increment</span> = (<span class="hljs-params"></span>) =&gt; {<br>  store.<span class="hljs-property">value</span>.<span class="hljs-property">count</span> += <span class="hljs-number">1</span><br>}<br></code></pre></td></tr></tbody></table></figure><p>而且在组件中的代码只会运行一次，而在函数结尾返回的 jsx 则会多次渲染，这会导致一些有趣的行为。</p><p>例如下面两个组件在 solidjs 中不一样</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">One</span>(<span class="hljs-params">props</span>) {<br>  <span class="hljs-keyword">const</span> doubleCount = props.<span class="hljs-property">count</span> * <span class="hljs-number">2</span><br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>{doubleCount}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>}<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Two</span>(<span class="hljs-params">props</span>) {<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>{props.count * 2}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="为什么-signals-突然火了"><a href="#为什么-signals-突然火了" class="headerlink" title="为什么 signals 突然火了"></a>为什么 signals 突然火了</h2><p>吾辈猜测是 solidjs 的采用导致的。vue、svelte 虽然也不需要手动管理依赖，但它们与 react 的编写方式差异很大，它们都有自己的模版语法，vue 甚至需要额外的插件才能使用 jsx，而且体验也不算太好，所以更多人将它们视为不同框架的差异 – 而不是哪个 hooks api 更好。而 solidjs 完全采用了 jsx 的语法与社区相关的工具链，但状态管理则对开发者更友好，使用 useEffect/useMemo/useCallabck 不再需要手动管理依赖项，而是以高效的方式自动处理。<br>下面这段视频最能表达吾辈的看法</p><!-- markdownlint-disable MD033 --><iframe width="560" height="315" src="https://www.youtube.com/embed/hRCN_FJWutQ" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe><blockquote><p>link: <a href="https://www.youtube.com/embed/hRCN_FJWutQ">https://www.youtube.com/embed/hRCN_FJWutQ</a></p></blockquote><p>react 的一通操作猛如虎，结果一个 signals 将所有问题更优雅的解决了。<br>其中展示的操作有</p><ul><li>虚拟 dom</li><li>不可变数据</li><li>hooks</li><li>依赖数组</li><li>编译器优化和自动缓存</li></ul><h2 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h2><p>依赖传递有依赖性，<code>useEffect/useMemo/useCallback</code> 这些函数都依赖有 deps array 参数。而且它们之间还可以互相依赖，例如 useMemo 的值可以被 useCallback 作为依赖，简而言之，如果你使用了这些常见的 react hooks，就必须手动管理它们之间的依赖图。如果没有正确管理，就可能会产生非常微妙的错误。react 提供了 eslint 规则来检查，但一方面并不是所有项目都使用 eslint，另一方面，这个 eslint 规则通常显得过于严格，在一些情况下必须手动关闭，例如使用 useEffect 时希望根据 a 值的变化触发副作用，但同时需要读取最新的 b 值，而在这方面 eslint 规则就会爆炸。另一方面，react 的状态在修改后立刻读取并不能读取到最新的，这不是 react hooks 带来的，而是 react 中一直存在的一个问题。</p><h2 id="状态的更新与读取"><a href="#状态的更新与读取" class="headerlink" title="状态的更新与读取"></a>状态的更新与读取</h2><p>传统的心智模型，你修改完变量就立刻读取到最新的值。</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i) <span class="hljs-comment">// 0</span><br>i += <span class="hljs-number">1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i) <span class="hljs-comment">// 1</span><br></code></pre></td></tr></tbody></table></figure><hr><p>react 的心智模型，使用 <code>await new Promise(resolve =&gt; setTimeout(0, resolve))</code> 等待下一次的循环才能读取到最新的值。</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> [i, setI] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i) <span class="hljs-comment">// 0</span><br><span class="hljs-title function_">setI</span>(i + <span class="hljs-number">1</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i) <span class="hljs-comment">// 0</span><br><span class="hljs-keyword">await</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> <span class="hljs-built_in">setTimeout</span>(<span class="hljs-number">0</span>, resolve))<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i) <span class="hljs-comment">// 1</span><br></code></pre></td></tr></tbody></table></figure><p>这种方法主要问题是冗长不够直观而且不是特别可靠。</p><hr><p>或者使用临时变量保存新值，并在后续使用新值。</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> [i, setI] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i) <span class="hljs-comment">// 0</span><br><span class="hljs-keyword">const</span> newI = i + <span class="hljs-number">1</span><br><span class="hljs-title function_">setI</span>(newI)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newI) <span class="hljs-comment">// 1</span><br></code></pre></td></tr></tbody></table></figure><p>这种方法在实践中可能是使用比较多的，主要就是需要创建额外的变量</p><hr><p>或者使用 immer，你可以使用 produce 包一层，以在 callback 中修改后可以读取到最新的值。</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> produce <span class="hljs-keyword">from</span> <span class="hljs-string">'immer'</span><br><br><span class="hljs-keyword">const</span> [i, setI] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i) <span class="hljs-comment">// 0</span><br><span class="hljs-title function_">setI</span>(<br>  <span class="hljs-title function_">produce</span>(i, <span class="hljs-function">(<span class="hljs-params">draft</span>) =&gt;</span> {<br>    draft += <span class="hljs-number">1</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(draft) <span class="hljs-comment">// 1</span><br>    <span class="hljs-keyword">return</span> draft<br>  }),<br>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i) <span class="hljs-comment">// 0</span><br></code></pre></td></tr></tbody></table></figure><p>但该函数与异步函数配合的不是很好，例如以下代码是不可能的，因为 produce 接受的 callback 返回 Promise 时，produce 函数的结果也会是一个 Promise，这对于 react 的 set 函数而言不可用。当然你可以加 await，但多个状态时你又需要合并与拆分，这些样板代码都很烦人。</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-title function_">setI</span>(<br>  <span class="hljs-title function_">produce</span>(i, <span class="hljs-keyword">async</span> (draft) =&gt; {<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {<br>      draft += <span class="hljs-number">1</span><br>    }, <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> draft<br>  }),<br>)<br></code></pre></td></tr></tbody></table></figure><hr><p>使用 mobx 的代码</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">useLocalStore</span>(<span class="hljs-function">() =&gt;</span> ({ <span class="hljs-attr">value</span>: <span class="hljs-number">0</span> }))<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(store.<span class="hljs-property">value</span>) <span class="hljs-comment">// 0</span><br>store.<span class="hljs-property">value</span> += <span class="hljs-number">1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(store.<span class="hljs-property">value</span>) <span class="hljs-comment">// 1</span><br></code></pre></td></tr></tbody></table></figure><p>这种模型的好处是，你可以直接修改状态，而不需要使用 set 函数，而且你可以直接读取最新的值，而不需要使用 await 等待下一次循环。基本上，它与 vue 的 reactive hooks 类似，生成一个可变的对象，然后可以修改和读取，即便是深层的。某种意义上，vue3 hooks 确实是 react + mobx 的简化，但模板相比于 jsx 让许多人不习惯（不喜欢）。</p><h2 id="依赖地狱"><a href="#依赖地狱" class="headerlink" title="依赖地狱"></a>依赖地狱</h2><p>例如下面这段代码在 react 中很常见</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> { useState, useEffect } <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) {<br>  <span class="hljs-keyword">const</span> [text, setText] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">''</span>)<br>  <span class="hljs-keyword">const</span> [result, setResult] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">''</span>)<br>  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {<br>    <span class="hljs-title function_">fetch</span>(<span class="hljs-string">'/api?text='</span> + text)<br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> response.<span class="hljs-title function_">text</span>())<br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> {<br>        <span class="hljs-title function_">setText</span>(data)<br>      })<br>  }, [text])<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">{text}</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">{(e)</span> =&gt;</span> setText(e.target.value)} /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>{result}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>}<br></code></pre></td></tr></tbody></table></figure><p>使用 mobx 可以改写为</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> { observer, useLocalStore } <span class="hljs-keyword">from</span> <span class="hljs-string">'mobx-react-lite'</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">App</span> = <span class="hljs-title function_">observer</span>(<span class="hljs-function">() =&gt;</span> {<br>  <span class="hljs-keyword">const</span> store = <span class="hljs-title function_">useLocalStore</span>(<span class="hljs-function">() =&gt;</span> ({<br>    <span class="hljs-attr">text</span>: <span class="hljs-string">''</span>,<br>    <span class="hljs-attr">result</span>: <span class="hljs-string">''</span>,<br>    <span class="hljs-title function_">setText</span>(<span class="hljs-params">text: <span class="hljs-built_in">string</span></span>) {<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">text</span> = text<br>      <span class="hljs-title function_">fetch</span>(<span class="hljs-string">'/api?text='</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">text</span>)<br>        .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> response.<span class="hljs-title function_">text</span>())<br>        .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> {<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">result</span> = data<br>        })<br>    },<br>  }))<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">{store.text}</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">{(e)</span> =&gt;</span> store.setText(e.target.value)}</span><br><span class="language-xml">      /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>{store.result}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>})<br></code></pre></td></tr></tbody></table></figure><p>不过一般而言可能会将 mobx 仅管理状态，而相关的功能函数放在组件顶级。</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> { observer, useLocalStore, useObserver } <span class="hljs-keyword">from</span> <span class="hljs-string">'mobx-react-lite'</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">App</span> = <span class="hljs-title function_">observer</span>(<span class="hljs-function">() =&gt;</span> {<br>  <span class="hljs-keyword">const</span> store = <span class="hljs-title function_">useLocalStore</span>(<span class="hljs-function">() =&gt;</span> ({<br>    <span class="hljs-attr">text</span>: <span class="hljs-string">''</span>,<br>    <span class="hljs-attr">result</span>: <span class="hljs-string">''</span>,<br>  }))<br><br>  <span class="hljs-title function_">useObserver</span>(<span class="hljs-function">() =&gt;</span> {<br>    <span class="hljs-title function_">fetch</span>(<span class="hljs-string">'/api?text='</span> + store.<span class="hljs-property">text</span>)<br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> response.<span class="hljs-title function_">text</span>())<br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> {<br>        store.<span class="hljs-property">result</span> = data<br>      })<br>  })<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">{store.text}</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">{(e)</span> =&gt;</span> (store.text = e.target.value)}</span><br><span class="language-xml">      /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>{store.result}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>})<br></code></pre></td></tr></tbody></table></figure><p>useMemo 也是一样的，可以使用 mobx 的 computed 来代替，同样，它是自动优化的。</p><figure class="highlight tsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> { observer, useLocalStore, useObserver } <span class="hljs-keyword">from</span> <span class="hljs-string">'mobx-react-lite'</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">App</span> = <span class="hljs-title function_">observer</span>(<span class="hljs-function">() =&gt;</span> {<br>  <span class="hljs-keyword">const</span> store = <span class="hljs-title function_">useLocalStore</span>(<span class="hljs-function">() =&gt;</span> ({<br>    <span class="hljs-attr">text</span>: <span class="hljs-string">''</span>,<br>    <span class="hljs-attr">result</span>: <span class="hljs-string">''</span>,<br>    <span class="hljs-keyword">get</span> <span class="hljs-title function_">computedResult</span>() {<br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">result</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">text</span><br>    },<br>  }))<br><br>  <span class="hljs-title function_">useObserver</span>(<span class="hljs-function">() =&gt;</span> {<br>    <span class="hljs-title function_">fetch</span>(<span class="hljs-string">'/api?text='</span> + store.<span class="hljs-property">text</span>)<br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> response.<span class="hljs-title function_">text</span>())<br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> {<br>        store.<span class="hljs-property">result</span> = data<br>      })<br>  })<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">value</span>=<span class="hljs-string">{store.text}</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">{(e)</span> =&gt;</span> (store.text = e.target.value)}</span><br><span class="language-xml">      /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>{store.computedResult}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>})<br></code></pre></td></tr></tbody></table></figure><h2 id="封装一些工具-hooks"><a href="#封装一些工具-hooks" class="headerlink" title="封装一些工具 hooks"></a>封装一些工具 hooks</h2><p>当然，mobx 可能有一些样板代码，但可以通过一些封装解决，看起来像是 vue hooks xd。</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> { useLocalStore, useObserver } <span class="hljs-keyword">from</span> <span class="hljs-string">'mobx-react-lite'</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 声明一个状态，一般用于原始值，例如数字或者字符串</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> useLocalRef&lt;T&gt;(<span class="hljs-attr">value</span>: T): { <span class="hljs-attr">value</span>: T } {<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">useLocalStore</span>(<span class="hljs-function">() =&gt;</span> ({ value }))<br>}<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 声明一个状态，一般用于非原始值，例如对象或者数组</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> useLocalReactive&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Record</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">any</span>&gt;&gt;(<span class="hljs-attr">value</span>: T): T {<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">useLocalStore</span>(<span class="hljs-function">() =&gt;</span> value)<br>}<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 声明根据状态变更运行副作用</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useLocalWatchEffect</span>(<span class="hljs-params">f: () =&gt; <span class="hljs-built_in">void</span>, dep?: () =&gt; <span class="hljs-built_in">any</span></span>) {<br>  <span class="hljs-title function_">useObserver</span>(<span class="hljs-function">() =&gt;</span> {<br>    dep?.()<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">f</span>()<br>  })<br>}<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 声明一个计算属性</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> useLocalComputed&lt;T&gt;(<span class="hljs-attr">f</span>: <span class="hljs-function">() =&gt;</span> T): { <span class="hljs-attr">value</span>: T } {<br>  <span class="hljs-keyword">const</span> r = <span class="hljs-title function_">useLocalStore</span>(<span class="hljs-function">() =&gt;</span> ({<br>    <span class="hljs-keyword">get</span> <span class="hljs-title function_">value</span>() {<br>      <span class="hljs-keyword">return</span> <span class="hljs-title function_">f</span>()<br>    },<br>  }))<br>  <span class="hljs-keyword">return</span> r<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h2><p>虽然 mobx 很好，但它也有一些局限性</p><ul><li>需要一些样板代码 observer/useLocalStore</li><li>子组件可以修改传入的状态</li><li>结构化克隆时需要使用 toJS 将 proxy 代理对象转换为普通 js 对象</li><li>没有直接的显式声明依赖运行副作用的方法</li><li>不能完全避免使用 react hooks 自带的一些方法，尤其是依赖于一些第三方库时</li></ul>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    <category term="前端" scheme="https://blog.rxliuli.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="React" scheme="https://blog.rxliuli.com/categories/%E5%89%8D%E7%AB%AF/React/"/>
    
    
    <category term="工程化" scheme="https://blog.rxliuli.com/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
    <category term="react" scheme="https://blog.rxliuli.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>周报 2023-03-12</title>
    <link href="https://blog.rxliuli.com/p/ea7d22223a8841eb8571af67475c7d2b/"/>
    <id>https://blog.rxliuli.com/p/ea7d22223a8841eb8571af67475c7d2b/</id>
    <published>2023-03-12T15:21:49.997Z</published>
    <updated>2023-05-14T17:11:23.767Z</updated>
    
    <content type="html"><![CDATA[<p>这周没有太多有趣的事情发生，自从周二出差之后作息就不再规律，再加上还出现了喉咙发炎的症状，导致周三之后精神质量极差，许多计划也没有完成或被耽搁了。</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8AxGkMGIykx8pozqolOwSQTVW0oJZUFD7v8YcbFr4TOzkRZOaXFF_0sKZ1qBSj2hVTb8ZboUXD-1C8FVvqFJNsqWSVA52qjpvVnYlmxqfhVmu_q_WZpKgFD7J7HsGFIrTXSrhRDY455jLspd_mniUxj=w1003-h1337-no" alt="cover"></p><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><p>整体上 chatgpt api 的使用尝试并不总是尽如人意，实现的一个机器人 <a href="http://chat.ai-assist.moe/">http://chat.ai-assist.moe/</a> 也没有功能增强，只有一些小的 bug 修复。尤其是最想要添加的命令系统在周日还鸽了，奇怪的有些懈怠了。<br>其他方面，维护的同人小说 <a href="https://persephone-s-waltz.liuli.moe/">珀耳塞福涅的华尔兹</a> 接受了一个翻译作者的 pr，在修复了基本的 markdown 格式错误之后已经合并，但还有许多尚未留意的细节问题尚未修复，需要在下周抽时间看看。</p><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><p>这两周都几乎由于 chatgpt api 的出现都没有再继续跟视频学习日语，吾辈还尚未确定这周是否要继续折腾 chatgpt api 或继续跟进视频进度。但整体上每天使用多邻国刷回题仍然在继续，目前已经到达绿宝石等级。<br><img src="/resources/3089b46df2a94d5abe949d9782448cb0.jpg" alt="image.jpg"></p><h2 id="出游"><a href="#出游" class="headerlink" title="出游"></a>出游</h2><p>这周原定去京西古道徒步玩，而且原以为徒步过程中没有商店可以买东西甚至带了一个愚蠢的背包，但实际上却去了京西古道风景区。<br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8ARbzdXx6cGu0MQyYbohIRFO7uQ_5N3CbxH9p-zifilUoL9bQGgP37VCqiH7DHzuY9cYzAqsuJn7bsoBqmlIdK2Gp7UhkTiZhRwYMb5Kb4w9VPNy9kc84BejGEHZSttpX5-vuEh-l2t2ECe-HoRnzwi=w1783-h1337-no" alt="大门处"></p><p>一开始又是爬爬爬，从山道到后面的永无止尽的楼梯，甚至比上次的北宫国家深林公园还要过分，中途不得不休息了好多次才最终到玻璃栈道上，感觉与想象中的郊游相差甚远。<br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8B5Ak97ZPEFBs9y2r7-hYkVddwfXwl5drYrBpiwg9ORKOaBd0skIO8vfVzxKc2WiSkJFV87JsHgpmwPpHQQHvzpGR14oAeCFD_tR4BJQfxIsNCBJ9vGMTI22CIxv2NndT8M6zTb_C3eVCn7EMw-AKa4=w1003-h1337-no" alt="起始山道"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8ATZPAZrVVd2G6CDD5n5eSjSzbY-oDTghEjE0Ej2eSNh9OsSviTENlrOETWlrneWoB2plSyIOhTLVBDfCOjP2LVgH4Oyaa0OjXQBfTMZIZC3ZhdvQE0D2JobecnxvYJ7a_zb-xLhj2ckKa1Nedt4P3Z=w1003-h1337-no" alt="无尽楼梯的开始（并不真的）"></p><p>见到了传闻中的马蹄窝，第一感觉想到的是不是人工雕琢的，吾辈可能想法有些阴暗。</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8A3Eh8ztTp7Ft0h1NZzi10qkSgEEYePx6fyyY3dxsYBhS_n7YHdq25L8Wx9dCYc_GotKKPrq-OCSA75rxtPmCY563U0lbKri2j05PVlM6gclYWksf9G2inQ04rxn88Gbpj1rUKoqJ81oLx2IaTA2cIx=w1003-h1337-no" alt="马蹄窝"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8DzZsVXpKNDlcxXx2NPDuu4L7gvaI9vgq_EnRpp61IgwHPz9ItHtJl8dnmRK8MPdZ1rbhTH1mRYVZD0xnjFjZFsT00QmHdz1gTV7zullghEODHQhR4uZcyaWn0w4Uodt33oLvxor6DA5raNTC1EuzLK=w1003-h1337-no" alt="拱桥"></p><p>来到了玻璃栈道，实际上就是依山而建的，爬上去相当费劲，上面的风景还算不错。<br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8AmCKHcFM8TaDosAv7-g1T6RHk_ejJmt6pAWdCR46uZdYU2tntsN9xg3XvrMrshLj4rPhE6friHL4FlLR6nlmjOymtrZJvXeXzNmK5eCtdTzvk1t3Holbmc3vTZpE8LZisNRkxudK-LMDG-5vx9Q0so=w1783-h1337-no" alt="玻璃栈道"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8C3UImpFIpTbphfs1y4APnJPi2B9M7f-MMtbjTQe9HiWoCukuguclgojJwUQtqI3vCgxgRsFBq0FzH8orVe-_s5joyYevneiNNlqC5TlTWdNFttDrHPGxipdO2vI6ep7QOIA3xuYYiH3hM6hEOQy5Kw=w1003-h1337-no" alt="山水之间"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8AF8332omBgIQVjsChANLXEgVQG2Y5tZH5X1sYpimNHcCb-jrYdXKa0htGun984hDx-R_yoHk2FM27rvbTgdJLhFjsHpys4CWXN3b4wAfr8ci6MISsECYjlE9LH6n_bM5BsJ1MVoYP24_mm51LuJewJ=w1783-h1337-no" alt="下山之路"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8DUa5jEzBR9QsDfjViHLzuqXhnZhJ9nzXuDfwE63mdQ-l_cMrU8lkGyv8wmRfVFNCfKrrL3JtVeXykLVheUDru59b-3K6_byKEAhg0t6N7_--KF8S3AaxoXLewzN0zqVAosCnOUzRAPq0YCkCi1n_ip=w1783-h1337-no" alt="下面的视角"></p><p>不过后面下山的时候倒还不错，开始有了一些春天出去郊游的感觉了。<br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8AxGkMGIykx8pozqolOwSQTVW0oJZUFD7v8YcbFr4TOzkRZOaXFF_0sKZ1qBSj2hVTb8ZboUXD-1C8FVvqFJNsqWSVA52qjpvVnYlmxqfhVmu_q_WZpKgFD7J7HsGFIrTXSrhRDY455jLspd_mniUxj=w1003-h1337-no" alt="盛开的花"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8Bw3bug6GlhFa1SI1lePoF2ALBtoMLG4E4U_wdMoRos0TH7vvQ67iSUuHXnFoPWWqZvVWuHvX0Vc04gTyGRgLF9ECJ2fwYOA0zLiOlMltNbnAksL_fScZ2EjJj3pFOHq6XDQq0X3l0ij6oysnq9IIoj=w1783-h1337-no" alt="层峦叠嶂"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8B5Y7_mgadWml1qL5EBTLMvTdKw1fQZlNGcyCE-OuQu9ubxNnFE5FHNP6ThupdpLQekh72TyZE3qId87N3TUKwQW_hnNHvXCYaD33EtTHp0r-4nFgQBRSALU8uZYwff44c3FFKdSJJLbKOxgd7h8mvq=w1783-h1337-no" alt="漫山的花"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8C4CGS8IazHXebkIQtgyRkSE39tuTZbFxPNdUGQvodcaMMB5Q2zOKTiCTDVxCn5FnVkTifGbPs3FUitKSuA8VcgkYr62tHr9GaWMwqjNwOuka6Pnk-Z9dC9iVMtQCsDpJSpLfFS5-8jSu-qBcTF0j6Q=w1783-h1337-no" alt="漫山的花-近处"></p><p>在中午吃了点东西下山之后，没有真正计划就在周边随便走了走。看到了一个不再开放的溶洞，但仍然有户外爱好者翻过栅栏进去。<br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8BTPJ-13t8a0dhHSN22DbZY3KTITktBkrPDYoW_Pyakf1MZbXFjFBv6TpA6BMLLA5IO9RJDrT3bhHQyswmtBzUcFWc6AgC6_73Tt-oRLLHmNpiItWCJzCUBwJ8NnmQ4kcvCGgeTdJczleVZfW-quKxW=w1003-h1337-no" alt="有溶洞的野山"></p><p>也在周围找到了一条废弃的铁路，当时吾辈不太清楚它是哪条铁路，但回来之后经过查询知道了它是京门铁路，这次顺便把另一个计划中要去的景点也去了，真是不错。<br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8AklW7Or1_BLUCK70KOYMC9bINBqKZmlcUqWgSCogMqJCQJoxAonDFd4vjq5JL0dLonDSOXrmiWuLX5AiFRsjQG4PCDc-oc04DQpIfnccSlAO9mhrjWmDdEy8OAZUutDVsMeZIpP0zkQdnkPtvmJDh6=w1003-h1337-no" alt="空无一人的铁路"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8CIFW703hHDFWdxd274cldG84wp6Edgy-BaQmQE8dKOBNmmALxHA9IZGnYhEp1eELkhRfRX5JgfJyoP42p-7u4q7kj_hhe0uIsPVXNzcGYWdXn4BBZXPrkbRrntJXKQoD6pYa9F71uFeu7a0CIaMsuQ=w1003-h1337-no" alt="隧道"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8AjabrHn_kvWnBYn175hisjKJMxWrRcBhANLbuVXj19DU3xzd40W4PZsojx3bAQBgJcLC7tfB4uRjsVOi40STur4iKhNvNXFTTUdGMx_sTR0VorlUJ_fwZObRGb-hDavQrckPbH5oX_piTq8ShJ_E06=w1003-h1337-no" alt="中间不知为何存在的空洞"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8B47kRaAKmZ2iT0DSBb1f40e_h5NzhAx4AP-qXvjXiv5wOIvzxEMpVmeyboi1aCQfLKilTYCP619H1iBPC7K1pNMCgdjP7Z7gPRCMIDAXAQK_h-qvvCF_fukTEnkGu6_weHo0IQ39qGQpGx5nWb1t9K=w1783-h1337-no" alt="上面呼啸而过的火车"></p><p>从铁路旁边的某处小路下来，来到了永定河旁边，这里的水很清澈，吾辈甚至将两块鹅卵石带回家了。<br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8BVsEtOZi3UxGmCYhcb1CEed4tCznXW6-dlkUDsCUUbZPe-ux1SzPp10gkrf4eMuQdoPf5JcDJGWZD338PjX18RPgJ5EX1o1i6IENd09O6XKcn71-kPqTxSKnmiWF26wHlApv0bnM7iFvQGoUvkVtuC=w1003-h1337-no" alt="从铁道下来的小路"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8AFsAtonKwH7V-kdpEiF4HiCJtMZSzqhR4-dCSuysk-pO8R9_nGu4dJfFgK606exd09Yj8_ZezXnyKfkIXmaBogeNiHA7uCaIbjzkVrYM7BszxllVwimxwMEEUHFvrIeHnPayaF266dXrfPbnL2ly2O=w1783-h1337-no" alt="河边"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8AtjNjzjppbPicFBQtthwHhps1xBdUU3ccb86lrH977XftYmx1wR9wneeTieKuSqmEz4veRhWKWc5xtyuZvzJY8Qs_0a6G8xidhW8qPBZDxZU5ZccLwuuYmxUNXBcy4RIgPb7HlBGFw4FIy_xa_JqBa=w1783-h1337-no" alt="带回家的鹅卵石"></p><p>下周预定去蟒山国家森林公园玩，春天这个时候果然还是应该选择户外郊游呢</p>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    <category term="个人" scheme="https://blog.rxliuli.com/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    <category term="周报" scheme="https://blog.rxliuli.com/categories/%E4%B8%AA%E4%BA%BA/%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="个人" scheme="https://blog.rxliuli.com/tags/%E4%B8%AA%E4%BA%BA/"/>
    
    <category term="周报" scheme="https://blog.rxliuli.com/tags/%E5%91%A8%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>周报 2023-03-05</title>
    <link href="https://blog.rxliuli.com/p/18d81a08c6aa4908aa22979e44b14660/"/>
    <id>https://blog.rxliuli.com/p/18d81a08c6aa4908aa22979e44b14660/</id>
    <published>2023-03-05T12:35:43.523Z</published>
    <updated>2023-03-26T16:28:00.695Z</updated>
    
    <content type="html"><![CDATA[<p>这周发生了许多事情，但最重要的还是 chatgpt api 的上线。这次上线引发的社区疯狂的各种应用简直前所未有，吾辈这两天甚至开始焦虑，感觉正在发生一件开天辟地的大事，但自己却未能正确的参与其中。有人说吾辈是典型的 fomo 症状，或许正是如此，但也正是因为亲身体验了 chatgpt plus，才会相信它真的有这么好用，所有涉及到文本的事情都会受到影响。有人把它比喻为 iphone4 的发布，吾辈猜这真的并不为过。就网络上看到的实际案例而言，github copilot 已经已经基于 openai 实现，notion 的 ai 助手亦然，bing 集成了 chatgpt 之后使用量增长飞快，连国内的字节都已经有团队使用 ai 工具替代外包原画和翻译了，时代变了。吾辈目前也开始使用 chatgpt api 验证自己的各种 idea（军备竞赛.jpg），从自行实现一个 chatgpt web 版本开始，目前已经发布到 <a href="https://chat.ai-assist.moe/">https://chat.ai-assist.moe/</a>，请勿滥用。如果你想独立部署，请直接使用 docker 镜像 rxliuli/chat-server 即可。</p><p><img src="/resources/ccf4285d7bca4dfc89ec05ebdeb552c7.png" alt="1678034827906.png"></p><p>另外，本周还发生了一些其他对于吾辈个人而言重要的事情，主要是 nat-test n5 通过以及后续计划的确定，感觉事情真的太多太多，好想要鸣人的影分身之术啊。</p><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><p>这种主要创建了 ai-assist 项目，用于后续基于 chatgpt api 开发相关工具，目前已包含 chat 和非常简单的 speak。</p><ul><li>chat: <a href="https://chat.ai-assist.moe/">https://chat.ai-assist.moe/</a></li><li>chat: <a href="https://chat.ai-assist.moe/#/speak">https://chat.ai-assist.moe/#/speak</a></li></ul><p>是的，也购买了两个独立的域名用来路由相关网站和服务，避免影响到其他现有正在使用的域名被屏蔽。</p><ul><li>ai-assist.moe</li><li>ai-assist.dev</li></ul><p>而且，目前吾辈的开发范围也已经不再局限于前端可以独立运行，对于后端，在吾辈学会使用 azure 的 docker 镜像之后部署就不再是问题，这让吾辈可以避免之前的一些思维局限性。</p><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><p>好吧，说真的，这周几乎仍然只保持了最低限度的多邻国学习，但也确实上升了一个等级（所以说它像是游戏嘛）。不过这也是个长期必须要坚持做的事情，有点头疼优先级和时间分配的问题了。</p><p><img src="/resources/9cb3b896e2594a21b0ba5f3b2f6ebc28.png" alt="1678034746203.png"></p><h2 id="出行"><a href="#出行" class="headerlink" title="出行"></a>出行</h2><p>这周去了慕田峪长城，感觉比之前的司马台长城共容易爬，但其实有点没什么意思，相比于公园而言能看能玩的地方都少了很多，周围的人也很多，据说很好玩的滑倒也因为人数众多走走停停，体验不好。不过坐了索道上去的感觉挺不错，看起来挺危险但感觉还行。从 6 到 14 爬了差不多一个小时，真是很累很累，权当锻炼身体了。</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8Dk_OB1bBLrNRTAbyKkm05R4694DTfeh6zZe70NgVVNjKHt7FBtOiKTIFCvBA_87uQZ4QJhtzb4G9aiCnGaU1lcSChVEIlwG7cvldVWU6e4JlOa18USH3RS6rsLLcAPIaMq-J6PVN84cnFzNgCDx6R4=w1003-h1337-no" alt="刚下车进入景区"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8DxWDJI_fvhqt5wj6-8lc28xduiWT1Js5ixMUB1la-swLpP_7ACWOH4INosTOmQQ4h5-CT3Xi9l-lKN4MwhKo1bwLmAwC7LBf4Q6ut5rWsgakD0haZVwnu0-SQtDFf1tazsQUzrcqq4K5oO19S3Co0d=w1003-h1337-no" alt="坐索道车"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8DrStUSLyPkjfREElIAt8A-GBwd4pBPgCyepjLetJhPn9hPyV7ioOzgclon9VsEfrr0iu06xCVFF6_hPnetiQy3Ez4bGq7G0GpnYk0PlACdc8tL--G7h5_o-hdP5cDzskEuVklUnqmogpRJ-sDas-Pf=w1783-h1337-no" alt="下面就是滑道"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8AfnK8NYF8Pojol0VomkQsNtjOV8m6vkRzqal4GYQ8WfPp6avaHu_JG-tE3KAX5H3_wWb9l9VkXF6RiuPXQQAE4tbgzFdmgn2lMiXe7lAJ8SNgDGiZb_yMXhFAW16fwoBMWY7xy_1ymS5Q5ZTT2etS0=w1003-h1337-no" alt="前面"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8DNoVCAxSuoynicOJ-zSLPSgGhUsIlUrNXWEbG46I8l4OpweuIGjQNSvUuwv_yM9JjNSuw9fZrW5S7-kge61QdxhBoDpycphPFahYKeXBQEf0fxEDMRzGmK_4PMltU0VtmKPLhs6QYPJXj3S98-TvMB=w1783-h1337-no" alt="后面"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8AEiuuyYEJh75OtQl1Z7tiaH1O3iQxrRg8EhEtxwMETIQkTChQ7lvCHOeC5xCsv_Yr6V99Z8uPIBDkTBBLbtyAV_BllLjUPHIbkvhgQsmWdKV2czIdrrc9fhCNVitWHIW_KXXuODakX4CZ4-A1kNuuf=w1783-h1337-no" alt="春天还没到"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8DH1W7ESKsk-bCXkEYm5eqUPWDROwh1JbrIDEy52n7IDb8MYq2u_09-6PN6kpwiG5sna4fU8o47-1XmyR_GqCKpaMMETbrBAEKh8m3PbnqXJCTmFTuTpKdMim6eJuNv93_kzYOIcCTC2gLcsWHChYEK=w1783-h1337-no" alt="崇山峻岭"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8DwRVi6xvyK5j2mhbrXIaA3JItAwejn7gJkCiAUQ3_s7vm1LWh2_tt7tdzXsQxUSWr_54uascivWb0lazEa24m_oM8ln2MrVyI8p1B_jhDWrtSPT6xhu3BmnW8inZmz_v10HPj8bbiP6o24GRsPLyUs=w1783-h1337-no" alt="开始爬长城"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8AeA9km6mevAIOwpK1zFVETXZQR3pTosgGsZv5SNTBGO--RpoNdavvFCTZIT7GGrLzHvTjcuhAC8JBPbXemVbMEcSl4P6Fip5-JKiTAL93-mGioxjRK1eXg1CrlJvY8e0qqyywpd2axAoeA7tKyVxQt=w1003-h1337-no" alt="到 14 了"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8Cq_f1ig3bncNggoI8pOONuApvBgYoAR2FCe93jRgZwW25BWmlDPrOVASrhg7Zw0Ww0d-Rd5Ob3OglaMtPYQ8iNWnEAxZNDzCY1EAmbY4Gb1sv4TDi7GWtKk47qMDQIQKGwyBX0XYkQV-zffL4MH2r0=w1783-h1337-no" alt="貌似是打卡地点"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8C8kVYxaQIReQlhgF2ETA_JnN3dp74TsO9-jXND_St1u9OC_e47eKMLaCLsvgZi9EfBU5BApWl7LnNoaYwDBqbgZGyXbfimVowIkcR4LN9skCbe5gCocdlsT5AqBvZdt1R0EDyGqBwBWffGLs0sTPtY=w1003-h1337-no" alt="往回走"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8AoaZhDElNqQf3F8RQxIzIB6FYrklkfXl6zJ0uHC5SAJ6m5tcHR-cP_tC8OstOxp4M3cKv7Kqu0ls8SKc2XB1adGWDuTXOtGCx9pKlCONVUlUa7toi-ko5x1J_LITDa0aA-XDaLb4GyRPwMqFDsbMdB=w1003-h1337-no" alt="焦点不同 1"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8B9uoc_2GYfXDPSeVCUit2xlVnIq83icHcgFiLx_PAzRrzPm6bqlq7rZkuGrhYhCqvLHsAr5OljkqzLRjxQEd0uwjNlHkjFHxN9vM3Oet_gCZBrt8jxYSL0AhbbmbtxZ0lkuU2yi82dbK3AlnC_91_b=w1003-h1337-no" alt="焦点不同 2"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8AY9Vd896maUMqvvZcdkkQAN27R20KilsTc9waI1L0PQiFoboVC-W9a74ru2VdZW5CoshRaJUmIDpp4zzTHslRR3IemspxU916sFczPXhLW9E3dH_Sd29zpYzIHhsmxfjYZ_Xt6Q3tNeZ8j_4x_LIAy=w1003-h1337-no" alt="山间步道，走错了路"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8AEjSRlFEG6VKRGxbw-WrnbwD-MnrVhq5zg6T2KP1ghTRAPRGmHknswm52xCrLLtji-nPrbhpHgOY9P50mU2KeJLPu2GOow25yRxJSsq0XMryNLXD3rTpsBkSW62NVyZkdb3qh6SVDEtXud1i4i9veK=w1783-h1337-no" alt="准备坐滑道下去"></p><p><a href="https://photos.app.goo.gl/QYHvU9UwqBrtkuti7">影集</a></p><p>下周尚未想要去哪儿，也许会去京西古道看看。</p>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    <category term="个人" scheme="https://blog.rxliuli.com/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    <category term="周报" scheme="https://blog.rxliuli.com/categories/%E4%B8%AA%E4%BA%BA/%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="个人" scheme="https://blog.rxliuli.com/tags/%E4%B8%AA%E4%BA%BA/"/>
    
    <category term="周报" scheme="https://blog.rxliuli.com/tags/%E5%91%A8%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>周报 2023-02-26</title>
    <link href="https://blog.rxliuli.com/p/cb182136abcc4b8b98730f3bf90b3481/"/>
    <id>https://blog.rxliuli.com/p/cb182136abcc4b8b98730f3bf90b3481/</id>
    <published>2023-02-26T02:16:36.986Z</published>
    <updated>2023-05-14T17:11:14.897Z</updated>
    
    <content type="html"><![CDATA[<p>这周终于搞定了 chatgpt 支付，一个月 $20 在接受范围之内，主要的麻烦是要求美国信用卡，最终吾辈使用了虚拟信用卡的方式。解决了经常不可用的问题之后真的很不错，尤其是在开发方面，对于习惯性在实践中解决问题的吾辈而言很方便，事实上吾辈在尝试用 python 做基于 openai 的工具时就一直在用它查一些基础问题。</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8Ab4SMOvO750Nzl0RaLVN336ambNiWDFniSzYuaM5tiafXpTx1dXt-WgL-ToVrbgQYIaQWhPOh1sEYsUoqQ9ixf2BS2kPXhELQqb3JPOUAiqOFM7BYpgA2bPvsAdgzOhRjvewGhFFBdMUvXnPVt7IYO=w1708-h1281-no" alt="cover"></p><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><p>今天尝试使用 openai 编写了一个机器人，会回答关于同人小说 <a href="https://tts.determinismsucks.net/wiki/Main_Page">To the Stars</a> 的问题，基于 <a href="https://github.com/jerryjliu/gpt_index">LlamaIndex</a> 实现。最早在 <a href="https://twitter.com/nishuang/status/1628401383408893952?s=20">这条推文</a> 中看到将一些资料变成 chatgpt 的方式通过聊天获得信息，所以也折腾了一下，但实际效果很糟糕，简直是在胡说八道。<br><img src="/resources/bf70ace9cb0044cfb9d7f72382fe3ade.png" alt="1677427466423.png"></p><ul><li>GitHub：<a href="https://github.com/rxliuli/to-the-stars-robot/">https://github.com/rxliuli/to-the-stars-robot/</a></li><li>Demo：<a href="https://tts-robot.liuli.moe/">https://tts-robot.liuli.moe/</a></li></ul><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><p>糟糕的是，这周的计划几乎完全错乱了。尽管多邻国还仍然在坚持进行，但吾辈怀疑那更多是因为它的排名机制更像是游戏而非学习导致的。<br><img src="/resources/56573a9ebc364867a4b1398804afe328.png" alt="1677427842397.png"></p><p>下周将继续走计划的一部分的路线，但确实需要像多邻国一样有某种方法让吾辈坚持下去。</p><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p>这周看完了《异世界舅舅》的前 12 集，只能说里面许多情节确实很扯，甚至可以说和《恋爱 flops》一样典中典，但确实让人感到很有趣。或许现在已经从<strong>喜欢看动画</strong>到<strong>喜欢看动画里面的人看动画的反应</strong>了，大概和反应式小说有点类似吧。<br>今天在看 2022 的动画年终回顾时看到了《相合之物》，于是下载下来 3 倍速看完，平平淡淡的描述日常生活的动画，与其说是看男主，还不如说是女儿。话说业界现在是在文艺复兴么？明明年纪很小但却很成熟和明明年纪很大但却很幼稚的角色又开始频繁出现了。<br>《机动战士高达 水星的魔女》早前在 10 月番总结中看到过，当时还没有完结所以就没有下载，今天也是因为看到年终回顾想起来了。预定下周六要看，貌似 4 月也有新番，不过吾辈大概仍然不考虑追番，还是会等完结再一口气补完吧。</p><p><img src="/resources/22c074442181417ba1c42611e08f1b30.webp" alt="kv.webp"></p><h2 id="出行"><a href="#出行" class="headerlink" title="出行"></a>出行</h2><p>周六去了同事推荐的北宫国家森林公园，虽然整体路程很伤膝盖，但还是非常开心。整个公园非常非常大，而且早上（好吧，其实是上午 11 点了）去的时候空气真的很清新，爬到第一个顶上的时候心跳时速爆炸，休息了好一会才能继续走，不过后续继续爬另外几个山顶时反而不那么累了，可能也是适应了吧。</p><p><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8DkjYeUEhTMIqsHOiqBHo-ZFCNnzegl30UoM6cp5a-J7pfVDfZGxJ2VcmGQtuZbQlyhryYWXJSrSnyhSv32A1YheXLJX_2605FvpCpbathsQgHlo3i2ettygFqttYLgexhN375u0g8pi5VCCZo2Avyb=w961-h1281-no" alt="刚进公园的时候看到的"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8AtT9bvJxcCTFr-0PcNcRJXW4ez0ijetl6BWnWi2zTQF8LZsZqVBfKouIeTjOYAeYXYxr1zlQ5m5Z9W03FQ9jnbbFTs_JtWkAgK4IYImN15f2Z3culRW-t9GsKgF-ikiGT5cQkcfchcwIh3CzLblAT4=w1003-h1337-no" alt="爬完山顶之后下来"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8BB4Y8bhKzbT-CWV18G8aRrVw_et3OFGbS_G_dEu7FVac4F4T60yfGyvQ5GtedeoVluHuiKPL8kSb2bvuES-3R-Uf3vN54GhjPxuBnQTg73OqkfINOd3XD1pjgbzRFFGUmWAcEMtVeZbReOI66VzCMi=w1003-h1337-no" alt="奇怪的石头"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8Ab4SMOvO750Nzl0RaLVN336ambNiWDFniSzYuaM5tiafXpTx1dXt-WgL-ToVrbgQYIaQWhPOh1sEYsUoqQ9ixf2BS2kPXhELQqb3JPOUAiqOFM7BYpgA2bPvsAdgzOhRjvewGhFFBdMUvXnPVt7IYO=w1783-h1337-no" alt="远方的山"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8C3MooAwUxV0d2HjTU577s3uG_BWRCrya0kxO_Go97h6ih79vKHYpgbJLnpZo3SPLU33UGakgw2db-rOaaXvGvILmjJjBDR_V6JU302uQ5C4LUDCEnTStb_xH867AHecysR7doRerHebFHU8jzKvhq4=w1003-h1337-no" alt="据说是地震石什么的"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8A1GiQAQCt6hHfd38pLAQ6Uj5l-qwOSlgEvLW94XdNj9DefnO5j7EvTkh0Sh6vfXFFJFkL82mJYRrZDuWWmOGKxVLHJuMT12ID8Q8q1G43inbqNpjQIYA8FT9swroWhfdJSPr10OvSaRaRCK0kaasuH=w1783-h1337-no" alt="城市的天际线"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8DKNX8FYNqjKKI0RygHp5xQppe7TBKV4CB9XhEewPuVm4OLkTfUEV_HbbJ8K8OP7mwIOzeIETq-pdjPp1n3wEq6rKZyGJUhRiY8fz8FCqNXWwnTvDXqgJlHcPZ40OFqLYwfuit9Os3fyF4tH12vfLZb=w1003-h1337-no" alt="这段路想起了长城"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8BAKSpC6nxxTXu-vN7inRxoYgYYpkIOyU2FwQfjt7Q-MtE1zHzuvjtlLGiOQTUrelLKGDtRZNCY10qMUke3treu_JBmxxvctWglR79wuZ_XROHl5HKq3faVuuqct_pvoUEpobrSJgq0iR6TYoASh8TG=w1783-h1337-no" alt="半山腰的建筑"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8B8TXZ2bmF-OKqpXYmd4ued_8_lT8whIGDU0BFvmWQQz8y_URyxWIoWpI-KYJCVA4juJ7OXitT_bcAPYQ0a3Ky4gJF6CMGQPSpXqM5RipyBusf1MMO0yJ27uBPedCAusMN_BEbwbzICRvYikw6-PB2j=w1003-h1337-no" alt="下山"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8B1BjTjNzuQ15j003DVVFE8lZdqDgPdX2Hs_VBBVJHYRcMg1gZg5TYHhyFBdorsjHhXKak-YgQ4dI__UTiogbavMuo1sBbel5mXOOdxvfLRfEz8WsHOmPtizi_lBl3qGIVm5bTxjkaLUXj5ctW7sS4-=w1003-h1337-no" alt="下坡之后立刻上坡"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8DWQo6FxfDtwew0RwZhnZAenJ0RF-YqsGDcQSG4g7_gCHYfrTjk3ots6Fzm2VEaUv07Jk_kLzp-mBCqt-Xi82TTesb1BfQ5Ay3JHOT41iPvK0ZYv5Sn_SFDbmZzmyzsYzL5UaCizprhc87apMPJuYS9=w1783-h1337-no" alt="冰与水"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8Ag5SdMp74Ia5gq0caH-30ggBQRsd1BzYg9xqpU2fjQ2m505N01LHqsQZXuvXHUT4NYv1ZbTUUuee-zARCOQOs_I6y0ZoLaocauOSM8nvCufFzc7G0mqo5g336n9w75yTu-wrIC1xkEeagznR4oB5G5=w1003-h1337-no" alt="巨石堆"><br><img src="https://image-proxy.rxliuli.com/?url=https://lh3.googleusercontent.com/pw/AMWts8DmQ22g31wSXC1h4oX4Nls76sO_mQfrxZd39OFlie9HlOacUaXoo9cy3sdNs5gWaYcYlEPkeuNV3Ii5gtHnwHUr2dcWpo50L7A8eK4oX6IlWZjLGYH_QElFs6V2-p3Pq3aGMBWz3rZCVyEft7ow03vb=w1003-h1337-no" alt="已经在上面拍的石头中间了"></p><p><a href="https://photos.app.goo.gl/se3ZeEgs1CAxcFPK8">影集</a></p><p>下周去哪儿暂时未定，前半周应该就能定下来，会在博客和推特上更新。</p><hr><p>这周六去慕田峪长城，有人要一起去锻炼身体么？</p>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    <category term="个人" scheme="https://blog.rxliuli.com/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    <category term="周报" scheme="https://blog.rxliuli.com/categories/%E4%B8%AA%E4%BA%BA/%E5%91%A8%E6%8A%A5/"/>
    
    
    <category term="个人" scheme="https://blog.rxliuli.com/tags/%E4%B8%AA%E4%BA%BA/"/>
    
    <category term="周报" scheme="https://blog.rxliuli.com/tags/%E5%91%A8%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>使用 vitest 做单元测试</title>
    <link href="https://blog.rxliuli.com/p/a9f8e0634b3f476687a2e844470fba44/"/>
    <id>https://blog.rxliuli.com/p/a9f8e0634b3f476687a2e844470fba44/</id>
    <published>2023-02-22T06:38:36.178Z</published>
    <updated>2023-06-20T05:39:31.501Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>vitest 是一个新的单元测试工具，它很快，默认支持 esm，兼容 jest api，可以被视为更好的 jest。在默认情况下，它支持以下正在使用的功能</p><ul><li>很快</li><li>支持 esm</li><li>支持 ts</li><li>兼容 jest api</li><li>支持 vite 的功能</li><li>支持多框架 react/vue</li></ul><blockquote><p>官网: <a href="https://vitest.dev/">https://vitest.dev/</a></p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>vitest 内部依赖 vite，但不需要安装 vite。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i -D vitest<br></code></pre></td></tr></tbody></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>好吧，实际上 vitest 是真正的零配置，支持 ts/esm/tsx，但如果你想要更多的功能，确实可以创建 vitest.config.ts 文件或者直接在 vite.config.ts 中添加配置。</p><h2 id="基本示例"><a href="#基本示例" class="headerlink" title="基本示例"></a>基本示例</h2><p>基本上，它与 jest 类似，在要测试文件的同级目录创建一个 <code>__tests__</code> 文件夹，然后在其中创建一个文件，文件名以 .test.ts 结尾，文件内容如下</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> { expect, it } <span class="hljs-keyword">from</span> <span class="hljs-string">'vitest'</span><br><br><span class="hljs-title function_">it</span>(<span class="hljs-string">'hello'</span>, <span class="hljs-function">() =&gt;</span> {<br>  <span class="hljs-title function_">expect</span>(<span class="hljs-number">1</span> + <span class="hljs-number">2</span>).<span class="hljs-title function_">eq</span>(<span class="hljs-number">3</span>)<br>})<br></code></pre></td></tr></tbody></table></figure><p>然后运行 <code>pnpm vitest hello.test.ts</code> 就可以以监视模式运行单元测试了</p><p>如果有多个测试时可以使用 <code>describe</code> 分组</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> { describe, expect, it } <span class="hljs-keyword">from</span> <span class="hljs-string">'vitest'</span><br><br><span class="hljs-title function_">describe</span>(<span class="hljs-string">'math'</span>, <span class="hljs-function">() =&gt;</span> {<br>  <span class="hljs-title function_">it</span>(<span class="hljs-string">'add'</span>, <span class="hljs-function">() =&gt;</span> {<br>    <span class="hljs-title function_">expect</span>(<span class="hljs-number">1</span> + <span class="hljs-number">2</span>).<span class="hljs-title function_">eq</span>(<span class="hljs-number">3</span>)<br>  })<br>  <span class="hljs-title function_">it</span>(<span class="hljs-string">'less'</span>, <span class="hljs-function">() =&gt;</span> {<br>    <span class="hljs-title function_">expect</span>(<span class="hljs-number">1</span> - <span class="hljs-number">2</span>).<span class="hljs-title function_">eq</span>(-<span class="hljs-number">1</span>)<br>  })<br>})<br><br><span class="hljs-title function_">describe</span>(<span class="hljs-string">'string'</span>, <span class="hljs-function">() =&gt;</span> {<br>  <span class="hljs-title function_">it</span>(<span class="hljs-string">'hello'</span>, <span class="hljs-function">() =&gt;</span> {<br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">hello</span> = (<span class="hljs-params">name: <span class="hljs-built_in">string</span></span>) =&gt; <span class="hljs-string">`hello <span class="hljs-subst">${name}</span>`</span><br>    <span class="hljs-title function_">expect</span>(<span class="hljs-title function_">hello</span>(<span class="hljs-string">'world'</span>)).<span class="hljs-title function_">eq</span>(<span class="hljs-string">'hello world'</span>)<br>  })<br>})<br></code></pre></td></tr></tbody></table></figure><p>也可以使用 -t 参数指定要执行的测试，例如</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pnpm vitest hello.test.ts -t <span class="hljs-string">'add'</span><br></code></pre></td></tr></tbody></table></figure><p>也可以使用 <code>it.only/descrive.only</code> 来指定要执行的测试</p><p>另外一些 beforeEach/afterEach 等钩子函数也是支持的</p><p>例如默认创建一个测试目录</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> __filename = <span class="hljs-title function_">fileURLToPath</span>(<span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">url</span>)<br><span class="hljs-keyword">const</span> __dirname = path.<span class="hljs-title function_">dirname</span>(__filename)<br><span class="hljs-keyword">const</span> tempPath = path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">'.temp'</span>, path.<span class="hljs-title function_">basename</span>(__filename))<br><span class="hljs-title function_">beforeEach</span>(<span class="hljs-keyword">async</span> () =&gt; {<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">rm</span>(tempPath, { <span class="hljs-attr">recursive</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">force</span>: <span class="hljs-literal">true</span> })<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">mkdir</span>(tempPath, { <span class="hljs-attr">recursive</span>: <span class="hljs-literal">true</span> })<br>})<br><span class="hljs-title function_">afterEach</span>(<span class="hljs-keyword">async</span> () =&gt; {<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">rm</span>(tempPath, { <span class="hljs-attr">recursive</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">force</span>: <span class="hljs-literal">true</span> })<br>})<br></code></pre></td></tr></tbody></table></figure><h2 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h2><p>vitest 默认内嵌 chaijs 作为断言库，并且兼容了 jest 的断言 api。</p><p>最有趣的是，它支持某些断言很简洁，例如断言一些常见的值</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-title function_">expect</span>(<span class="hljs-literal">true</span>).<span class="hljs-property">true</span><br><span class="hljs-title function_">expect</span>(<span class="hljs-literal">false</span>).<span class="hljs-property">false</span><br><span class="hljs-title function_">expect</span>(<span class="hljs-literal">undefined</span>).<span class="hljs-property">undefined</span><br><span class="hljs-title function_">expect</span>(<span class="hljs-literal">null</span>).<span class="hljs-property">null</span><br></code></pre></td></tr></tbody></table></figure><p>或者对比值</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-title function_">expect</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_">eq</span>(<span class="hljs-number">1</span>)<br><span class="hljs-title function_">expect</span>({ <span class="hljs-attr">name</span>: <span class="hljs-string">'world'</span> }).<span class="hljs-property">deep</span>.<span class="hljs-title function_">eq</span>({ <span class="hljs-attr">name</span>: <span class="hljs-string">'world'</span> }) <span class="hljs-comment">// 深度对比</span><br></code></pre></td></tr></tbody></table></figure><p>断言数组中包含指定值</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-title function_">expect</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]).<span class="hljs-title function_">members</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br></code></pre></td></tr></tbody></table></figure><h2 id="web-api-polyfill"><a href="#web-api-polyfill" class="headerlink" title="web api polyfill"></a>web api polyfill</h2><p>通常在 web 项目中测试时也会包含一些 dom api，例如 localStorage/indexedDB 等。</p><h3 id="happy-dom"><a href="#happy-dom" class="headerlink" title="happy-dom"></a>happy-dom</h3><p>dom 相关的 api mock 可以通过 <code>happy-dom</code> 来实现，它是一个简单的 dom 实现，可以在 node 中运行，虽然 api 比 jsdom 少一些，但速度要更快。</p><p>配置</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">{</span><br>  <span class="hljs-attr">"test"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span><br>    <span class="hljs-attr">"environment"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"happy-dom"</span><br>  <span class="hljs-punctuation">}</span><br><span class="hljs-punctuation">}</span><br></code></pre></td></tr></tbody></table></figure><p>使用 localStorage</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-title function_">expect</span>(<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">'test'</span>)).<span class="hljs-property">null</span><br><span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">'test'</span>, <span class="hljs-string">'test'</span>)<br><span class="hljs-title function_">expect</span>(<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">'test'</span>)).<span class="hljs-title function_">eq</span>(<span class="hljs-string">'test'</span>)<br><span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">removeItem</span>(<span class="hljs-string">'test'</span>)<br></code></pre></td></tr></tbody></table></figure><h3 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h3><p>nodejs@18 支持了 fetch 请求，不再需要 polyfill。</p><h3 id="indexedDB"><a href="#indexedDB" class="headerlink" title="indexedDB"></a>indexedDB</h3><p>遗憾的是 hyppy-dom 没有实现 indexedDB，所以我们需要使用 <code>fake-indexeddb</code> 做 polyfill。<br>这个不需要做什么配置，只需要在测试文件中引入即可</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> <span class="hljs-string">'fake-indexeddb/auto'</span><br><span class="hljs-keyword">import</span> { openDB } <span class="hljs-keyword">from</span> <span class="hljs-string">'idb'</span><br><br><span class="hljs-title function_">it</span>(<span class="hljs-string">'indexeddb'</span>, <span class="hljs-keyword">async</span> () =&gt; {<br>  <span class="hljs-keyword">const</span> db = <span class="hljs-keyword">await</span> openDB&lt;{<br>    <span class="hljs-attr">books</span>: {<br>      <span class="hljs-attr">title</span>: <span class="hljs-built_in">string</span><br>      <span class="hljs-attr">author</span>: <span class="hljs-built_in">string</span><br>      <span class="hljs-attr">isbn</span>: <span class="hljs-built_in">string</span><br>    }<br>  }&gt;(<span class="hljs-string">'test'</span>, <span class="hljs-number">1</span>, {<br>    <span class="hljs-title function_">upgrade</span>(<span class="hljs-params">db</span>) {<br>      db.<span class="hljs-title function_">createObjectStore</span>(<span class="hljs-string">'books'</span>, {<br>        <span class="hljs-attr">autoIncrement</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">keyPath</span>: <span class="hljs-string">'isbn'</span>,<br>      })<br>    },<br>  })<br>  <span class="hljs-title function_">expect</span>(<span class="hljs-keyword">await</span> db.<span class="hljs-title function_">getAll</span>(<span class="hljs-string">'books'</span>)).<span class="hljs-property">empty</span><br>  <span class="hljs-keyword">await</span> db.<span class="hljs-title function_">add</span>(<span class="hljs-string">'books'</span>, {<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">'Quarry Memories'</span>,<br>    <span class="hljs-attr">author</span>: <span class="hljs-string">'Fred'</span>,<br>    <span class="hljs-attr">isbn</span>: <span class="hljs-number">123456</span>,<br>  })<br>  <span class="hljs-keyword">await</span> db.<span class="hljs-title function_">add</span>(<span class="hljs-string">'books'</span>, {<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">'Water Buffaloes'</span>,<br>    <span class="hljs-attr">author</span>: <span class="hljs-string">'Fred'</span>,<br>    <span class="hljs-attr">isbn</span>: <span class="hljs-number">234567</span>,<br>  })<br>  <span class="hljs-title function_">expect</span>(<span class="hljs-keyword">await</span> db.<span class="hljs-title function_">getAll</span>(<span class="hljs-string">'books'</span>)).<span class="hljs-title function_">length</span>(<span class="hljs-number">2</span>)<br>})<br></code></pre></td></tr></tbody></table></figure><h2 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h2><ul><li>vitest 有一个 vscode 插件，但目前尚未支持 monorepo，所以建议不要使用</li><li>vitest 基于 vite，<code>__dirname/__filename</code> 等变量在测试中可用，但实际上在 nodejs esm 中不可用</li><li>vitest 与 node:test 的 api 有重叠，尤其是 it/describe，要留意不要错误引用</li></ul>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    <category term="前端" scheme="https://blog.rxliuli.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="框架" scheme="https://blog.rxliuli.com/categories/%E5%89%8D%E7%AB%AF/%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="工具" scheme="https://blog.rxliuli.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="vite" scheme="https://blog.rxliuli.com/tags/vite/"/>
    
  </entry>
  
</feed>
